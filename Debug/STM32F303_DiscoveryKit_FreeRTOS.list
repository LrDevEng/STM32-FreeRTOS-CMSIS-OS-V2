
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080083f4  080083f4  000093f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d8  080084d8  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080084d8  080084d8  0000a060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080084d8  080084d8  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080084e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          00002408  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002468  20002468  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000237a6  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046e7  00000000  00000000  0002d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00031f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160e  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000445b  00000000  00000000  00035156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e10  00000000  00000000  000395b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c39  00000000  00000000  0005c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123ffa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b28  00000000  00000000  00124040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0012bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083dc 	.word	0x080083dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080083dc 	.word	0x080083dc

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd32 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f84c 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9c2 	bl	80005b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8b0 	bl	8000394 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f92e 	bl	8000494 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f99a 	bl	8000570 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8ea 	bl	8000414 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f966 	bl	8000510 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9cc 	bl	80045e0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000248:	4813      	ldr	r0, [pc, #76]	@ (8000298 <main+0x78>)
 800024a:	f004 fbbb 	bl	80049c4 <osMutexNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a12      	ldr	r2, [pc, #72]	@ (800029c <main+0x7c>)
 8000252:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <main+0x80>)
 8000256:	2100      	movs	r1, #0
 8000258:	2002      	movs	r0, #2
 800025a:	f004 fcfb 	bl	8004c54 <osSemaphoreNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a10      	ldr	r2, [pc, #64]	@ (80002a4 <main+0x84>)
 8000262:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000264:	4a10      	ldr	r2, [pc, #64]	@ (80002a8 <main+0x88>)
 8000266:	2100      	movs	r1, #0
 8000268:	4810      	ldr	r0, [pc, #64]	@ (80002ac <main+0x8c>)
 800026a:	f004 fa21 	bl	80046b0 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0f      	ldr	r2, [pc, #60]	@ (80002b0 <main+0x90>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000274:	4a0f      	ldr	r2, [pc, #60]	@ (80002b4 <main+0x94>)
 8000276:	2100      	movs	r1, #0
 8000278:	480f      	ldr	r0, [pc, #60]	@ (80002b8 <main+0x98>)
 800027a:	f004 fa19 	bl	80046b0 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <main+0x9c>)
 8000282:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  EventGroup1 = osEventFlagsNew(NULL);
 8000284:	2000      	movs	r0, #0
 8000286:	f004 fb4b 	bl	8004920 <osEventFlagsNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <main+0xa0>)
 800028e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000290:	f004 f9da 	bl	8004648 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <main+0x74>
 8000298:	08008480 	.word	0x08008480
 800029c:	200004ec 	.word	0x200004ec
 80002a0:	08008490 	.word	0x08008490
 80002a4:	200004f0 	.word	0x200004f0
 80002a8:	08008438 	.word	0x08008438
 80002ac:	0800070d 	.word	0x0800070d
 80002b0:	200004e4 	.word	0x200004e4
 80002b4:	0800845c 	.word	0x0800845c
 80002b8:	08000759 	.word	0x08000759
 80002bc:	200004e8 	.word	0x200004e8
 80002c0:	200004f4 	.word	0x200004f4

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09e      	sub	sp, #120	@ 0x78
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f007 ff92 	bl	80081fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	223c      	movs	r2, #60	@ 0x3c
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f007 ff84 	bl	80081fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002f4:	2303      	movs	r3, #3
 80002f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000306:	2310      	movs	r3, #16
 8000308:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000312:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000314:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000318:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fa06 	bl	8001730 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800032a:	f000 fa4d 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000344:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000348:	2101      	movs	r1, #1
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f9fe 	bl	800274c <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000356:	f000 fa37 	bl	80007c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800035a:	4b0d      	ldr	r3, [pc, #52]	@ (8000390 <SystemClock_Config+0xcc>)
 800035c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000366:	2300      	movs	r3, #0
 8000368:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800036a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800036e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fc66 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800037e:	f000 fa23 	bl	80007c8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000382:	f002 fb51 	bl	8002a28 <HAL_RCC_EnableCSS>
}
 8000386:	bf00      	nop
 8000388:	3778      	adds	r7, #120	@ 0x78
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	00020062 	.word	0x00020062

08000394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <MX_I2C1_Init+0x74>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	@ (800040c <MX_I2C1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800039e:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <MX_I2C1_Init+0x7c>)
 80003a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003aa:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c2:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ce:	480e      	ldr	r0, [pc, #56]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003d0:	f000 ffb4 	bl	800133c <HAL_I2C_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003da:	f000 f9f5 	bl	80007c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003de:	2100      	movs	r1, #0
 80003e0:	4809      	ldr	r0, [pc, #36]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003e2:	f001 f846 	bl	8001472 <HAL_I2CEx_ConfigAnalogFilter>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003ec:	f000 f9ec 	bl	80007c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003f4:	f001 f888 	bl	8001508 <HAL_I2CEx_ConfigDigitalFilter>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f9e3 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000007c 	.word	0x2000007c
 800040c:	40005400 	.word	0x40005400
 8000410:	00201d2b 	.word	0x00201d2b

08000414 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_I2C2_Init+0x74>)
 800041a:	4a1c      	ldr	r2, [pc, #112]	@ (800048c <MX_I2C2_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800041e:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <MX_I2C2_Init+0x7c>)
 8000422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_I2C2_Init+0x74>)
 800042c:	2201      	movs	r2, #1
 800042e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <MX_I2C2_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_I2C2_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800044e:	480e      	ldr	r0, [pc, #56]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000450:	f000 ff74 	bl	800133c <HAL_I2C_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800045a:	f000 f9b5 	bl	80007c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800045e:	2100      	movs	r1, #0
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000462:	f001 f806 	bl	8001472 <HAL_I2CEx_ConfigAnalogFilter>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800046c:	f000 f9ac 	bl	80007c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000470:	2100      	movs	r1, #0
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_I2C2_Init+0x74>)
 8000474:	f001 f848 	bl	8001508 <HAL_I2CEx_ConfigDigitalFilter>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800047e:	f000 f9a3 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200000d0 	.word	0x200000d0
 800048c:	40005800 	.word	0x40005800
 8000490:	00201d2b 	.word	0x00201d2b

08000494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_SPI1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_SPI1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004f4:	f002 fd54 	bl	8002fa0 <HAL_SPI_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f963 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000124 	.word	0x20000124
 800050c:	40013000 	.word	0x40013000

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	f003 f87e 	bl	8003654 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f933 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000188 	.word	0x20000188
 800056c:	40004400 	.word	0x40004400

08000570 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <MX_USB_PCD_Init+0x40>)
 8000578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 800057c:	2208      	movs	r2, #8
 800057e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 8000582:	2202      	movs	r2, #2
 8000584:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 8000588:	2202      	movs	r2, #2
 800058a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 800058e:	2200      	movs	r2, #0
 8000590:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 8000594:	2200      	movs	r2, #0
 8000596:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <MX_USB_PCD_Init+0x3c>)
 800059a:	f001 f801 	bl	80015a0 <HAL_PCD_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005a4:	f000 f910 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000210 	.word	0x20000210
 80005b0:	40005c00 	.word	0x40005c00

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4b3c      	ldr	r3, [pc, #240]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a3b      	ldr	r2, [pc, #236]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b39      	ldr	r3, [pc, #228]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b36      	ldr	r3, [pc, #216]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a35      	ldr	r2, [pc, #212]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b30      	ldr	r3, [pc, #192]	@ (80006bc <MX_GPIO_Init+0x108>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a2f      	ldr	r2, [pc, #188]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000600:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a29      	ldr	r2, [pc, #164]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_GPIO_Init+0x108>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a23      	ldr	r2, [pc, #140]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_GPIO_Init+0x108>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000648:	481d      	ldr	r0, [pc, #116]	@ (80006c0 <MX_GPIO_Init+0x10c>)
 800064a:	f000 fe2d 	bl	80012a8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 800064e:	2336      	movs	r3, #54	@ 0x36
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000652:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_GPIO_Init+0x10c>)
 8000664:	f000 fca6 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000668:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800066c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <MX_GPIO_Init+0x10c>)
 8000682:	f000 fc97 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000686:	2301      	movs	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 fc89 	bl	8000fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2006      	movs	r0, #6
 80006a8:	f000 fbde 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ac:	2006      	movs	r0, #6
 80006ae:	f000 fbf7 	bl	8000ea0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	@ 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48001000 	.word	0x48001000

080006c4 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  ITM_SendChar(message);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd7d 	bl	80001d0 <ITM_SendChar>
  ITM_SendChar('\n');
 80006d6:	200a      	movs	r0, #10
 80006d8:	f7ff fd7a 	bl	80001d0 <ITM_SendChar>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
  osThreadFlagsSet(Task1Handle, 0x01);
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_GPIO_EXTI_Callback+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f885 	bl	8004804 <osThreadFlagsSet>
  Task_action('!');
 80006fa:	2021      	movs	r0, #33	@ 0x21
 80006fc:	f7ff ffe2 	bl	80006c4 <Task_action>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200004e4 	.word	0x200004e4

0800070c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
      osMutexAcquire(myMutex01Handle,osWaitForever);
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <StartTask1+0x44>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	4618      	mov	r0, r3
 800071e:	f004 f9eb 	bl	8004af8 <osMutexAcquire>
      Task_action('1');
 8000722:	2031      	movs	r0, #49	@ 0x31
 8000724:	f7ff ffce 	bl	80006c4 <Task_action>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <StartTask1+0x48>)
 800072e:	f000 fdd3 	bl	80012d8 <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000736:	f004 f8c5 	bl	80048c4 <osDelay>
      osMutexRelease(myMutex01Handle);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <StartTask1+0x44>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fa38 	bl	8004bb4 <osMutexRelease>
      osDelay(100);
 8000744:	2064      	movs	r0, #100	@ 0x64
 8000746:	f004 f8bd 	bl	80048c4 <osDelay>
      osMutexAcquire(myMutex01Handle,osWaitForever);
 800074a:	bf00      	nop
 800074c:	e7e2      	b.n	8000714 <StartTask1+0x8>
 800074e:	bf00      	nop
 8000750:	200004ec 	.word	0x200004ec
 8000754:	48001000 	.word	0x48001000

08000758 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
      osMutexAcquire(myMutex01Handle,osWaitForever);
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <StartTask2+0x44>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	4618      	mov	r0, r3
 800076a:	f004 f9c5 	bl	8004af8 <osMutexAcquire>
      Task_action('2');
 800076e:	2032      	movs	r0, #50	@ 0x32
 8000770:	f7ff ffa8 	bl	80006c4 <Task_action>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000774:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <StartTask2+0x48>)
 800077a:	f000 fdad 	bl	80012d8 <HAL_GPIO_TogglePin>
      osDelay(1000);
 800077e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000782:	f004 f89f 	bl	80048c4 <osDelay>
      osMutexRelease(myMutex01Handle);
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <StartTask2+0x44>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fa12 	bl	8004bb4 <osMutexRelease>
      osDelay(100);
 8000790:	2064      	movs	r0, #100	@ 0x64
 8000792:	f004 f897 	bl	80048c4 <osDelay>
      osMutexAcquire(myMutex01Handle,osWaitForever);
 8000796:	bf00      	nop
 8000798:	e7e2      	b.n	8000760 <StartTask2+0x8>
 800079a:	bf00      	nop
 800079c:	200004ec 	.word	0x200004ec
 80007a0:	48001000 	.word	0x48001000

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007b6:	f000 fa7f 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <HAL_MspInit+0x4c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <HAL_MspInit+0x4c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fb29 	bl	8000e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <HAL_I2C_MspInit+0xdc>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a2e      	ldr	r2, [pc, #184]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 800084c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800085e:	23c0      	movs	r3, #192	@ 0xc0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000862:	2312      	movs	r3, #18
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000866:	2301      	movs	r3, #1
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086e:	2304      	movs	r3, #4
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4823      	ldr	r0, [pc, #140]	@ (8000908 <HAL_I2C_MspInit+0xe4>)
 800087a:	f000 fb9b 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000896:	e02e      	b.n	80008f6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <HAL_I2C_MspInit+0xe8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d129      	bne.n	80008f6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c0:	2312      	movs	r3, #18
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008cc:	2304      	movs	r3, #4
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f000 fb6b 	bl	8000fb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_I2C_MspInit+0xe0>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40005400 	.word	0x40005400
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	40005800 	.word	0x40005800

08000910 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <HAL_SPI_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d128      	bne.n	8000984 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 8000938:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_SPI_MspInit+0x80>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000962:	23e0      	movs	r3, #224	@ 0xe0
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000972:	2305      	movs	r3, #5
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000980:	f000 fb18 	bl	8000fb4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <HAL_UART_MspInit+0x8c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d130      	bne.n	8000a18 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_UART_MspInit+0x90>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f000 fad6 	bl	8000fb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	2026      	movs	r0, #38	@ 0x26
 8000a0e:	f000 fa2b 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a12:	2026      	movs	r0, #38	@ 0x26
 8000a14:	f000 fa44 	bl	8000ea0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a18      	ldr	r2, [pc, #96]	@ (8000aa8 <HAL_PCD_MspInit+0x80>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d129      	bne.n	8000a9e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a17      	ldr	r2, [pc, #92]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a74:	230e      	movs	r3, #14
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a82:	f000 fa97 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_PCD_MspInit+0x84>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40005c00 	.word	0x40005c00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac0:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <HAL_InitTick+0xe0>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4a32      	ldr	r2, [pc, #200]	@ (8000b90 <HAL_InitTick+0xe0>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	61d3      	str	r3, [r2, #28]
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <HAL_InitTick+0xe0>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad8:	f107 0210 	add.w	r2, r7, #16
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f860 	bl	8002ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d103      	bne.n	8000afa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af2:	f002 f815 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8000af6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000af8:	e004      	b.n	8000b04 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afa:	f002 f811 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8000afe:	4603      	mov	r3, r0
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b06:	4a23      	ldr	r2, [pc, #140]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000b08:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0c:	0c9b      	lsrs	r3, r3, #18
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b14:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b16:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b20:	4a1d      	ldr	r2, [pc, #116]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b38:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b3a:	f002 fadc 	bl	80030f6 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b4c:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b4e:	f002 fb33 	bl	80031b8 <HAL_TIM_Base_Start_IT>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d111      	bne.n	8000b84 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b60:	2036      	movs	r0, #54	@ 0x36
 8000b62:	f000 f99d 	bl	8000ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d808      	bhi.n	8000b7e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2036      	movs	r0, #54	@ 0x36
 8000b72:	f000 f979 	bl	8000e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_InitTick+0xf0>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e002      	b.n	8000b84 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3738      	adds	r7, #56	@ 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	200004f8 	.word	0x200004f8
 8000b9c:	40001000 	.word	0x40001000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ba8:	f002 f830 	bl	8002c0c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x8>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 fb92 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART2_IRQHandler+0x10>)
 8000bf2:	f002 fd7d 	bl	80036f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000188 	.word	0x20000188

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f002 fb41 	bl	800328c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200004f8 	.word	0x200004f8

08000c14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c70 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff ffea 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	@ (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	@ (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f007 fb2f 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fad9 	bl	8000220 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c7c:	080084e0 	.word	0x080084e0
  ldr r2, =_sbss
 8000c80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c84:	20002468 	.word	0x20002468

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f8d8 	bl	8000e52 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f7ff ff04 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fd94 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000544 	.word	0x20000544

08000ce0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000544 	.word	0x20000544

08000cf8 <__NVIC_SetPriorityGrouping>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4c 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7a:	f7ff ff61 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6978      	ldr	r0, [r7, #20]
 8000e86:	f7ff ffb1 	bl	8000dec <NVIC_EncodePriority>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff80 	bl	8000d98 <__NVIC_SetPriority>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff54 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e02e      	b.n	8000f2c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d008      	beq.n	8000eea <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2204      	movs	r2, #4
 8000edc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e020      	b.n	8000f2c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 020e 	bic.w	r2, r2, #14
 8000ef8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d005      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2204      	movs	r2, #4
 8000f52:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e027      	b.n	8000faa <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 020e 	bic.w	r2, r2, #14
 8000f68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
    }
  }
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e154      	b.n	800126e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8146 	beq.w	8001268 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a0 	beq.w	8001268 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b58      	ldr	r3, [pc, #352]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a57      	ldr	r2, [pc, #348]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b55      	ldr	r3, [pc, #340]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001140:	4a53      	ldr	r2, [pc, #332]	@ (8001290 <HAL_GPIO_Init+0x2dc>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800116a:	d019      	beq.n	80011a0 <HAL_GPIO_Init+0x1ec>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a49      	ldr	r2, [pc, #292]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_Init+0x1e8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a48      	ldr	r2, [pc, #288]	@ (8001298 <HAL_GPIO_Init+0x2e4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1e4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a47      	ldr	r2, [pc, #284]	@ (800129c <HAL_GPIO_Init+0x2e8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1e0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1dc>
 800118c:	2304      	movs	r3, #4
 800118e:	e008      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 8001190:	2305      	movs	r3, #5
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 8001194:	2303      	movs	r3, #3
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 80011a0:	2300      	movs	r3, #0
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b2:	4937      	ldr	r1, [pc, #220]	@ (8001290 <HAL_GPIO_Init+0x2dc>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c0:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e4:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ea:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800120e:	4a25      	ldr	r2, [pc, #148]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001214:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001238:	4a1a      	ldr	r2, [pc, #104]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aea3 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000
 8001294:	48000400 	.word	0x48000400
 8001298:	48000800 	.word	0x48000800
 800129c:	48000c00 	.word	0x48000c00
 80012a0:	48001000 	.word	0x48001000
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4013      	ands	r3, r2
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43d9      	mvns	r1, r3
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	400b      	ands	r3, r1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f9da 	bl	80006e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e08d      	b.n	800146a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fa5e 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	@ 0x24
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800138c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800139c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e006      	b.n	80013c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d108      	bne.n	80013de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	e007      	b.n	80013ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001400:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69d9      	ldr	r1, [r3, #28]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b20      	cmp	r3, #32
 8001486:	d138      	bne.n	80014fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001492:	2302      	movs	r3, #2
 8001494:	e032      	b.n	80014fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2224      	movs	r2, #36	@ 0x24
 80014a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2220      	movs	r2, #32
 80014ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
  }
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b20      	cmp	r3, #32
 800151c:	d139      	bne.n	8001592 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001528:	2302      	movs	r3, #2
 800152a:	e033      	b.n	8001594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	@ 0x24
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800155a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001592:	2302      	movs	r3, #2
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0b9      	b.n	8001726 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fa2e 	bl	8000a28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 ffc8 	bl	800456e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e03e      	b.n	8001662 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3311      	adds	r3, #17
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3310      	adds	r3, #16
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3313      	adds	r3, #19
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3320      	adds	r3, #32
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3324      	adds	r3, #36	@ 0x24
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3bb      	bcc.n	80015e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e044      	b.n	80016fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	791b      	ldrb	r3, [r3, #4]
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3b5      	bcc.n	8001672 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001712:	f002 ff47 	bl	80045a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001736:	af00      	add	r7, sp, #0
 8001738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001740:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	f000 bff4 	b.w	800273e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 816d 	beq.w	8001a46 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800176c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001778:	4bb1      	ldr	r3, [pc, #708]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d157      	bne.n	8001834 <HAL_RCC_OscConfig+0x104>
 8001784:	4bae      	ldr	r3, [pc, #696]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001790:	d150      	bne.n	8001834 <HAL_RCC_OscConfig+0x104>
 8001792:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001796:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	d802      	bhi.n	80017ba <HAL_RCC_OscConfig+0x8a>
 80017b4:	4ba2      	ldr	r3, [pc, #648]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0xb6>
 80017ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017be:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017e2:	4b97      	ldr	r3, [pc, #604]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ea:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017f2:	fa92 f2a2 	rbit	r2, r2
 80017f6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017fe:	fab2 f282 	clz	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8114 	beq.w	8001a44 <HAL_RCC_OscConfig+0x314>
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 810b 	bne.w	8001a44 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 bf85 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001838:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x124>
 8001846:	4b7e      	ldr	r3, [pc, #504]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e036      	b.n	80018c2 <HAL_RCC_OscConfig+0x192>
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x14e>
 8001864:	4b76      	ldr	r3, [pc, #472]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a75      	ldr	r2, [pc, #468]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b73      	ldr	r3, [pc, #460]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a72      	ldr	r2, [pc, #456]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e021      	b.n	80018c2 <HAL_RCC_OscConfig+0x192>
 800187e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x17a>
 8001890:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6a      	ldr	r2, [pc, #424]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a67      	ldr	r2, [pc, #412]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x192>
 80018aa:	4b65      	ldr	r3, [pc, #404]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a64      	ldr	r2, [pc, #400]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a61      	ldr	r2, [pc, #388]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	f023 020f 	bic.w	r2, r3, #15
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	495a      	ldr	r1, [pc, #360]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d054      	beq.n	8001996 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9f8 	bl	8000ce0 <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7ff f9f3 	bl	8000ce0 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	@ 0x64
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bf19 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 800190c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001910:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001920:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b3f      	cmp	r3, #63	@ 0x3f
 800192c:	d802      	bhi.n	8001934 <HAL_RCC_OscConfig+0x204>
 800192e:	4b44      	ldr	r3, [pc, #272]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e015      	b.n	8001960 <HAL_RCC_OscConfig+0x230>
 8001934:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001938:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800194c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800195c:	4b38      	ldr	r3, [pc, #224]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001964:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001968:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800196c:	fa92 f2a2 	rbit	r2, r2
 8001970:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001974:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0b0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
 8001994:	e057      	b.n	8001a46 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f9a3 	bl	8000ce0 <HAL_GetTick>
 800199a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f99e 	bl	8000ce0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	@ 0x64
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 bec4 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 80019b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019d6:	d802      	bhi.n	80019de <HAL_RCC_OscConfig+0x2ae>
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x2da>
 80019de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <HAL_RCC_OscConfig+0x310>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a0e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a12:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a16:	fa92 f2a2 	rbit	r2, r2
 8001a1a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a22:	fab2 f282 	clz	r2, r2
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f042 0220 	orr.w	r2, r2, #32
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f002 021f 	and.w	r2, r2, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1b0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x270>
 8001a3e:	e002      	b.n	8001a46 <HAL_RCC_OscConfig+0x316>
 8001a40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 816c 	beq.w	8001d34 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a5c:	4bcc      	ldr	r3, [pc, #816]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a68:	4bc9      	ldr	r3, [pc, #804]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d16d      	bne.n	8001b50 <HAL_RCC_OscConfig+0x420>
 8001a74:	4bc6      	ldr	r3, [pc, #792]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d167      	bne.n	8001b50 <HAL_RCC_OscConfig+0x420>
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a92:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a9e:	d802      	bhi.n	8001aa6 <HAL_RCC_OscConfig+0x376>
 8001aa0:	4bbb      	ldr	r3, [pc, #748]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e013      	b.n	8001ace <HAL_RCC_OscConfig+0x39e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001abe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001aca:	4bb1      	ldr	r3, [pc, #708]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ad4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ae0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3e6>
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f000 be14 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b9e      	ldr	r3, [pc, #632]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	21f8      	movs	r1, #248	@ 0xf8
 8001b2c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b34:	fa91 f1a1 	rbit	r1, r1
 8001b38:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b40:	fab1 f181 	clz	r1, r1
 8001b44:	b2c9      	uxtb	r1, r1
 8001b46:	408b      	lsls	r3, r1
 8001b48:	4991      	ldr	r1, [pc, #580]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e0f1      	b.n	8001d34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8083 	beq.w	8001c68 <HAL_RCC_OscConfig+0x538>
 8001b62:	2301      	movs	r3, #1
 8001b64:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b74:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f8a7 	bl	8000ce0 <HAL_GetTick>
 8001b92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f8a2 	bl	8000ce0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d902      	bls.n	8001bae <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f000 bdc8 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_RCC_OscConfig+0x4a4>
 8001bce:	4b70      	ldr	r3, [pc, #448]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x4cc>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bf8:	4b65      	ldr	r3, [pc, #404]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0b4      	beq.n	8001b98 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b58      	ldr	r3, [pc, #352]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	21f8      	movs	r1, #248	@ 0xf8
 8001c44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c4c:	fa91 f1a1 	rbit	r1, r1
 8001c50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c58:	fab1 f181 	clz	r1, r1
 8001c5c:	b2c9      	uxtb	r1, r1
 8001c5e:	408b      	lsls	r3, r1
 8001c60:	494b      	ldr	r1, [pc, #300]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
 8001c66:	e065      	b.n	8001d34 <HAL_RCC_OscConfig+0x604>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f824 	bl	8000ce0 <HAL_GetTick>
 8001c98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f81f 	bl	8000ce0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bd45 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd2:	d802      	bhi.n	8001cda <HAL_RCC_OscConfig+0x5aa>
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e013      	b.n	8001d02 <HAL_RCC_OscConfig+0x5d2>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <HAL_RCC_OscConfig+0x660>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2202      	movs	r2, #2
 8001d04:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d08:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d14:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b4      	bne.n	8001c9e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8115 	beq.w	8001f74 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d07e      	beq.n	8001e58 <HAL_RCC_OscConfig+0x728>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x664>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2301      	movs	r3, #1
 8001d82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffac 	bl	8000ce0 <HAL_GetTick>
 8001d88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8c:	e00f      	b.n	8001dae <HAL_RCC_OscConfig+0x67e>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe ffa2 	bl	8000ce0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d902      	bls.n	8001dae <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	f000 bcc8 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc8:	2202      	movs	r2, #2
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	4bb0      	ldr	r3, [pc, #704]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e14:	2102      	movs	r1, #2
 8001e16:	6019      	str	r1, [r3, #0]
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f1a3 	rbit	r1, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e2e:	6019      	str	r1, [r3, #0]
  return result;
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0a0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x668>
 8001e56:	e08d      	b.n	8001f74 <HAL_RCC_OscConfig+0x844>
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e7a:	601a      	str	r2, [r3, #0]
  return result;
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b90      	ldr	r3, [pc, #576]	@ (80020d0 <HAL_RCC_OscConfig+0x9a0>)
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	2300      	movs	r3, #0
 8001e98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe ff21 	bl	8000ce0 <HAL_GetTick>
 8001e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe ff1c 	bl	8000ce0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d902      	bls.n	8001eba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	f000 bc42 	b.w	800273e <HAL_RCC_OscConfig+0x100e>
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f26:	4b69      	ldr	r3, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f32:	2102      	movs	r1, #2
 8001f34:	6019      	str	r1, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f1a3 	rbit	r1, r3
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f4c:	6019      	str	r1, [r3, #0]
  return result;
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d197      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 819e 	beq.w	80022c6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f90:	4b4e      	ldr	r3, [pc, #312]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d116      	bne.n	8001fca <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	4b48      	ldr	r3, [pc, #288]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <HAL_RCC_OscConfig+0x9a4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <HAL_RCC_OscConfig+0x9a4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a3e      	ldr	r2, [pc, #248]	@ (80020d4 <HAL_RCC_OscConfig+0x9a4>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fe7d 	bl	8000ce0 <HAL_GetTick>
 8001fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	e009      	b.n	8002000 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7fe fe78 	bl	8000ce0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	@ 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e39e      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <HAL_RCC_OscConfig+0x9a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x8fa>
 800201c:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e035      	b.n	8002096 <HAL_RCC_OscConfig+0x966>
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x924>
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	e020      	b.n	8002096 <HAL_RCC_OscConfig+0x966>
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0x94e>
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a15      	ldr	r2, [pc, #84]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x966>
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_RCC_OscConfig+0x99c>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fe1a 	bl	8000ce0 <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e012      	b.n	80020d8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fe15 	bl	8000ce0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e339      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	10908120 	.word	0x10908120
 80020d4:	40007000 	.word	0x40007000
 80020d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020e0:	2202      	movs	r2, #2
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800211e:	601a      	str	r2, [r3, #0]
  return result;
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002128:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_RCC_OscConfig+0xa10>
 800213a:	4b98      	ldr	r3, [pc, #608]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	e013      	b.n	8002168 <HAL_RCC_OscConfig+0xa38>
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002150:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	4b8d      	ldr	r3, [pc, #564]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800216c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002170:	2102      	movs	r1, #2
 8002172:	6011      	str	r1, [r2, #0]
 8002174:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002178:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	fa92 f1a2 	rbit	r1, r2
 8002182:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002186:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800218a:	6011      	str	r1, [r2, #0]
  return result;
 800218c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002190:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f43f af7f 	beq.w	80020b2 <HAL_RCC_OscConfig+0x982>
 80021b4:	e07d      	b.n	80022b2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fd93 	bl	8000ce0 <HAL_GetTick>
 80021ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fd8e 	bl	8000ce0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e2b2      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002228:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0xb10>
 800223a:	4b58      	ldr	r3, [pc, #352]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0xb38>
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002248:	2202      	movs	r2, #2
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f2a3 	rbit	r2, r3
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	4b4d      	ldr	r3, [pc, #308]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800226c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002270:	2102      	movs	r1, #2
 8002272:	6011      	str	r1, [r2, #0]
 8002274:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002278:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fa92 f1a2 	rbit	r1, r2
 8002282:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002286:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800228a:	6011      	str	r1, [r2, #0]
  return result;
 800228c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002290:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d186      	bne.n	80021c0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b38      	ldr	r3, [pc, #224]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a37      	ldr	r2, [pc, #220]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8232 	beq.w	800273c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f000 8201 	beq.w	80026e8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f040 8157 	bne.w	80025a6 <HAL_RCC_OscConfig+0xe76>
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800231c:	601a      	str	r2, [r3, #0]
  return result;
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002326:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002332:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	461a      	mov	r2, r3
 800233a:	2300      	movs	r3, #0
 800233c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fccf 	bl	8000ce0 <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	e009      	b.n	800235c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fcca 	bl	8000ce0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1f0      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002380:	601a      	str	r2, [r3, #0]
  return result;
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800238a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b3f      	cmp	r3, #63	@ 0x3f
 8002394:	d804      	bhi.n	80023a0 <HAL_RCC_OscConfig+0xc70>
 8002396:	4b01      	ldr	r3, [pc, #4]	@ (800239c <HAL_RCC_OscConfig+0xc6c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e029      	b.n	80023f0 <HAL_RCC_OscConfig+0xcc0>
 800239c:	40021000 	.word	0x40021000
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	4bc3      	ldr	r3, [pc, #780]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023fc:	6011      	str	r1, [r2, #0]
 80023fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002402:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	fa92 f1a2 	rbit	r1, r2
 800240c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002410:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002414:	6011      	str	r1, [r2, #0]
  return result;
 8002416:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800241a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f002 021f 	and.w	r2, r2, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d185      	bne.n	8002348 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4baf      	ldr	r3, [pc, #700]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	430b      	orrs	r3, r1
 800245e:	49a7      	ldr	r1, [pc, #668]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800246c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002488:	601a      	str	r2, [r3, #0]
  return result;
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002492:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800249e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fc19 	bl	8000ce0 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fc14 	bl	8000ce0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e13a      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024ec:	601a      	str	r2, [r3, #0]
  return result;
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002500:	d802      	bhi.n	8002508 <HAL_RCC_OscConfig+0xdd8>
 8002502:	4b7e      	ldr	r3, [pc, #504]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e027      	b.n	8002558 <HAL_RCC_OscConfig+0xe28>
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002510:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002536:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b69      	ldr	r3, [pc, #420]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002560:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	fa92 f1a2 	rbit	r1, r2
 8002574:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002578:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800257c:	6011      	str	r1, [r2, #0]
  return result;
 800257e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002582:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f002 021f 	and.w	r2, r2, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d087      	beq.n	80024b4 <HAL_RCC_OscConfig+0xd84>
 80025a4:	e0ca      	b.n	800273c <HAL_RCC_OscConfig+0x100c>
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025ca:	601a      	str	r2, [r3, #0]
  return result;
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2300      	movs	r3, #0
 80025ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fb78 	bl	8000ce0 <HAL_GetTick>
 80025f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	e009      	b.n	800260a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fb73 	bl	8000ce0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e099      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002612:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002638:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b3f      	cmp	r3, #63	@ 0x3f
 8002642:	d802      	bhi.n	800264a <HAL_RCC_OscConfig+0xf1a>
 8002644:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e027      	b.n	800269a <HAL_RCC_OscConfig+0xf6a>
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002652:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_OscConfig+0xfcc>)
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800269e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026a6:	6011      	str	r1, [r2, #0]
 80026a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	fa92 f1a2 	rbit	r1, r2
 80026b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026be:	6011      	str	r1, [r2, #0]
  return result;
 80026c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	fab2 f282 	clz	r2, r2
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f042 0220 	orr.w	r2, r2, #32
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f002 021f 	and.w	r2, r2, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d187      	bne.n	80025f6 <HAL_RCC_OscConfig+0xec6>
 80026e6:	e029      	b.n	800273c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d103      	bne.n	8002700 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e020      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
 80026fc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_RCC_OscConfig+0x1018>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002708:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800270c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002720:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002724:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09e      	sub	sp, #120	@ 0x78
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e154      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b89      	ldr	r3, [pc, #548]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b86      	ldr	r3, [pc, #536]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4984      	ldr	r1, [pc, #528]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b82      	ldr	r3, [pc, #520]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e13c      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4978      	ldr	r1, [pc, #480]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80cd 	beq.w	800295a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d137      	bne.n	8002838 <HAL_RCC_ClockConfig+0xec>
 80027c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b3f      	cmp	r3, #63	@ 0x3f
 80027e0:	d802      	bhi.n	80027e8 <HAL_RCC_ClockConfig+0x9c>
 80027e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_ClockConfig+0xbc>
 80027e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80027f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80027fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002804:	4b62      	ldr	r3, [pc, #392]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800280c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800280e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002816:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d171      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0ea      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d137      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x164>
 8002840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002844:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800284e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b3f      	cmp	r3, #63	@ 0x3f
 8002858:	d802      	bhi.n	8002860 <HAL_RCC_ClockConfig+0x114>
 800285a:	4b4d      	ldr	r3, [pc, #308]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e00f      	b.n	8002880 <HAL_RCC_ClockConfig+0x134>
 8002860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002864:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
 800286e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002872:	643b      	str	r3, [r7, #64]	@ 0x40
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287c:	4b44      	ldr	r3, [pc, #272]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002884:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002886:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800288e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d135      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ae      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
 80028b0:	2302      	movs	r3, #2
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c6:	d802      	bhi.n	80028ce <HAL_RCC_ClockConfig+0x182>
 80028c8:	4b31      	ldr	r3, [pc, #196]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e00d      	b.n	80028ea <HAL_RCC_ClockConfig+0x19e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	2202      	movs	r2, #2
 80028ec:	61ba      	str	r2, [r7, #24]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	fa92 f2a2 	rbit	r2, r2
 80028f4:	617a      	str	r2, [r7, #20]
  return result;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f002 021f 	and.w	r2, r2, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e07a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	491a      	ldr	r1, [pc, #104]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292a:	f7fe f9d9 	bl	8000ce0 <HAL_GetTick>
 800292e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002930:	e00a      	b.n	8002948 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7fe f9d5 	bl	8000ce0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e062      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_RCC_ClockConfig+0x244>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 020c 	and.w	r2, r3, #12
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	429a      	cmp	r2, r3
 8002958:	d1eb      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d215      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 0207 	bic.w	r2, r3, #7
 8002970:	4906      	ldr	r1, [pc, #24]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <HAL_RCC_ClockConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d006      	beq.n	8002994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_RCC_ClockConfig+0x2c2>
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <HAL_RCC_ClockConfig+0x2cc>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	491a      	ldr	r1, [pc, #104]	@ (8002a18 <HAL_RCC_ClockConfig+0x2cc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_RCC_ClockConfig+0x2cc>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4912      	ldr	r1, [pc, #72]	@ (8002a18 <HAL_RCC_ClockConfig+0x2cc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029d2:	f000 f845 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80029d6:	4601      	mov	r1, r0
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <HAL_RCC_ClockConfig+0x2cc>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e0:	22f0      	movs	r2, #240	@ 0xf0
 80029e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	60fa      	str	r2, [r7, #12]
  return result;
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	40d3      	lsrs	r3, r2
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x2d0>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	fa21 f303 	lsr.w	r3, r1, r3
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <HAL_RCC_ClockConfig+0x2d4>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_RCC_ClockConfig+0x2d8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f852 	bl	8000ab0 <HAL_InitTick>
  
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3778      	adds	r7, #120	@ 0x78
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080084a0 	.word	0x080084a0
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002a32:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	603b      	str	r3, [r7, #0]
  return result;
 8002a3c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2301      	movs	r3, #1
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x30>
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x36>
 8002a8e:	e026      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a92:	613b      	str	r3, [r7, #16]
      break;
 8002a94:	e026      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002abc:	4a0e      	ldr	r2, [pc, #56]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e004      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
      break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae0:	613b      	str	r3, [r7, #16]
      break;
 8002ae2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae4:	693b      	ldr	r3, [r7, #16]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	080084b8 	.word	0x080084b8
 8002b00:	080084c8 	.word	0x080084c8
 8002b04:	003d0900 	.word	0x003d0900

08002b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b26:	f7ff ffef 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b34:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	fa92 f2a2 	rbit	r2, r2
 8002b40:	603a      	str	r2, [r7, #0]
  return result;
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	080084b0 	.word	0x080084b0

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b6a:	f7ff ffcd 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b78:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	fa92 f2a2 	rbit	r2, r2
 8002b84:	603a      	str	r2, [r7, #0]
  return result;
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	fab2 f282 	clz	r2, r2
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	40d3      	lsrs	r3, r2
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	080084b0 	.word	0x080084b0

08002ba8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <HAL_RCC_GetClockConfig+0x60>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0207 	and.w	r2, r3, #7
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c18:	2b80      	cmp	r3, #128	@ 0x80
 8002c1a:	d104      	bne.n	8002c26 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c1c:	f000 f80a 	bl	8002c34 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	701a      	strb	r2, [r3, #0]
  }
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	4002100a 	.word	0x4002100a

08002c34 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b092      	sub	sp, #72	@ 0x48
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80d2 	beq.w	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c68:	4b4d      	ldr	r3, [pc, #308]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10e      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b4a      	ldr	r3, [pc, #296]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a49      	ldr	r2, [pc, #292]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b44      	ldr	r3, [pc, #272]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f819 	bl	8000ce0 <HAL_GetTick>
 8002cae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f815 	bl	8000ce0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	@ 0x64
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e167      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b37      	ldr	r3, [pc, #220]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd0:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8082 	beq.w	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d07a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b25      	ldr	r3, [pc, #148]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d049      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fd ffc5 	bl	8000ce0 <HAL_GetTick>
 8002d56:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd ffc1 	bl	8000ce0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e111      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d70:	2302      	movs	r3, #2
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	61fb      	str	r3, [r7, #28]
  return result;
 8002d88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d9a:	4b01      	ldr	r3, [pc, #4]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
 8002da8:	10908100 	.word	0x10908100
 8002dac:	2302      	movs	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	4b78      	ldr	r3, [pc, #480]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	613a      	str	r2, [r7, #16]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0b9      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	496a      	ldr	r1, [pc, #424]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b66      	ldr	r3, [pc, #408]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a65      	ldr	r2, [pc, #404]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e18:	4b60      	ldr	r3, [pc, #384]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	495d      	ldr	r1, [pc, #372]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e36:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4956      	ldr	r1, [pc, #344]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e54:	4b51      	ldr	r3, [pc, #324]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	494e      	ldr	r1, [pc, #312]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e72:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f023 0210 	bic.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4947      	ldr	r1, [pc, #284]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e90:	4b42      	ldr	r3, [pc, #264]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	493f      	ldr	r1, [pc, #252]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f023 0220 	bic.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4938      	ldr	r1, [pc, #224]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ecc:	4b33      	ldr	r3, [pc, #204]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	4930      	ldr	r1, [pc, #192]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eea:	4b2c      	ldr	r3, [pc, #176]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	4929      	ldr	r1, [pc, #164]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f08:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	4921      	ldr	r1, [pc, #132]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f26:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	491a      	ldr	r1, [pc, #104]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f44:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	4912      	ldr	r1, [pc, #72]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	490b      	ldr	r1, [pc, #44]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	4903      	ldr	r1, [pc, #12]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3748      	adds	r7, #72	@ 0x48
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e09d      	b.n	80030ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc2:	d009      	beq.n	8002fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fc8c 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800300e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003018:	d902      	bls.n	8003020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e002      	b.n	8003026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800302e:	d007      	beq.n	8003040 <HAL_SPI_Init+0xa0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	f003 0204 	and.w	r2, r3, #4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030bc:	ea42 0103 	orr.w	r1, r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e049      	b.n	800319c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f841 	bl	80031a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 f9d3 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04a      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a21      	ldr	r2, [pc, #132]	@ (8003274 <HAL_TIM_Base_Start_IT+0xbc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x6c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fa:	d013      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x6c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1d      	ldr	r2, [pc, #116]	@ (8003278 <HAL_TIM_Base_Start_IT+0xc0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x6c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_TIM_Base_Start_IT+0xc4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x6c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <HAL_TIM_Base_Start_IT+0xc8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x6c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <HAL_TIM_Base_Start_IT+0xcc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d115      	bne.n	8003250 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <HAL_TIM_Base_Start_IT+0xd0>)
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d015      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0xaa>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d011      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	e008      	b.n	8003262 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e000      	b.n	8003264 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40013400 	.word	0x40013400
 8003284:	40014000 	.word	0x40014000
 8003288:	00010007 	.word	0x00010007

0800328c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d020      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0202 	mvn.w	r2, #2
 80032c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8e4 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8d6 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8e7 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0204 	mvn.w	r2, #4
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8be 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8b0 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8c1 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0208 	mvn.w	r2, #8
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2204      	movs	r2, #4
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f898 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f88a 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f89b 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0210 	mvn.w	r2, #16
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2208      	movs	r2, #8
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f872 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f864 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f875 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0201 	mvn.w	r2, #1
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd f9d6 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f908 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f900 	bl	8003640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f834 	bl	80034cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0220 	mvn.w	r2, #32
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8c8 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3f      	ldr	r2, [pc, #252]	@ (8003600 <TIM_Base_SetConfig+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3e      	ldr	r2, [pc, #248]	@ (8003604 <TIM_Base_SetConfig+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3d      	ldr	r2, [pc, #244]	@ (8003608 <TIM_Base_SetConfig+0x128>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a33      	ldr	r2, [pc, #204]	@ (80035fc <TIM_Base_SetConfig+0x11c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a30      	ldr	r2, [pc, #192]	@ (8003600 <TIM_Base_SetConfig+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2f      	ldr	r2, [pc, #188]	@ (8003604 <TIM_Base_SetConfig+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2e      	ldr	r2, [pc, #184]	@ (8003608 <TIM_Base_SetConfig+0x128>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2d      	ldr	r2, [pc, #180]	@ (800360c <TIM_Base_SetConfig+0x12c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2c      	ldr	r2, [pc, #176]	@ (8003610 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2b      	ldr	r2, [pc, #172]	@ (8003614 <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <TIM_Base_SetConfig+0x11c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0xe8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a17      	ldr	r2, [pc, #92]	@ (8003608 <TIM_Base_SetConfig+0x128>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0xe8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a16      	ldr	r2, [pc, #88]	@ (800360c <TIM_Base_SetConfig+0x12c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0xe8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <TIM_Base_SetConfig+0x130>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0xe8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a14      	ldr	r2, [pc, #80]	@ (8003614 <TIM_Base_SetConfig+0x134>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]
  }
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e040      	b.n	80036e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd f98c 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	@ 0x24
 8003680:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fd02 	bl	80040a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb2b 	bl	8003cfc <UART_SetConfig>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e01b      	b.n	80036e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fd81 	bl	80041e8 <UART_CheckIdleState>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0ba      	sub	sp, #232	@ 0xe8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800371a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800371e:	4013      	ands	r3, r2
 8003720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d115      	bne.n	8003758 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00f      	beq.n	8003758 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 82ab 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      }
      return;
 8003756:	e2a5      	b.n	8003ca4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8117 	beq.w	8003990 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800376e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003772:	4b85      	ldr	r3, [pc, #532]	@ (8003988 <HAL_UART_IRQHandler+0x298>)
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 810a 	beq.w	8003990 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800377c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d011      	beq.n	80037ac <HAL_UART_IRQHandler+0xbc>
 8003788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <HAL_UART_IRQHandler+0xec>
 80037b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2202      	movs	r2, #2
 80037ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d011      	beq.n	800380c <HAL_UART_IRQHandler+0x11c>
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2204      	movs	r2, #4
 80037fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003828:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2208      	movs	r2, #8
 8003836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383e:	f043 0208 	orr.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003850:	2b00      	cmp	r3, #0
 8003852:	d012      	beq.n	800387a <HAL_UART_IRQHandler+0x18a>
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8211 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	2b40      	cmp	r3, #64	@ 0x40
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d04f      	beq.n	8003972 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fd9d 	bl	8004412 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d141      	bne.n	800396a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800391e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800392a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1d9      	bne.n	80038e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003936:	2b00      	cmp	r3, #0
 8003938:	d013      	beq.n	8003962 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	4a13      	ldr	r2, [pc, #76]	@ (800398c <HAL_UART_IRQHandler+0x29c>)
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd faf6 	bl	8000f38 <HAL_DMA_Abort_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800395c:	4610      	mov	r0, r2
 800395e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	e00f      	b.n	8003982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9b4 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e00b      	b.n	8003982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f9b0 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	e007      	b.n	8003982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9ac 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003980:	e192      	b.n	8003ca8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	bf00      	nop
    return;
 8003984:	e190      	b.n	8003ca8 <HAL_UART_IRQHandler+0x5b8>
 8003986:	bf00      	nop
 8003988:	04000120 	.word	0x04000120
 800398c:	080044db 	.word	0x080044db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 814b 	bne.w	8003c30 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8144 	beq.w	8003c30 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 813d 	beq.w	8003c30 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	f040 80b5 	bne.w	8003b38 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8164 	beq.w	8003cac <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ee:	429a      	cmp	r2, r3
 80039f0:	f080 815c 	bcs.w	8003cac <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a38:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1da      	bne.n	8003a0a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e1      	bne.n	8003a54 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3308      	adds	r3, #8
 8003a96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ab4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e3      	bne.n	8003a90 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003af8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003afa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e4      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd f9d3 	bl	8000ebc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8d7 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b36:	e0b9      	b.n	8003cac <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80ab 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a6 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b88:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e4      	bne.n	8003b64 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e3      	bne.n	8003b9a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0310 	bic.w	r3, r3, #16
 8003bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	617b      	str	r3, [r7, #20]
   return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e4      	bne.n	8003be6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f85b 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c2e:	e03f      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <HAL_UART_IRQHandler+0x56a>
 8003c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fc81 	bl	800455a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c58:	e02d      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01c      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    }
    return;
 8003c82:	e017      	b.n	8003cb4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fc32 	bl	8004506 <UART_EndTransmit_IT>
    return;
 8003ca2:	e008      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ca4:	bf00      	nop
 8003ca6:	e006      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ca8:	bf00      	nop
 8003caa:	e004      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cac:	bf00      	nop
 8003cae:	e002      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003cb4:	bf00      	nop
  }

}
 8003cb6:	37e8      	adds	r7, #232	@ 0xe8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003d2a:	f023 030c 	bic.w	r3, r3, #12
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4aa7      	ldr	r2, [pc, #668]	@ (8004014 <UART_SetConfig+0x318>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d120      	bne.n	8003dbe <UART_SetConfig+0xc2>
 8003d7c:	4ba6      	ldr	r3, [pc, #664]	@ (8004018 <UART_SetConfig+0x31c>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d817      	bhi.n	8003db8 <UART_SetConfig+0xbc>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <UART_SetConfig+0x94>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003dad 	.word	0x08003dad
 8003d98:	08003db3 	.word	0x08003db3
 8003d9c:	08003da7 	.word	0x08003da7
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e0b5      	b.n	8003f12 <UART_SetConfig+0x216>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e0b2      	b.n	8003f12 <UART_SetConfig+0x216>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0af      	b.n	8003f12 <UART_SetConfig+0x216>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e0ac      	b.n	8003f12 <UART_SetConfig+0x216>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0a9      	b.n	8003f12 <UART_SetConfig+0x216>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a96      	ldr	r2, [pc, #600]	@ (800401c <UART_SetConfig+0x320>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d124      	bne.n	8003e12 <UART_SetConfig+0x116>
 8003dc8:	4b93      	ldr	r3, [pc, #588]	@ (8004018 <UART_SetConfig+0x31c>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dd4:	d011      	beq.n	8003dfa <UART_SetConfig+0xfe>
 8003dd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dda:	d817      	bhi.n	8003e0c <UART_SetConfig+0x110>
 8003ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003de0:	d011      	beq.n	8003e06 <UART_SetConfig+0x10a>
 8003de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003de6:	d811      	bhi.n	8003e0c <UART_SetConfig+0x110>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <UART_SetConfig+0xf8>
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df0:	d006      	beq.n	8003e00 <UART_SetConfig+0x104>
 8003df2:	e00b      	b.n	8003e0c <UART_SetConfig+0x110>
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e08b      	b.n	8003f12 <UART_SetConfig+0x216>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e088      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e00:	2304      	movs	r3, #4
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e085      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e06:	2308      	movs	r3, #8
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e082      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e07f      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a82      	ldr	r2, [pc, #520]	@ (8004020 <UART_SetConfig+0x324>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d124      	bne.n	8003e66 <UART_SetConfig+0x16a>
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004018 <UART_SetConfig+0x31c>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e28:	d011      	beq.n	8003e4e <UART_SetConfig+0x152>
 8003e2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e2e:	d817      	bhi.n	8003e60 <UART_SetConfig+0x164>
 8003e30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e34:	d011      	beq.n	8003e5a <UART_SetConfig+0x15e>
 8003e36:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e3a:	d811      	bhi.n	8003e60 <UART_SetConfig+0x164>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <UART_SetConfig+0x14c>
 8003e40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e44:	d006      	beq.n	8003e54 <UART_SetConfig+0x158>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x164>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e061      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e05e      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e05b      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e058      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e055      	b.n	8003f12 <UART_SetConfig+0x216>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8004024 <UART_SetConfig+0x328>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d124      	bne.n	8003eba <UART_SetConfig+0x1be>
 8003e70:	4b69      	ldr	r3, [pc, #420]	@ (8004018 <UART_SetConfig+0x31c>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e7c:	d011      	beq.n	8003ea2 <UART_SetConfig+0x1a6>
 8003e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e82:	d817      	bhi.n	8003eb4 <UART_SetConfig+0x1b8>
 8003e84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e88:	d011      	beq.n	8003eae <UART_SetConfig+0x1b2>
 8003e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e8e:	d811      	bhi.n	8003eb4 <UART_SetConfig+0x1b8>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x1a0>
 8003e94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e98:	d006      	beq.n	8003ea8 <UART_SetConfig+0x1ac>
 8003e9a:	e00b      	b.n	8003eb4 <UART_SetConfig+0x1b8>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e037      	b.n	8003f12 <UART_SetConfig+0x216>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e034      	b.n	8003f12 <UART_SetConfig+0x216>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e031      	b.n	8003f12 <UART_SetConfig+0x216>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e02e      	b.n	8003f12 <UART_SetConfig+0x216>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e02b      	b.n	8003f12 <UART_SetConfig+0x216>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8004028 <UART_SetConfig+0x32c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d124      	bne.n	8003f0e <UART_SetConfig+0x212>
 8003ec4:	4b54      	ldr	r3, [pc, #336]	@ (8004018 <UART_SetConfig+0x31c>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ecc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ed0:	d011      	beq.n	8003ef6 <UART_SetConfig+0x1fa>
 8003ed2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ed6:	d817      	bhi.n	8003f08 <UART_SetConfig+0x20c>
 8003ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003edc:	d011      	beq.n	8003f02 <UART_SetConfig+0x206>
 8003ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ee2:	d811      	bhi.n	8003f08 <UART_SetConfig+0x20c>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <UART_SetConfig+0x1f4>
 8003ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eec:	d006      	beq.n	8003efc <UART_SetConfig+0x200>
 8003eee:	e00b      	b.n	8003f08 <UART_SetConfig+0x20c>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e00d      	b.n	8003f12 <UART_SetConfig+0x216>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e00a      	b.n	8003f12 <UART_SetConfig+0x216>
 8003efc:	2304      	movs	r3, #4
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e007      	b.n	8003f12 <UART_SetConfig+0x216>
 8003f02:	2308      	movs	r3, #8
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e004      	b.n	8003f12 <UART_SetConfig+0x216>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e001      	b.n	8003f12 <UART_SetConfig+0x216>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1a:	d15b      	bne.n	8003fd4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d827      	bhi.n	8003f72 <UART_SetConfig+0x276>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <UART_SetConfig+0x22c>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f73 	.word	0x08003f73
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe fde8 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003f50:	61b8      	str	r0, [r7, #24]
        break;
 8003f52:	e013      	b.n	8003f7c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7fe fe06 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8003f58:	61b8      	str	r0, [r7, #24]
        break;
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b33      	ldr	r3, [pc, #204]	@ (800402c <UART_SetConfig+0x330>)
 8003f5e:	61bb      	str	r3, [r7, #24]
        break;
 8003f60:	e00c      	b.n	8003f7c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe fd7d 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8003f66:	61b8      	str	r0, [r7, #24]
        break;
 8003f68:	e008      	b.n	8003f7c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e004      	b.n	8003f7c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8082 	beq.w	8004088 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	005a      	lsls	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	d916      	bls.n	8003fce <UART_SetConfig+0x2d2>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa6:	d212      	bcs.n	8003fce <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	89fb      	ldrh	r3, [r7, #14]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	89fa      	ldrh	r2, [r7, #14]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e05c      	b.n	8004088 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77bb      	strb	r3, [r7, #30]
 8003fd2:	e059      	b.n	8004088 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d835      	bhi.n	8004046 <UART_SetConfig+0x34a>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <UART_SetConfig+0x2e4>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004031 	.word	0x08004031
 8003fec:	08004047 	.word	0x08004047
 8003ff0:	08004037 	.word	0x08004037
 8003ff4:	08004047 	.word	0x08004047
 8003ff8:	08004047 	.word	0x08004047
 8003ffc:	08004047 	.word	0x08004047
 8004000:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fd8c 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8004008:	61b8      	str	r0, [r7, #24]
        break;
 800400a:	e021      	b.n	8004050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fdaa 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8004010:	61b8      	str	r0, [r7, #24]
        break;
 8004012:	e01d      	b.n	8004050 <UART_SetConfig+0x354>
 8004014:	40013800 	.word	0x40013800
 8004018:	40021000 	.word	0x40021000
 800401c:	40004400 	.word	0x40004400
 8004020:	40004800 	.word	0x40004800
 8004024:	40004c00 	.word	0x40004c00
 8004028:	40005000 	.word	0x40005000
 800402c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <UART_SetConfig+0x3a4>)
 8004032:	61bb      	str	r3, [r7, #24]
        break;
 8004034:	e00c      	b.n	8004050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7fe fd13 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 800403a:	61b8      	str	r0, [r7, #24]
        break;
 800403c:	e008      	b.n	8004050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e004      	b.n	8004050 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	77bb      	strb	r3, [r7, #30]
        break;
 800404e:	bf00      	nop
    }

    if (pclk != 0U)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085a      	lsrs	r2, r3, #1
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d909      	bls.n	8004084 <UART_SetConfig+0x388>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004076:	d205      	bcs.n	8004084 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e001      	b.n	8004088 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004094:	7fbb      	ldrb	r3, [r7, #30]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	007a1200 	.word	0x007a1200

080040a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a2:	d10a      	bne.n	80041ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b098      	sub	sp, #96	@ 0x60
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f8:	f7fc fd72 	bl	8000ce0 <HAL_GetTick>
 80041fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d12e      	bne.n	800426a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f88c 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d021      	beq.n	800426a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423a:	653b      	str	r3, [r7, #80]	@ 0x50
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
 8004246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800424a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e062      	b.n	8004330 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d149      	bne.n	800430c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004280:	2200      	movs	r2, #0
 8004282:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f856 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03c      	beq.n	800430c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	623b      	str	r3, [r7, #32]
   return(result);
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	617b      	str	r3, [r7, #20]
   return(result);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e011      	b.n	8004330 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3758      	adds	r7, #88	@ 0x58
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e04f      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d04b      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fc fcc5 	bl	8000ce0 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e04e      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d037      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d034      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d031      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d110      	bne.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2208      	movs	r2, #8
 800439a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f838 	bl	8004412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2208      	movs	r2, #8
 80043a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e029      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c4:	d111      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f81e 	bl	8004412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	429a      	cmp	r2, r3
 8004406:	d0a0      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b095      	sub	sp, #84	@ 0x54
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004438:	643b      	str	r3, [r7, #64]	@ 0x40
 800443a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800443e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e6      	bne.n	800441a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3308      	adds	r3, #8
 8004452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	61fb      	str	r3, [r7, #28]
   return(result);
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e5      	bne.n	800444c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004484:	2b01      	cmp	r3, #1
 8004486:	d118      	bne.n	80044ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	60bb      	str	r3, [r7, #8]
   return(result);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0310 	bic.w	r3, r3, #16
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	613b      	str	r3, [r7, #16]
   return(result);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e6      	bne.n	8004488 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044ce:	bf00      	nop
 80044d0:	3754      	adds	r7, #84	@ 0x54
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fbe9 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	60bb      	str	r3, [r7, #8]
   return(result);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6979      	ldr	r1, [r7, #20]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	613b      	str	r3, [r7, #16]
   return(result);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fbb5 	bl	8003cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004576:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800457a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	b29b      	uxth	r3, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	b29b      	uxth	r3, r3
 800458c:	4013      	ands	r3, r2
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e6:	f3ef 8305 	mrs	r3, IPSR
 80045ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	607b      	str	r3, [r7, #4]
  return(result);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <osKernelInitialize+0x32>
 80045fe:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <osKernelInitialize+0x64>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d109      	bne.n	800461a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004606:	f3ef 8311 	mrs	r3, BASEPRI
 800460a:	603b      	str	r3, [r7, #0]
  return(result);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004612:	f06f 0305 	mvn.w	r3, #5
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e00c      	b.n	8004634 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800461a:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <osKernelInitialize+0x64>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <osKernelInitialize+0x64>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e002      	b.n	8004634 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004634:	68fb      	ldr	r3, [r7, #12]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000548 	.word	0x20000548

08004648 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	60bb      	str	r3, [r7, #8]
  return(result);
 8004654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465a:	f3ef 8310 	mrs	r3, PRIMASK
 800465e:	607b      	str	r3, [r7, #4]
  return(result);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <osKernelStart+0x32>
 8004666:	4b11      	ldr	r3, [pc, #68]	@ (80046ac <osKernelStart+0x64>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d109      	bne.n	8004682 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800466e:	f3ef 8311 	mrs	r3, BASEPRI
 8004672:	603b      	str	r3, [r7, #0]
  return(result);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <osKernelStart+0x3a>
    stat = osErrorISR;
 800467a:	f06f 0305 	mvn.w	r3, #5
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e00e      	b.n	80046a0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <osKernelStart+0x64>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <osKernelStart+0x64>)
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004690:	f001 fe76 	bl	8006380 <vTaskStartScheduler>
      stat = osOK;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e002      	b.n	80046a0 <osKernelStart+0x58>
    } else {
      stat = osError;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000548 	.word	0x20000548

080046b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b092      	sub	sp, #72	@ 0x48
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c0:	f3ef 8305 	mrs	r3, IPSR
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 8094 	bne.w	80047f6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	623b      	str	r3, [r7, #32]
  return(result);
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 808d 	bne.w	80047f6 <osThreadNew+0x146>
 80046dc:	4b48      	ldr	r3, [pc, #288]	@ (8004800 <osThreadNew+0x150>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d106      	bne.n	80046f2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046e4:	f3ef 8311 	mrs	r3, BASEPRI
 80046e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 8082 	bne.w	80047f6 <osThreadNew+0x146>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d07e      	beq.n	80047f6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046fc:	2318      	movs	r3, #24
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004700:	2300      	movs	r3, #0
 8004702:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004704:	f107 031b 	add.w	r3, r7, #27
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d045      	beq.n	80047a2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <osThreadNew+0x74>
        name = attr->name;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <osThreadNew+0x9a>
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	2b38      	cmp	r3, #56	@ 0x38
 800473c:	d805      	bhi.n	800474a <osThreadNew+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <osThreadNew+0x9e>
        return (NULL);
 800474a:	2300      	movs	r3, #0
 800474c:	e054      	b.n	80047f8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <osThreadNew+0xd4>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2ba7      	cmp	r3, #167	@ 0xa7
 800476c:	d90a      	bls.n	8004784 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0xd4>
        mem = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	e010      	b.n	80047a6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <osThreadNew+0xf6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <osThreadNew+0xf6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <osThreadNew+0xf6>
          mem = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a0:	e001      	b.n	80047a6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d110      	bne.n	80047ce <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b4:	9202      	str	r2, [sp, #8]
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f001 fbf2 	bl	8005fac <xTaskCreateStatic>
 80047c8:	4603      	mov	r3, r0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e013      	b.n	80047f6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 fc3f 	bl	800606a <xTaskCreate>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <osThreadNew+0x146>
          hTask = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047f6:	697b      	ldr	r3, [r7, #20]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3738      	adds	r7, #56	@ 0x38
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000548 	.word	0x20000548

08004804 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	@ 0x28
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <osThreadFlagsSet+0x1a>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da03      	bge.n	8004826 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800481e:	f06f 0303 	mvn.w	r3, #3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e045      	b.n	80048b2 <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482c:	f3ef 8305 	mrs	r3, IPSR
 8004830:	61bb      	str	r3, [r7, #24]
  return(result);
 8004832:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004838:	f3ef 8310 	mrs	r3, PRIMASK
 800483c:	617b      	str	r3, [r7, #20]
  return(result);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <osThreadFlagsSet+0x54>
 8004844:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <osThreadFlagsSet+0xb8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d125      	bne.n	8004898 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800484c:	f3ef 8311 	mrs	r3, BASEPRI
 8004850:	613b      	str	r3, [r7, #16]
  return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01f      	beq.n	8004898 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2300      	movs	r3, #0
 8004864:	2201      	movs	r2, #1
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	69f8      	ldr	r0, [r7, #28]
 800486a:	f002 fc4f 	bl	800710c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800486e:	f107 030c 	add.w	r3, r7, #12
 8004872:	2200      	movs	r2, #0
 8004874:	9200      	str	r2, [sp, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	69f8      	ldr	r0, [r7, #28]
 800487c:	f002 fc46 	bl	800710c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d015      	beq.n	80048b2 <osThreadFlagsSet+0xae>
 8004886:	4b0e      	ldr	r3, [pc, #56]	@ (80048c0 <osThreadFlagsSet+0xbc>)
 8004888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	e00c      	b.n	80048b2 <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004898:	2300      	movs	r3, #0
 800489a:	2201      	movs	r2, #1
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	69f8      	ldr	r0, [r7, #28]
 80048a0:	f002 fb86 	bl	8006fb0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	2200      	movs	r2, #0
 80048aa:	2100      	movs	r1, #0
 80048ac:	69f8      	ldr	r0, [r7, #28]
 80048ae:	f002 fb7f 	bl	8006fb0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000548 	.word	0x20000548
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048cc:	f3ef 8305 	mrs	r3, IPSR
 80048d0:	613b      	str	r3, [r7, #16]
  return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d8:	f3ef 8310 	mrs	r3, PRIMASK
 80048dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <osDelay+0x34>
 80048e4:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <osDelay+0x58>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d109      	bne.n	8004900 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ec:	f3ef 8311 	mrs	r3, BASEPRI
 80048f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <osDelay+0x3c>
    stat = osErrorISR;
 80048f8:	f06f 0305 	mvn.w	r3, #5
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e007      	b.n	8004910 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <osDelay+0x4c>
      vTaskDelay(ticks);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fd02 	bl	8006314 <vTaskDelay>
    }
  }

  return (stat);
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000548 	.word	0x20000548

08004920 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492c:	f3ef 8305 	mrs	r3, IPSR
 8004930:	617b      	str	r3, [r7, #20]
  return(result);
 8004932:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13d      	bne.n	80049b4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004938:	f3ef 8310 	mrs	r3, PRIMASK
 800493c:	613b      	str	r3, [r7, #16]
  return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d137      	bne.n	80049b4 <osEventFlagsNew+0x94>
 8004944:	4b1e      	ldr	r3, [pc, #120]	@ (80049c0 <osEventFlagsNew+0xa0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d105      	bne.n	8004958 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800494c:	f3ef 8311 	mrs	r3, BASEPRI
 8004950:	60fb      	str	r3, [r7, #12]
  return(result);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d12d      	bne.n	80049b4 <osEventFlagsNew+0x94>
    mem = -1;
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
 800495c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d015      	beq.n	8004990 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <osEventFlagsNew+0x5a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b1f      	cmp	r3, #31
 8004972:	d902      	bls.n	800497a <osEventFlagsNew+0x5a>
        mem = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e00c      	b.n	8004994 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <osEventFlagsNew+0x74>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <osEventFlagsNew+0x74>
          mem = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e001      	b.n	8004994 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d106      	bne.n	80049a8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fa28 	bl	8004df4 <xEventGroupCreateStatic>
 80049a4:	61f8      	str	r0, [r7, #28]
 80049a6:	e005      	b.n	80049b4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80049ae:	f000 fa5a 	bl	8004e66 <xEventGroupCreate>
 80049b2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80049b4:	69fb      	ldr	r3, [r7, #28]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000548 	.word	0x20000548

080049c4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	@ 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d0:	f3ef 8305 	mrs	r3, IPSR
 80049d4:	613b      	str	r3, [r7, #16]
  return(result);
 80049d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f040 8085 	bne.w	8004ae8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d17e      	bne.n	8004ae8 <osMutexNew+0x124>
 80049ea:	4b42      	ldr	r3, [pc, #264]	@ (8004af4 <osMutexNew+0x130>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d105      	bne.n	80049fe <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f2:	f3ef 8311 	mrs	r3, BASEPRI
 80049f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d174      	bne.n	8004ae8 <osMutexNew+0x124>
    if (attr != NULL) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <osMutexNew+0x48>
      type = attr->attr_bits;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e001      	b.n	8004a10 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <osMutexNew+0x5c>
      rmtx = 1U;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e001      	b.n	8004a24 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d15c      	bne.n	8004ae8 <osMutexNew+0x124>
      mem = -1;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d015      	beq.n	8004a66 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <osMutexNew+0x8c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a48:	d902      	bls.n	8004a50 <osMutexNew+0x8c>
          mem = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e00c      	b.n	8004a6a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <osMutexNew+0xa6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <osMutexNew+0xa6>
            mem = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e001      	b.n	8004a6a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d112      	bne.n	8004a96 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	2004      	movs	r0, #4
 8004a7e:	f000 fc3b 	bl	80052f8 <xQueueCreateMutexStatic>
 8004a82:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a84:	e016      	b.n	8004ab4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f000 fc33 	bl	80052f8 <xQueueCreateMutexStatic>
 8004a92:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a94:	e00e      	b.n	8004ab4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004aa2:	2004      	movs	r0, #4
 8004aa4:	f000 fc10 	bl	80052c8 <xQueueCreateMutex>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004aaa:	e003      	b.n	8004ab4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004aac:	2001      	movs	r0, #1
 8004aae:	f000 fc0b 	bl	80052c8 <xQueueCreateMutex>
 8004ab2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <osMutexNew+0x110>
        if (attr != NULL) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <osMutexNew+0x104>
          name = attr->name;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e001      	b.n	8004acc <osMutexNew+0x108>
        } else {
          name = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ad0:	f001 f9e4 	bl	8005e9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <osMutexNew+0x124>
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3728      	adds	r7, #40	@ 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000548 	.word	0x20000548

08004af8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b16:	f3ef 8305 	mrs	r3, IPSR
 8004b1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b22:	f3ef 8310 	mrs	r3, PRIMASK
 8004b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <osMutexAcquire+0x4a>
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <osMutexAcquire+0xb8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d109      	bne.n	8004b4a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b36:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004b42:	f06f 0305 	mvn.w	r3, #5
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e02c      	b.n	8004ba4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004b50:	f06f 0303 	mvn.w	r3, #3
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e025      	b.n	8004ba4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	69b8      	ldr	r0, [r7, #24]
 8004b62:	f000 fc19 	bl	8005398 <xQueueTakeMutexRecursive>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d01b      	beq.n	8004ba4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004b72:	f06f 0301 	mvn.w	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e014      	b.n	8004ba4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b7a:	f06f 0302 	mvn.w	r3, #2
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	e010      	b.n	8004ba4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	69b8      	ldr	r0, [r7, #24]
 8004b86:	f000 ff2d 	bl	80059e4 <xQueueSemaphoreTake>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d009      	beq.n	8004ba4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004b96:	f06f 0301 	mvn.w	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e002      	b.n	8004ba4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b9e:	f06f 0302 	mvn.w	r3, #2
 8004ba2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000548 	.word	0x20000548

08004bb4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd0:	f3ef 8305 	mrs	r3, IPSR
 8004bd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004bd6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <osMutexRelease+0x48>
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <osMutexRelease+0x9c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d109      	bne.n	8004c04 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004bfc:	f06f 0305 	mvn.w	r3, #5
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e01f      	b.n	8004c44 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004c0a:	f06f 0303 	mvn.w	r3, #3
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e018      	b.n	8004c44 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004c18:	69b8      	ldr	r0, [r7, #24]
 8004c1a:	f000 fb88 	bl	800532e <xQueueGiveMutexRecursive>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d00f      	beq.n	8004c44 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c24:	f06f 0302 	mvn.w	r3, #2
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e00b      	b.n	8004c44 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2100      	movs	r1, #0
 8004c32:	69b8      	ldr	r0, [r7, #24]
 8004c34:	f000 fc56 	bl	80054e4 <xQueueGenericSend>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d002      	beq.n	8004c44 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c3e:	f06f 0302 	mvn.w	r3, #2
 8004c42:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004c44:	69fb      	ldr	r3, [r7, #28]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000548 	.word	0x20000548

08004c54 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	@ 0x30
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c64:	f3ef 8305 	mrs	r3, IPSR
 8004c68:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c6a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8086 	bne.w	8004d7e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	617b      	str	r3, [r7, #20]
  return(result);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d17f      	bne.n	8004d7e <osSemaphoreNew+0x12a>
 8004c7e:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <osSemaphoreNew+0x134>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d105      	bne.n	8004c92 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c86:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d175      	bne.n	8004d7e <osSemaphoreNew+0x12a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d072      	beq.n	8004d7e <osSemaphoreNew+0x12a>
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d86e      	bhi.n	8004d7e <osSemaphoreNew+0x12a>
    mem = -1;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <osSemaphoreNew+0x6e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cba:	d902      	bls.n	8004cc2 <osSemaphoreNew+0x6e>
        mem = 1;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	e00c      	b.n	8004cdc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <osSemaphoreNew+0x88>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <osSemaphoreNew+0x88>
          mem = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	623b      	str	r3, [r7, #32]
 8004cd6:	e001      	b.n	8004cdc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d04c      	beq.n	8004d7e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d128      	bne.n	8004d3c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10a      	bne.n	8004d06 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	9200      	str	r2, [sp, #0]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f000 f9eb 	bl	80050d8 <xQueueGenericCreateStatic>
 8004d02:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d04:	e005      	b.n	8004d12 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004d06:	2203      	movs	r2, #3
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	f000 fa60 	bl	80051d0 <xQueueGenericCreate>
 8004d10:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <osSemaphoreNew+0x10a>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01f      	beq.n	8004d5e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2200      	movs	r2, #0
 8004d22:	2100      	movs	r1, #0
 8004d24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d26:	f000 fbdd 	bl	80054e4 <xQueueGenericSend>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d016      	beq.n	8004d5e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d32:	f000 ff67 	bl	8005c04 <vQueueDelete>
            hSemaphore = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3a:	e010      	b.n	8004d5e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d108      	bne.n	8004d54 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb5b 	bl	8005406 <xQueueCreateCountingSemaphoreStatic>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d52:	e004      	b.n	8004d5e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fb8e 	bl	8005478 <xQueueCreateCountingSemaphore>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e001      	b.n	8004d76 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d7a:	f001 f88f 	bl	8005e9c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3728      	adds	r7, #40	@ 0x28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000548 	.word	0x20000548

08004d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a06      	ldr	r2, [pc, #24]	@ (8004dbc <vApplicationGetIdleTaskMemory+0x30>)
 8004da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2280      	movs	r2, #128	@ 0x80
 8004da8:	601a      	str	r2, [r3, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	2000054c 	.word	0x2000054c
 8004dbc:	200005f4 	.word	0x200005f4

08004dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <vApplicationGetTimerTaskMemory+0x2c>)
 8004dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a06      	ldr	r2, [pc, #24]	@ (8004df0 <vApplicationGetTimerTaskMemory+0x30>)
 8004dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	200007f4 	.word	0x200007f4
 8004df0:	2000089c 	.word	0x2000089c

08004df4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d00b      	beq.n	8004e3c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60fb      	str	r3, [r7, #12]
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	e7fd      	b.n	8004e38 <xEventGroupCreateStatic+0x44>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f822 	bl	8004e9a <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004e5c:	697b      	ldr	r3, [r7, #20]
	}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004e6c:	2020      	movs	r0, #32
 8004e6e:	f002 ffe5 	bl	8007e3c <pvPortMalloc>
 8004e72:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f808 	bl	8004e9a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004e90:	687b      	ldr	r3, [r7, #4]
	}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f103 0208 	add.w	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 0208 	add.w	r2, r3, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f103 0208 	add.w	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d103      	bne.n	8004f5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e00c      	b.n	8004f76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e002      	b.n	8004f6a <vListInsert+0x2e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d2f6      	bcs.n	8004f64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6892      	ldr	r2, [r2, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d103      	bne.n	8004fe2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xQueueGenericReset+0x2c>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60bb      	str	r3, [r7, #8]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005030:	f002 fde2 	bl	8007bf8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	3b01      	subs	r3, #1
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	22ff      	movs	r2, #255	@ 0xff
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	22ff      	movs	r2, #255	@ 0xff
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d114      	bne.n	80050b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3310      	adds	r3, #16
 8005092:	4618      	mov	r0, r3
 8005094:	f001 fc18 	bl	80068c8 <xTaskRemoveFromEventList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d012      	beq.n	80050c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <xQueueGenericReset+0xd0>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	e009      	b.n	80050c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3310      	adds	r3, #16
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fef0 	bl	8004e9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3324      	adds	r3, #36	@ 0x24
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff feeb 	bl	8004e9a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050c4:	f002 fdca 	bl	8007c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08e      	sub	sp, #56	@ 0x38
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <xQueueGenericCreateStatic+0x56>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <xQueueGenericCreateStatic+0x5a>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <xQueueGenericCreateStatic+0x5c>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	623b      	str	r3, [r7, #32]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <xQueueGenericCreateStatic+0x84>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <xQueueGenericCreateStatic+0x88>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <xQueueGenericCreateStatic+0x8a>
 8005160:	2300      	movs	r3, #0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	61fb      	str	r3, [r7, #28]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800517e:	2350      	movs	r3, #80	@ 0x50
 8005180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b50      	cmp	r3, #80	@ 0x50
 8005186:	d00b      	beq.n	80051a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	61bb      	str	r3, [r7, #24]
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051b2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f844 	bl	800524e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3730      	adds	r7, #48	@ 0x30
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueGenericCreate+0x2c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e004      	b.n	8005212 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3350      	adds	r3, #80	@ 0x50
 8005216:	4618      	mov	r0, r3
 8005218:	f002 fe10 	bl	8007e3c <pvPortMalloc>
 800521c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00f      	beq.n	8005244 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	3350      	adds	r3, #80	@ 0x50
 8005228:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005232:	79fa      	ldrb	r2, [r7, #7]
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f805 	bl	800524e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005244:	69bb      	ldr	r3, [r7, #24]
	}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e002      	b.n	8005270 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800527c:	2101      	movs	r1, #1
 800527e:	69b8      	ldr	r0, [r7, #24]
 8005280:	f7ff fec0 	bl	8005004 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00e      	beq.n	80052c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052b4:	2300      	movs	r3, #0
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f912 	bl	80054e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052d2:	2301      	movs	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	461a      	mov	r2, r3
 80052de:	6939      	ldr	r1, [r7, #16]
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7ff ff75 	bl	80051d0 <xQueueGenericCreate>
 80052e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ffd3 	bl	8005294 <prvInitialiseMutex>

		return pxNewQueue;
 80052ee:	68fb      	ldr	r3, [r7, #12]
	}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	4603      	mov	r3, r0
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff fede 	bl	80050d8 <xQueueGenericCreateStatic>
 800531c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ffb8 	bl	8005294 <prvInitialiseMutex>

		return pxNewQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
	}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800532e:	b590      	push	{r4, r7, lr}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685c      	ldr	r4, [r3, #4]
 800535c:	f001 fc80 	bl	8006c60 <xTaskGetCurrentTaskHandle>
 8005360:	4603      	mov	r3, r0
 8005362:	429c      	cmp	r4, r3
 8005364:	d111      	bne.n	800538a <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f000 f8b0 	bl	80054e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e001      	b.n	800538e <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800538e:	697b      	ldr	r3, [r7, #20]
	}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd90      	pop	{r4, r7, pc}

08005398 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	685c      	ldr	r4, [r3, #4]
 80053c8:	f001 fc4a 	bl	8006c60 <xTaskGetCurrentTaskHandle>
 80053cc:	4603      	mov	r3, r0
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d107      	bne.n	80053e2 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e00c      	b.n	80053fc <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6938      	ldr	r0, [r7, #16]
 80053e6:	f000 fafd 	bl	80059e4 <xQueueSemaphoreTake>
 80053ea:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80053fc:	697b      	ldr	r3, [r7, #20]
	}
 80053fe:	4618      	mov	r0, r3
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}

08005406 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005406:	b580      	push	{r7, lr}
 8005408:	b08a      	sub	sp, #40	@ 0x28
 800540a:	af02      	add	r7, sp, #8
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61bb      	str	r3, [r7, #24]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d90b      	bls.n	8005450 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	617b      	str	r3, [r7, #20]
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005450:	2302      	movs	r3, #2
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fe3c 	bl	80050d8 <xQueueGenericCreateStatic>
 8005460:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800546e:	69fb      	ldr	r3, [r7, #28]
	}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	613b      	str	r3, [r7, #16]
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d90b      	bls.n	80054c0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60fb      	str	r3, [r7, #12]
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054c0:	2202      	movs	r2, #2
 80054c2:	2100      	movs	r1, #0
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fe83 	bl	80051d0 <xQueueGenericCreate>
 80054ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054d8:	697b      	ldr	r3, [r7, #20]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	@ 0x38
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <xQueueGenericSend+0x34>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <xQueueGenericSend+0x42>
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <xQueueGenericSend+0x46>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSend+0x48>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <xQueueGenericSend+0x64>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d103      	bne.n	8005556 <xQueueGenericSend+0x72>
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <xQueueGenericSend+0x76>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueGenericSend+0x78>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xQueueGenericSend+0x94>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005578:	f001 fb82 	bl	8006c80 <xTaskGetSchedulerState>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <xQueueGenericSend+0xa4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <xQueueGenericSend+0xa8>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <xQueueGenericSend+0xaa>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <xQueueGenericSend+0xc6>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61fb      	str	r3, [r7, #28]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055aa:	f002 fb25 	bl	8007bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <xQueueGenericSend+0xdc>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d129      	bne.n	8005614 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055c6:	f000 fb59 	bl	8005c7c <prvCopyDataToQueue>
 80055ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	3324      	adds	r3, #36	@ 0x24
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f975 	bl	80068c8 <xTaskRemoveFromEventList>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d013      	beq.n	800560c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055e4:	4b3f      	ldr	r3, [pc, #252]	@ (80056e4 <xQueueGenericSend+0x200>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	e00a      	b.n	800560c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b39      	ldr	r3, [pc, #228]	@ (80056e4 <xQueueGenericSend+0x200>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800560c:	f002 fb26 	bl	8007c5c <vPortExitCritical>
				return pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	e063      	b.n	80056dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800561a:	f002 fb1f 	bl	8007c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800561e:	2300      	movs	r3, #0
 8005620:	e05c      	b.n	80056dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f9af 	bl	8006990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005636:	f002 fb11 	bl	8007c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800563a:	f000 ff11 	bl	8006460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800563e:	f002 fadb 	bl	8007bf8 <vPortEnterCritical>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005648:	b25b      	sxtb	r3, r3
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d103      	bne.n	8005658 <xQueueGenericSend+0x174>
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800565e:	b25b      	sxtb	r3, r3
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d103      	bne.n	800566e <xQueueGenericSend+0x18a>
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800566e:	f002 faf5 	bl	8007c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005672:	1d3a      	adds	r2, r7, #4
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f99e 	bl	80069bc <xTaskCheckForTimeOut>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d124      	bne.n	80056d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005686:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005688:	f000 fbf0 	bl	8005e6c <prvIsQueueFull>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	3310      	adds	r3, #16
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f001 f8c2 	bl	8006824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056a2:	f000 fb7b 	bl	8005d9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056a6:	f000 fee9 	bl	800647c <xTaskResumeAll>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f af7c 	bne.w	80055aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80056b2:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <xQueueGenericSend+0x200>)
 80056b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	e772      	b.n	80055aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056c6:	f000 fb69 	bl	8005d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056ca:	f000 fed7 	bl	800647c <xTaskResumeAll>
 80056ce:	e76c      	b.n	80055aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056d2:	f000 fb63 	bl	8005d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056d6:	f000 fed1 	bl	800647c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056da:	2300      	movs	r3, #0
		}
	}
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3738      	adds	r7, #56	@ 0x38
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08e      	sub	sp, #56	@ 0x38
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSendFromISR+0x3e>
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xQueueGenericSendFromISR+0x42>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xQueueGenericSendFromISR+0x44>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	623b      	str	r3, [r7, #32]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d103      	bne.n	8005756 <xQueueGenericSendFromISR+0x6e>
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <xQueueGenericSendFromISR+0x72>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSendFromISR+0x74>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61fb      	str	r3, [r7, #28]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005778:	f002 fb1e 	bl	8007db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800577c:	f3ef 8211 	mrs	r2, BASEPRI
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61ba      	str	r2, [r7, #24]
 8005792:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005794:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <xQueueGenericSendFromISR+0xc2>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d12c      	bne.n	8005804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ba:	f000 fa5f 	bl	8005c7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057be:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d112      	bne.n	80057ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	3324      	adds	r3, #36	@ 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 f877 	bl	80068c8 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00e      	beq.n	80057fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e007      	b.n	80057fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	3301      	adds	r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	b25a      	sxtb	r2, r3
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057fe:	2301      	movs	r3, #1
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005802:	e001      	b.n	8005808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005804:	2300      	movs	r3, #0
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005816:	4618      	mov	r0, r3
 8005818:	3738      	adds	r7, #56	@ 0x38
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <xQueueReceive+0x32>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	623b      	str	r3, [r7, #32]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <xQueueReceive+0x40>
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <xQueueReceive+0x44>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <xQueueReceive+0x46>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <xQueueReceive+0x62>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	61fb      	str	r3, [r7, #28]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005882:	f001 f9fd 	bl	8006c80 <xTaskGetSchedulerState>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <xQueueReceive+0x72>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <xQueueReceive+0x76>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <xQueueReceive+0x78>
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <xQueueReceive+0x94>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61bb      	str	r3, [r7, #24]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058b4:	f002 f9a0 	bl	8007bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01f      	beq.n	8005904 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c8:	f000 fa42 	bl	8005d50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	1e5a      	subs	r2, r3, #1
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	3310      	adds	r3, #16
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fff1 	bl	80068c8 <xTaskRemoveFromEventList>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058ec:	4b3c      	ldr	r3, [pc, #240]	@ (80059e0 <xQueueReceive+0x1c0>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058fc:	f002 f9ae 	bl	8007c5c <vPortExitCritical>
				return pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	e069      	b.n	80059d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590a:	f002 f9a7 	bl	8007c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800590e:	2300      	movs	r3, #0
 8005910:	e062      	b.n	80059d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005918:	f107 0310 	add.w	r3, r7, #16
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f837 	bl	8006990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005926:	f002 f999 	bl	8007c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592a:	f000 fd99 	bl	8006460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592e:	f002 f963 	bl	8007bf8 <vPortEnterCritical>
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <xQueueReceive+0x128>
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800594e:	b25b      	sxtb	r3, r3
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d103      	bne.n	800595e <xQueueReceive+0x13e>
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800595e:	f002 f97d 	bl	8007c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005962:	1d3a      	adds	r2, r7, #4
 8005964:	f107 0310 	add.w	r3, r7, #16
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f826 	bl	80069bc <xTaskCheckForTimeOut>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d123      	bne.n	80059be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005978:	f000 fa62 	bl	8005e40 <prvIsQueueEmpty>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d017      	beq.n	80059b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	3324      	adds	r3, #36	@ 0x24
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f000 ff4a 	bl	8006824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005992:	f000 fa03 	bl	8005d9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005996:	f000 fd71 	bl	800647c <xTaskResumeAll>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d189      	bne.n	80058b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80059a0:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <xQueueReceive+0x1c0>)
 80059a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	e780      	b.n	80058b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b4:	f000 f9f2 	bl	8005d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059b8:	f000 fd60 	bl	800647c <xTaskResumeAll>
 80059bc:	e77a      	b.n	80058b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f000 f9ec 	bl	8005d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c4:	f000 fd5a 	bl	800647c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ca:	f000 fa39 	bl	8005e40 <prvIsQueueEmpty>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f43f af6f 	beq.w	80058b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3730      	adds	r7, #48	@ 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	@ 0x38
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	623b      	str	r3, [r7, #32]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61fb      	str	r3, [r7, #28]
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a38:	f001 f922 	bl	8006c80 <xTaskGetSchedulerState>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <xQueueSemaphoreTake+0x64>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <xQueueSemaphoreTake+0x68>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <xQueueSemaphoreTake+0x6a>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61bb      	str	r3, [r7, #24]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6a:	f002 f8c5 	bl	8007bf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d024      	beq.n	8005ac4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005a8a:	f001 fa7d 	bl	8006f88 <pvTaskIncrementMutexHeldCount>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	3310      	adds	r3, #16
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ff11 	bl	80068c8 <xTaskRemoveFromEventList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aac:	4b54      	ldr	r3, [pc, #336]	@ (8005c00 <xQueueSemaphoreTake+0x21c>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005abc:	f002 f8ce 	bl	8007c5c <vPortExitCritical>
				return pdPASS;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e098      	b.n	8005bf6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d112      	bne.n	8005af0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	617b      	str	r3, [r7, #20]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ae8:	f002 f8b8 	bl	8007c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e082      	b.n	8005bf6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ff48 	bl	8006990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b04:	f002 f8aa 	bl	8007c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b08:	f000 fcaa 	bl	8006460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b0c:	f002 f874 	bl	8007bf8 <vPortEnterCritical>
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d103      	bne.n	8005b26 <xQueueSemaphoreTake+0x142>
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d103      	bne.n	8005b3c <xQueueSemaphoreTake+0x158>
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b3c:	f002 f88e 	bl	8007c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b40:	463a      	mov	r2, r7
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 ff37 	bl	80069bc <xTaskCheckForTimeOut>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d132      	bne.n	8005bba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b56:	f000 f973 	bl	8005e40 <prvIsQueueEmpty>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d026      	beq.n	8005bae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d109      	bne.n	8005b7c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005b68:	f002 f846 	bl	8007bf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 f8a3 	bl	8006cbc <xTaskPriorityInherit>
 8005b76:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b78:	f002 f870 	bl	8007c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	3324      	adds	r3, #36	@ 0x24
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fe4d 	bl	8006824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b8c:	f000 f906 	bl	8005d9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b90:	f000 fc74 	bl	800647c <xTaskResumeAll>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f47f af67 	bne.w	8005a6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005b9c:	4b18      	ldr	r3, [pc, #96]	@ (8005c00 <xQueueSemaphoreTake+0x21c>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	e75d      	b.n	8005a6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bb0:	f000 f8f4 	bl	8005d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb4:	f000 fc62 	bl	800647c <xTaskResumeAll>
 8005bb8:	e757      	b.n	8005a6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bbc:	f000 f8ee 	bl	8005d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bc0:	f000 fc5c 	bl	800647c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bc6:	f000 f93b 	bl	8005e40 <prvIsQueueEmpty>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f43f af4c 	beq.w	8005a6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005bd8:	f002 f80e 	bl	8007bf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bde:	f000 f835 	bl	8005c4c <prvGetDisinheritPriorityAfterTimeout>
 8005be2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 f944 	bl	8006e78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005bf0:	f002 f834 	bl	8007c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3738      	adds	r7, #56	@ 0x38
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <vQueueDelete+0x2a>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f95e 	bl	8005ef0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f002 f9c4 	bl	8007fcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e001      	b.n	8005c6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d14d      	bne.n	8005d3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f876 	bl	8006d98 <xTaskPriorityDisinherit>
 8005cac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]
 8005cb4:	e043      	b.n	8005d3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d119      	bne.n	8005cf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6898      	ldr	r0, [r3, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	f002 fb24 	bl	8008314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d32b      	bcc.n	8005d3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	e026      	b.n	8005d3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68d8      	ldr	r0, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	f002 fb0a 	bl	8008314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	425b      	negs	r3, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d207      	bcs.n	8005d2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d24:	425b      	negs	r3, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d105      	bne.n	8005d3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d46:	697b      	ldr	r3, [r7, #20]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d018      	beq.n	8005d94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	441a      	add	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d303      	bcc.n	8005d84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68d9      	ldr	r1, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6838      	ldr	r0, [r7, #0]
 8005d90:	f002 fac0 	bl	8008314 <memcpy>
	}
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005da4:	f001 ff28 	bl	8007bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db0:	e011      	b.n	8005dd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d012      	beq.n	8005de0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3324      	adds	r3, #36	@ 0x24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fd82 	bl	80068c8 <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dca:	f000 fe5b 	bl	8006a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dce9      	bgt.n	8005db2 <prvUnlockQueue+0x16>
 8005dde:	e000      	b.n	8005de2 <prvUnlockQueue+0x46>
					break;
 8005de0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	22ff      	movs	r2, #255	@ 0xff
 8005de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005dea:	f001 ff37 	bl	8007c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dee:	f001 ff03 	bl	8007bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005df8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dfa:	e011      	b.n	8005e20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d012      	beq.n	8005e2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3310      	adds	r3, #16
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fd5d 	bl	80068c8 <xTaskRemoveFromEventList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e14:	f000 fe36 	bl	8006a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dce9      	bgt.n	8005dfc <prvUnlockQueue+0x60>
 8005e28:	e000      	b.n	8005e2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	22ff      	movs	r2, #255	@ 0xff
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e34:	f001 ff12 	bl	8007c5c <vPortExitCritical>
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e48:	f001 fed6 	bl	8007bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	e001      	b.n	8005e5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e5e:	f001 fefd 	bl	8007c5c <vPortExitCritical>

	return xReturn;
 8005e62:	68fb      	ldr	r3, [r7, #12]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e74:	f001 fec0 	bl	8007bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d102      	bne.n	8005e8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e001      	b.n	8005e8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e8e:	f001 fee5 	bl	8007c5c <vPortExitCritical>

	return xReturn;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e014      	b.n	8005ed6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eac:	4a0f      	ldr	r2, [pc, #60]	@ (8005eec <vQueueAddToRegistry+0x50>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005eb8:	490c      	ldr	r1, [pc, #48]	@ (8005eec <vQueueAddToRegistry+0x50>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8005eec <vQueueAddToRegistry+0x50>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ece:	e006      	b.n	8005ede <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d9e7      	bls.n	8005eac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20000c9c 	.word	0x20000c9c

08005ef0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e016      	b.n	8005f2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005efe:	4a10      	ldr	r2, [pc, #64]	@ (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d10b      	bne.n	8005f26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2100      	movs	r1, #0
 8005f14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f18:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	605a      	str	r2, [r3, #4]
				break;
 8005f24:	e006      	b.n	8005f34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	d9e5      	bls.n	8005efe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000c9c 	.word	0x20000c9c

08005f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f54:	f001 fe50 	bl	8007bf8 <vPortEnterCritical>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d103      	bne.n	8005f6e <vQueueWaitForMessageRestricted+0x2a>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d103      	bne.n	8005f84 <vQueueWaitForMessageRestricted+0x40>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f84:	f001 fe6a 	bl	8007c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3324      	adds	r3, #36	@ 0x24
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fc69 	bl	8006870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f7ff fefc 	bl	8005d9c <prvUnlockQueue>
	}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	@ 0x38
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	623b      	str	r3, [r7, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	61fb      	str	r3, [r7, #28]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ff6:	23a8      	movs	r3, #168	@ 0xa8
 8005ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ffe:	d00b      	beq.n	8006018 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	61bb      	str	r3, [r7, #24]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01e      	beq.n	800605c <xTaskCreateStatic+0xb0>
 800601e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	2202      	movs	r2, #2
 8006032:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006036:	2300      	movs	r3, #0
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	9302      	str	r3, [sp, #8]
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f850 	bl	80060f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006056:	f000 f8ed 	bl	8006234 <prvAddNewTaskToReadyList>
 800605a:	e001      	b.n	8006060 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006060:	697b      	ldr	r3, [r7, #20]
	}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	@ 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800606a:	b580      	push	{r7, lr}
 800606c:	b08c      	sub	sp, #48	@ 0x30
 800606e:	af04      	add	r7, sp, #16
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fedc 	bl	8007e3c <pvPortMalloc>
 8006084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800608c:	20a8      	movs	r0, #168	@ 0xa8
 800608e:	f001 fed5 	bl	8007e3c <pvPortMalloc>
 8006092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
 80060a0:	e005      	b.n	80060ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060a2:	6978      	ldr	r0, [r7, #20]
 80060a4:	f001 ff92 	bl	8007fcc <vPortFree>
 80060a8:	e001      	b.n	80060ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	2300      	movs	r3, #0
 80060c0:	9303      	str	r3, [sp, #12]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	9302      	str	r3, [sp, #8]
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f80e 	bl	80060f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060d8:	69f8      	ldr	r0, [r7, #28]
 80060da:	f000 f8ab 	bl	8006234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060de:	2301      	movs	r3, #1
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e002      	b.n	80060ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060ea:	69bb      	ldr	r3, [r7, #24]
	}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	461a      	mov	r2, r3
 800610c:	21a5      	movs	r1, #165	@ 0xa5
 800610e:	f002 f875 	bl	80081fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800611c:	3b01      	subs	r3, #1
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	617b      	str	r3, [r7, #20]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e012      	b.n	800617a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	7819      	ldrb	r1, [r3, #0]
 800615c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	3334      	adds	r3, #52	@ 0x34
 8006164:	460a      	mov	r2, r1
 8006166:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b0f      	cmp	r3, #15
 800617e:	d9e9      	bls.n	8006154 <prvInitialiseNewTask+0x60>
 8006180:	e000      	b.n	8006184 <prvInitialiseNewTask+0x90>
		{
			break;
 8006182:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b37      	cmp	r3, #55	@ 0x37
 8006190:	d901      	bls.n	8006196 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006192:	2337      	movs	r3, #55	@ 0x37
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fe94 	bl	8004eda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fe8f 	bl	8004eda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3354      	adds	r3, #84	@ 0x54
 80061e6:	224c      	movs	r2, #76	@ 0x4c
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f002 f806 	bl	80081fc <memset>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006228 <prvInitialiseNewTask+0x134>)
 80061f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	4a0c      	ldr	r2, [pc, #48]	@ (800622c <prvInitialiseNewTask+0x138>)
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006230 <prvInitialiseNewTask+0x13c>)
 8006200:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	69b8      	ldr	r0, [r7, #24]
 8006208:	f001 fbc6 	bl	8007998 <pxPortInitialiseStack>
 800620c:	4602      	mov	r2, r0
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621e:	bf00      	nop
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20002328 	.word	0x20002328
 800622c:	20002390 	.word	0x20002390
 8006230:	200023f8 	.word	0x200023f8

08006234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800623c:	f001 fcdc 	bl	8007bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006240:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a2c      	ldr	r2, [pc, #176]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800624a:	4b2c      	ldr	r3, [pc, #176]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006252:	4a2a      	ldr	r2, [pc, #168]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006258:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d110      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006260:	f000 fc34 	bl	8006acc <prvInitialiseTaskLists>
 8006264:	e00d      	b.n	8006282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006266:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <prvAddNewTaskToReadyList+0xcc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626e:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	429a      	cmp	r2, r3
 800627a:	d802      	bhi.n	8006282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800627c:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 800628a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <prvAddNewTaskToReadyList+0xd4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d903      	bls.n	80062a8 <prvAddNewTaskToReadyList+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <prvAddNewTaskToReadyList+0xd4>)
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4a15      	ldr	r2, [pc, #84]	@ (800630c <prvAddNewTaskToReadyList+0xd8>)
 80062b6:	441a      	add	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	f7fe fe18 	bl	8004ef4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 fcca 	bl	8007c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <prvAddNewTaskToReadyList+0xcc>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00e      	beq.n	80062ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062d0:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d207      	bcs.n	80062ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <prvAddNewTaskToReadyList+0xdc>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200011b0 	.word	0x200011b0
 80062fc:	20000cdc 	.word	0x20000cdc
 8006300:	200011bc 	.word	0x200011bc
 8006304:	200011cc 	.word	0x200011cc
 8006308:	200011b8 	.word	0x200011b8
 800630c:	20000ce0 	.word	0x20000ce0
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006326:	4b14      	ldr	r3, [pc, #80]	@ (8006378 <vTaskDelay+0x64>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <vTaskDelay+0x32>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60bb      	str	r3, [r7, #8]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006346:	f000 f88b 	bl	8006460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800634a:	2100      	movs	r1, #0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 ffaf 	bl	80072b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006352:	f000 f893 	bl	800647c <xTaskResumeAll>
 8006356:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800635e:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vTaskDelay+0x68>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200011d8 	.word	0x200011d8
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	@ 0x28
 8006384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800638e:	463a      	mov	r2, r7
 8006390:	1d39      	adds	r1, r7, #4
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fcf8 	bl	8004d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	9202      	str	r2, [sp, #8]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	460a      	mov	r2, r1
 80063ae:	4924      	ldr	r1, [pc, #144]	@ (8006440 <vTaskStartScheduler+0xc0>)
 80063b0:	4824      	ldr	r0, [pc, #144]	@ (8006444 <vTaskStartScheduler+0xc4>)
 80063b2:	f7ff fdfb 	bl	8005fac <xTaskCreateStatic>
 80063b6:	4603      	mov	r3, r0
 80063b8:	4a23      	ldr	r2, [pc, #140]	@ (8006448 <vTaskStartScheduler+0xc8>)
 80063ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063bc:	4b22      	ldr	r3, [pc, #136]	@ (8006448 <vTaskStartScheduler+0xc8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e001      	b.n	80063ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d102      	bne.n	80063da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063d4:	f000 ffc0 	bl	8007358 <xTimerCreateTimerTask>
 80063d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11b      	bne.n	8006418 <vTaskStartScheduler+0x98>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063f4:	4b15      	ldr	r3, [pc, #84]	@ (800644c <vTaskStartScheduler+0xcc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3354      	adds	r3, #84	@ 0x54
 80063fa:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <vTaskStartScheduler+0xd0>)
 80063fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <vTaskStartScheduler+0xd4>)
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006406:	4b14      	ldr	r3, [pc, #80]	@ (8006458 <vTaskStartScheduler+0xd8>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800640c:	4b13      	ldr	r3, [pc, #76]	@ (800645c <vTaskStartScheduler+0xdc>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006412:	f001 fb4d 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006416:	e00f      	b.n	8006438 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d10b      	bne.n	8006438 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <vTaskStartScheduler+0xb4>
}
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	08008420 	.word	0x08008420
 8006444:	08006a9d 	.word	0x08006a9d
 8006448:	200011d4 	.word	0x200011d4
 800644c:	20000cdc 	.word	0x20000cdc
 8006450:	20000010 	.word	0x20000010
 8006454:	200011d0 	.word	0x200011d0
 8006458:	200011bc 	.word	0x200011bc
 800645c:	200011b4 	.word	0x200011b4

08006460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006464:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <vTaskSuspendAll+0x18>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a03      	ldr	r2, [pc, #12]	@ (8006478 <vTaskSuspendAll+0x18>)
 800646c:	6013      	str	r3, [r2, #0]
}
 800646e:	bf00      	nop
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	200011d8 	.word	0x200011d8

0800647c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800648a:	4b42      	ldr	r3, [pc, #264]	@ (8006594 <xTaskResumeAll+0x118>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <xTaskResumeAll+0x2e>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064aa:	f001 fba5 	bl	8007bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064ae:	4b39      	ldr	r3, [pc, #228]	@ (8006594 <xTaskResumeAll+0x118>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4a37      	ldr	r2, [pc, #220]	@ (8006594 <xTaskResumeAll+0x118>)
 80064b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064b8:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <xTaskResumeAll+0x118>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d162      	bne.n	8006586 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064c0:	4b35      	ldr	r3, [pc, #212]	@ (8006598 <xTaskResumeAll+0x11c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d05e      	beq.n	8006586 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c8:	e02f      	b.n	800652a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064ca:	4b34      	ldr	r3, [pc, #208]	@ (800659c <xTaskResumeAll+0x120>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3318      	adds	r3, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fd69 	bl	8004fae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3304      	adds	r3, #4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fd64 	bl	8004fae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ea:	4b2d      	ldr	r3, [pc, #180]	@ (80065a0 <xTaskResumeAll+0x124>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d903      	bls.n	80064fa <xTaskResumeAll+0x7e>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	4a2a      	ldr	r2, [pc, #168]	@ (80065a0 <xTaskResumeAll+0x124>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4a27      	ldr	r2, [pc, #156]	@ (80065a4 <xTaskResumeAll+0x128>)
 8006508:	441a      	add	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe fcef 	bl	8004ef4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4b23      	ldr	r3, [pc, #140]	@ (80065a8 <xTaskResumeAll+0x12c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006524:	4b21      	ldr	r3, [pc, #132]	@ (80065ac <xTaskResumeAll+0x130>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800652a:	4b1c      	ldr	r3, [pc, #112]	@ (800659c <xTaskResumeAll+0x120>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1cb      	bne.n	80064ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006538:	f000 fb6c 	bl	8006c14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800653c:	4b1c      	ldr	r3, [pc, #112]	@ (80065b0 <xTaskResumeAll+0x134>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006548:	f000 f846 	bl	80065d8 <xTaskIncrementTick>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006552:	4b16      	ldr	r3, [pc, #88]	@ (80065ac <xTaskResumeAll+0x130>)
 8006554:	2201      	movs	r2, #1
 8006556:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3b01      	subs	r3, #1
 800655c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f1      	bne.n	8006548 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <xTaskResumeAll+0x134>)
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800656a:	4b10      	ldr	r3, [pc, #64]	@ (80065ac <xTaskResumeAll+0x130>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006576:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <xTaskResumeAll+0x138>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006586:	f001 fb69 	bl	8007c5c <vPortExitCritical>

	return xAlreadyYielded;
 800658a:	68bb      	ldr	r3, [r7, #8]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	200011d8 	.word	0x200011d8
 8006598:	200011b0 	.word	0x200011b0
 800659c:	20001170 	.word	0x20001170
 80065a0:	200011b8 	.word	0x200011b8
 80065a4:	20000ce0 	.word	0x20000ce0
 80065a8:	20000cdc 	.word	0x20000cdc
 80065ac:	200011c4 	.word	0x200011c4
 80065b0:	200011c0 	.word	0x200011c0
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065be:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <xTaskGetTickCount+0x1c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065c4:	687b      	ldr	r3, [r7, #4]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	200011b4 	.word	0x200011b4

080065d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e2:	4b52      	ldr	r3, [pc, #328]	@ (800672c <xTaskIncrementTick+0x154>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f040 808f 	bne.w	800670a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065ec:	4b50      	ldr	r3, [pc, #320]	@ (8006730 <xTaskIncrementTick+0x158>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006730 <xTaskIncrementTick+0x158>)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d121      	bne.n	8006644 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006600:	4b4c      	ldr	r3, [pc, #304]	@ (8006734 <xTaskIncrementTick+0x15c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <xTaskIncrementTick+0x4a>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	603b      	str	r3, [r7, #0]
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	e7fd      	b.n	800661e <xTaskIncrementTick+0x46>
 8006622:	4b44      	ldr	r3, [pc, #272]	@ (8006734 <xTaskIncrementTick+0x15c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4b43      	ldr	r3, [pc, #268]	@ (8006738 <xTaskIncrementTick+0x160>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a41      	ldr	r2, [pc, #260]	@ (8006734 <xTaskIncrementTick+0x15c>)
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4a41      	ldr	r2, [pc, #260]	@ (8006738 <xTaskIncrementTick+0x160>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b41      	ldr	r3, [pc, #260]	@ (800673c <xTaskIncrementTick+0x164>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a3f      	ldr	r2, [pc, #252]	@ (800673c <xTaskIncrementTick+0x164>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	f000 fae8 	bl	8006c14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006644:	4b3e      	ldr	r3, [pc, #248]	@ (8006740 <xTaskIncrementTick+0x168>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	d34e      	bcc.n	80066ec <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800664e:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <xTaskIncrementTick+0x15c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <xTaskIncrementTick+0x84>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <xTaskIncrementTick+0x86>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006662:	4b37      	ldr	r3, [pc, #220]	@ (8006740 <xTaskIncrementTick+0x168>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	601a      	str	r2, [r3, #0]
					break;
 800666a:	e03f      	b.n	80066ec <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800666c:	4b31      	ldr	r3, [pc, #196]	@ (8006734 <xTaskIncrementTick+0x15c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d203      	bcs.n	800668c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006684:	4a2e      	ldr	r2, [pc, #184]	@ (8006740 <xTaskIncrementTick+0x168>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6013      	str	r3, [r2, #0]
						break;
 800668a:	e02f      	b.n	80066ec <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3304      	adds	r3, #4
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fc8c 	bl	8004fae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3318      	adds	r3, #24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fc83 	bl	8004fae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <xTaskIncrementTick+0x16c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d903      	bls.n	80066bc <xTaskIncrementTick+0xe4>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	4a22      	ldr	r2, [pc, #136]	@ (8006744 <xTaskIncrementTick+0x16c>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <xTaskIncrementTick+0x170>)
 80066ca:	441a      	add	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fe fc0e 	bl	8004ef4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066dc:	4b1b      	ldr	r3, [pc, #108]	@ (800674c <xTaskIncrementTick+0x174>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3b3      	bcc.n	800664e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ea:	e7b0      	b.n	800664e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066ec:	4b17      	ldr	r3, [pc, #92]	@ (800674c <xTaskIncrementTick+0x174>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f2:	4915      	ldr	r1, [pc, #84]	@ (8006748 <xTaskIncrementTick+0x170>)
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d907      	bls.n	8006714 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e004      	b.n	8006714 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800670a:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <xTaskIncrementTick+0x178>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	4a0f      	ldr	r2, [pc, #60]	@ (8006750 <xTaskIncrementTick+0x178>)
 8006712:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006714:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <xTaskIncrementTick+0x17c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006720:	697b      	ldr	r3, [r7, #20]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	200011d8 	.word	0x200011d8
 8006730:	200011b4 	.word	0x200011b4
 8006734:	20001168 	.word	0x20001168
 8006738:	2000116c 	.word	0x2000116c
 800673c:	200011c8 	.word	0x200011c8
 8006740:	200011d0 	.word	0x200011d0
 8006744:	200011b8 	.word	0x200011b8
 8006748:	20000ce0 	.word	0x20000ce0
 800674c:	20000cdc 	.word	0x20000cdc
 8006750:	200011c0 	.word	0x200011c0
 8006754:	200011c4 	.word	0x200011c4

08006758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800675e:	4b2b      	ldr	r3, [pc, #172]	@ (800680c <vTaskSwitchContext+0xb4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006766:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <vTaskSwitchContext+0xb8>)
 8006768:	2201      	movs	r2, #1
 800676a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800676c:	e047      	b.n	80067fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800676e:	4b28      	ldr	r3, [pc, #160]	@ (8006810 <vTaskSwitchContext+0xb8>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006774:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <vTaskSwitchContext+0xbc>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e011      	b.n	80067a0 <vTaskSwitchContext+0x48>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <vTaskSwitchContext+0x42>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	e7fd      	b.n	8006796 <vTaskSwitchContext+0x3e>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b01      	subs	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	491d      	ldr	r1, [pc, #116]	@ (8006818 <vTaskSwitchContext+0xc0>)
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0e3      	beq.n	800677c <vTaskSwitchContext+0x24>
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a16      	ldr	r2, [pc, #88]	@ (8006818 <vTaskSwitchContext+0xc0>)
 80067c0:	4413      	add	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3308      	adds	r3, #8
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d104      	bne.n	80067e4 <vTaskSwitchContext+0x8c>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	4a0c      	ldr	r2, [pc, #48]	@ (800681c <vTaskSwitchContext+0xc4>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	4a09      	ldr	r2, [pc, #36]	@ (8006814 <vTaskSwitchContext+0xbc>)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067f4:	4b09      	ldr	r3, [pc, #36]	@ (800681c <vTaskSwitchContext+0xc4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3354      	adds	r3, #84	@ 0x54
 80067fa:	4a09      	ldr	r2, [pc, #36]	@ (8006820 <vTaskSwitchContext+0xc8>)
 80067fc:	6013      	str	r3, [r2, #0]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	200011d8 	.word	0x200011d8
 8006810:	200011c4 	.word	0x200011c4
 8006814:	200011b8 	.word	0x200011b8
 8006818:	20000ce0 	.word	0x20000ce0
 800681c:	20000cdc 	.word	0x20000cdc
 8006820:	20000010 	.word	0x20000010

08006824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60fb      	str	r3, [r7, #12]
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684c:	4b07      	ldr	r3, [pc, #28]	@ (800686c <vTaskPlaceOnEventList+0x48>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3318      	adds	r3, #24
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7fe fb71 	bl	8004f3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800685a:	2101      	movs	r1, #1
 800685c:	6838      	ldr	r0, [r7, #0]
 800685e:	f000 fd27 	bl	80072b0 <prvAddCurrentTaskToDelayedList>
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000cdc 	.word	0x20000cdc

08006870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	617b      	str	r3, [r7, #20]
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	e7fd      	b.n	8006896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800689a:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3318      	adds	r3, #24
 80068a0:	4619      	mov	r1, r3
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7fe fb26 	bl	8004ef4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	68b8      	ldr	r0, [r7, #8]
 80068b8:	f000 fcfa 	bl	80072b0 <prvAddCurrentTaskToDelayedList>
	}
 80068bc:	bf00      	nop
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000cdc 	.word	0x20000cdc

080068c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3318      	adds	r3, #24
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fb57 	bl	8004fae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006900:	4b1d      	ldr	r3, [pc, #116]	@ (8006978 <xTaskRemoveFromEventList+0xb0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11d      	bne.n	8006944 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fb4e 	bl	8004fae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006916:	4b19      	ldr	r3, [pc, #100]	@ (800697c <xTaskRemoveFromEventList+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d903      	bls.n	8006926 <xTaskRemoveFromEventList+0x5e>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	4a16      	ldr	r2, [pc, #88]	@ (800697c <xTaskRemoveFromEventList+0xb4>)
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4a13      	ldr	r2, [pc, #76]	@ (8006980 <xTaskRemoveFromEventList+0xb8>)
 8006934:	441a      	add	r2, r3
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe fad9 	bl	8004ef4 <vListInsertEnd>
 8006942:	e005      	b.n	8006950 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	3318      	adds	r3, #24
 8006948:	4619      	mov	r1, r3
 800694a:	480e      	ldr	r0, [pc, #56]	@ (8006984 <xTaskRemoveFromEventList+0xbc>)
 800694c:	f7fe fad2 	bl	8004ef4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006954:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <xTaskRemoveFromEventList+0xc0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	429a      	cmp	r2, r3
 800695c:	d905      	bls.n	800696a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006962:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <xTaskRemoveFromEventList+0xc4>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e001      	b.n	800696e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800696e:	697b      	ldr	r3, [r7, #20]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	200011d8 	.word	0x200011d8
 800697c:	200011b8 	.word	0x200011b8
 8006980:	20000ce0 	.word	0x20000ce0
 8006984:	20001170 	.word	0x20001170
 8006988:	20000cdc 	.word	0x20000cdc
 800698c:	200011c4 	.word	0x200011c4

08006990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <vTaskInternalSetTimeOutState+0x24>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <vTaskInternalSetTimeOutState+0x28>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	200011c8 	.word	0x200011c8
 80069b8:	200011b4 	.word	0x200011b4

080069bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	613b      	str	r3, [r7, #16]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	60fb      	str	r3, [r7, #12]
}
 80069fc:	bf00      	nop
 80069fe:	bf00      	nop
 8006a00:	e7fd      	b.n	80069fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a02:	f001 f8f9 	bl	8007bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b1d      	ldr	r3, [pc, #116]	@ (8006a7c <xTaskCheckForTimeOut+0xc0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d102      	bne.n	8006a26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e023      	b.n	8006a6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b15      	ldr	r3, [pc, #84]	@ (8006a80 <xTaskCheckForTimeOut+0xc4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d007      	beq.n	8006a42 <xTaskCheckForTimeOut+0x86>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e015      	b.n	8006a6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d20b      	bcs.n	8006a64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff ff99 	bl	8006990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e004      	b.n	8006a6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 f8f5 	bl	8007c5c <vPortExitCritical>

	return xReturn;
 8006a72:	69fb      	ldr	r3, [r7, #28]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200011b4 	.word	0x200011b4
 8006a80:	200011c8 	.word	0x200011c8

08006a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <vTaskMissedYield+0x14>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	200011c4 	.word	0x200011c4

08006a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006aa4:	f000 f852 	bl	8006b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <prvIdleTask+0x28>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d9f9      	bls.n	8006aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <prvIdleTask+0x2c>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ac0:	e7f0      	b.n	8006aa4 <prvIdleTask+0x8>
 8006ac2:	bf00      	nop
 8006ac4:	20000ce0 	.word	0x20000ce0
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	e00c      	b.n	8006af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a12      	ldr	r2, [pc, #72]	@ (8006b2c <prvInitialiseTaskLists+0x60>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe f9d7 	bl	8004e9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3301      	adds	r3, #1
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b37      	cmp	r3, #55	@ 0x37
 8006af6:	d9ef      	bls.n	8006ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006af8:	480d      	ldr	r0, [pc, #52]	@ (8006b30 <prvInitialiseTaskLists+0x64>)
 8006afa:	f7fe f9ce 	bl	8004e9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006afe:	480d      	ldr	r0, [pc, #52]	@ (8006b34 <prvInitialiseTaskLists+0x68>)
 8006b00:	f7fe f9cb 	bl	8004e9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b04:	480c      	ldr	r0, [pc, #48]	@ (8006b38 <prvInitialiseTaskLists+0x6c>)
 8006b06:	f7fe f9c8 	bl	8004e9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b0a:	480c      	ldr	r0, [pc, #48]	@ (8006b3c <prvInitialiseTaskLists+0x70>)
 8006b0c:	f7fe f9c5 	bl	8004e9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b10:	480b      	ldr	r0, [pc, #44]	@ (8006b40 <prvInitialiseTaskLists+0x74>)
 8006b12:	f7fe f9c2 	bl	8004e9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <prvInitialiseTaskLists+0x78>)
 8006b18:	4a05      	ldr	r2, [pc, #20]	@ (8006b30 <prvInitialiseTaskLists+0x64>)
 8006b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <prvInitialiseTaskLists+0x7c>)
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <prvInitialiseTaskLists+0x68>)
 8006b20:	601a      	str	r2, [r3, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000ce0 	.word	0x20000ce0
 8006b30:	20001140 	.word	0x20001140
 8006b34:	20001154 	.word	0x20001154
 8006b38:	20001170 	.word	0x20001170
 8006b3c:	20001184 	.word	0x20001184
 8006b40:	2000119c 	.word	0x2000119c
 8006b44:	20001168 	.word	0x20001168
 8006b48:	2000116c 	.word	0x2000116c

08006b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b52:	e019      	b.n	8006b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b54:	f001 f850 	bl	8007bf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b58:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <prvCheckTasksWaitingTermination+0x50>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fa22 	bl	8004fae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <prvCheckTasksWaitingTermination+0x54>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4a0b      	ldr	r2, [pc, #44]	@ (8006ba0 <prvCheckTasksWaitingTermination+0x54>)
 8006b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b7e:	f001 f86d 	bl	8007c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f810 	bl	8006ba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b88:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e1      	bne.n	8006b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20001184 	.word	0x20001184
 8006ba0:	200011b0 	.word	0x200011b0
 8006ba4:	20001198 	.word	0x20001198

08006ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3354      	adds	r3, #84	@ 0x54
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fb29 	bl	800820c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d108      	bne.n	8006bd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f9ff 	bl	8007fcc <vPortFree>
				vPortFree( pxTCB );
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f9fc 	bl	8007fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bd4:	e019      	b.n	8006c0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d103      	bne.n	8006be8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f9f3 	bl	8007fcc <vPortFree>
	}
 8006be6:	e010      	b.n	8006c0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d00b      	beq.n	8006c0a <prvDeleteTCB+0x62>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60fb      	str	r3, [r7, #12]
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <prvDeleteTCB+0x5e>
	}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <prvResetNextTaskUnblockTime+0x44>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <prvResetNextTaskUnblockTime+0x14>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <prvResetNextTaskUnblockTime+0x16>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <prvResetNextTaskUnblockTime+0x48>)
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c36:	e008      	b.n	8006c4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c38:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <prvResetNextTaskUnblockTime+0x44>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4a05      	ldr	r2, [pc, #20]	@ (8006c5c <prvResetNextTaskUnblockTime+0x48>)
 8006c48:	6013      	str	r3, [r2, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20001168 	.word	0x20001168
 8006c5c:	200011d0 	.word	0x200011d0

08006c60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c66:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <xTaskGetCurrentTaskHandle+0x1c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c6c:	687b      	ldr	r3, [r7, #4]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000cdc 	.word	0x20000cdc

08006c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <xTaskGetSchedulerState+0x34>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	e008      	b.n	8006ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c94:	4b08      	ldr	r3, [pc, #32]	@ (8006cb8 <xTaskGetSchedulerState+0x38>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	e001      	b.n	8006ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ca6:	687b      	ldr	r3, [r7, #4]
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	200011bc 	.word	0x200011bc
 8006cb8:	200011d8 	.word	0x200011d8

08006cbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d056      	beq.n	8006d80 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d8c <xTaskPriorityInherit+0xd0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d246      	bcs.n	8006d6e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	db06      	blt.n	8006cf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce8:	4b28      	ldr	r3, [pc, #160]	@ (8006d8c <xTaskPriorityInherit+0xd0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6959      	ldr	r1, [r3, #20]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a22      	ldr	r2, [pc, #136]	@ (8006d90 <xTaskPriorityInherit+0xd4>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	4299      	cmp	r1, r3
 8006d0c:	d101      	bne.n	8006d12 <xTaskPriorityInherit+0x56>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xTaskPriorityInherit+0x58>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d022      	beq.n	8006d5e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe f946 	bl	8004fae <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <xTaskPriorityInherit+0xd0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d30:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <xTaskPriorityInherit+0xd8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d903      	bls.n	8006d40 <xTaskPriorityInherit+0x84>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	4a15      	ldr	r2, [pc, #84]	@ (8006d94 <xTaskPriorityInherit+0xd8>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4a10      	ldr	r2, [pc, #64]	@ (8006d90 <xTaskPriorityInherit+0xd4>)
 8006d4e:	441a      	add	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fe f8cc 	bl	8004ef4 <vListInsertEnd>
 8006d5c:	e004      	b.n	8006d68 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d8c <xTaskPriorityInherit+0xd0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e008      	b.n	8006d80 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d72:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <xTaskPriorityInherit+0xd0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d201      	bcs.n	8006d80 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d80:	68fb      	ldr	r3, [r7, #12]
	}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000cdc 	.word	0x20000cdc
 8006d90:	20000ce0 	.word	0x20000ce0
 8006d94:	200011b8 	.word	0x200011b8

08006d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d058      	beq.n	8006e60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dae:	4b2f      	ldr	r3, [pc, #188]	@ (8006e6c <xTaskPriorityDisinherit+0xd4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d00b      	beq.n	8006dd0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	60fb      	str	r3, [r7, #12]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60bb      	str	r3, [r7, #8]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d02c      	beq.n	8006e60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d128      	bne.n	8006e60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe f8cb 	bl	8004fae <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e30:	4b0f      	ldr	r3, [pc, #60]	@ (8006e70 <xTaskPriorityDisinherit+0xd8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <xTaskPriorityDisinherit+0xa8>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e70 <xTaskPriorityDisinherit+0xd8>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a09      	ldr	r2, [pc, #36]	@ (8006e74 <xTaskPriorityDisinherit+0xdc>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe f84c 	bl	8004ef4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e60:	697b      	ldr	r3, [r7, #20]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000cdc 	.word	0x20000cdc
 8006e70:	200011b8 	.word	0x200011b8
 8006e74:	20000ce0 	.word	0x20000ce0

08006e78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d071      	beq.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10b      	bne.n	8006eb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	e7fd      	b.n	8006eac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d902      	bls.n	8006ec0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	e002      	b.n	8006ec6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d051      	beq.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d14c      	bne.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006eda:	4b28      	ldr	r3, [pc, #160]	@ (8006f7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d10b      	bne.n	8006efc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60bb      	str	r3, [r7, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db04      	blt.n	8006f1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	6959      	ldr	r1, [r3, #20]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f2a:	4413      	add	r3, r2
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	d101      	bne.n	8006f34 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01c      	beq.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe f835 	bl	8004fae <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d903      	bls.n	8006f58 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f54:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a06      	ldr	r2, [pc, #24]	@ (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f66:	441a      	add	r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fd ffc0 	bl	8004ef4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f74:	bf00      	nop
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000cdc 	.word	0x20000cdc
 8006f80:	20000ce0 	.word	0x20000ce0
 8006f84:	200011b8 	.word	0x200011b8

08006f88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
	}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000cdc 	.word	0x20000cdc

08006fb0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	@ 0x28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <xTaskGenericNotify+0x32>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	61bb      	str	r3, [r7, #24]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006fe6:	f000 fe07 	bl	8007bf8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007000:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d82e      	bhi.n	800706e <xTaskGenericNotify+0xbe>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <xTaskGenericNotify+0x68>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800706f 	.word	0x0800706f
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800703f 	.word	0x0800703f
 8007024:	0800704f 	.word	0x0800704f
 8007028:	08007059 	.word	0x08007059
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	431a      	orrs	r2, r3
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800703c:	e017      	b.n	800706e <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800704c:	e00f      	b.n	800706e <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007056:	e00a      	b.n	800706e <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007058:	7ffb      	ldrb	r3, [r7, #31]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d004      	beq.n	8007068 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007066:	e001      	b.n	800706c <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8007068:	2300      	movs	r3, #0
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800706c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800706e:	7ffb      	ldrb	r3, [r7, #31]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d13b      	bne.n	80070ec <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd ff98 	bl	8004fae <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007082:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <xTaskGenericNotify+0x14c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d903      	bls.n	8007092 <xTaskGenericNotify+0xe2>
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <xTaskGenericNotify+0x14c>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a18      	ldr	r2, [pc, #96]	@ (8007100 <xTaskGenericNotify+0x150>)
 80070a0:	441a      	add	r2, r3
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fd ff23 	bl	8004ef4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <xTaskGenericNotify+0x11e>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	617b      	str	r3, [r7, #20]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <xTaskGenericNotify+0x154>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	429a      	cmp	r2, r3
 80070da:	d907      	bls.n	80070ec <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80070dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <xTaskGenericNotify+0x158>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80070ec:	f000 fdb6 	bl	8007c5c <vPortExitCritical>

		return xReturn;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3728      	adds	r7, #40	@ 0x28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200011b8 	.word	0x200011b8
 8007100:	20000ce0 	.word	0x20000ce0
 8007104:	20000cdc 	.word	0x20000cdc
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08e      	sub	sp, #56	@ 0x38
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800711c:	2301      	movs	r3, #1
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800713e:	f000 fe3b 	bl	8007db8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007146:	f3ef 8211 	mrs	r2, BASEPRI
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	623a      	str	r2, [r7, #32]
 800715c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800715e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007160:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	2202      	movs	r2, #2
 8007180:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	2b04      	cmp	r3, #4
 8007188:	d82e      	bhi.n	80071e8 <xTaskGenericNotifyFromISR+0xdc>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <xTaskGenericNotifyFromISR+0x84>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071b7 	.word	0x080071b7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071d1 	.word	0x080071d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80071b4:	e018      	b.n	80071e8 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80071c4:	e010      	b.n	80071e8 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80071ce:	e00b      	b.n	80071e8 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80071d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d004      	beq.n	80071e2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80071e0:	e001      	b.n	80071e6 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80071e6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80071e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d148      	bne.n	8007282 <xTaskGenericNotifyFromISR+0x176>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	61bb      	str	r3, [r7, #24]
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007210:	4b21      	ldr	r3, [pc, #132]	@ (8007298 <xTaskGenericNotifyFromISR+0x18c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11d      	bne.n	8007254 <xTaskGenericNotifyFromISR+0x148>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd fec6 	bl	8004fae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007226:	4b1d      	ldr	r3, [pc, #116]	@ (800729c <xTaskGenericNotifyFromISR+0x190>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d903      	bls.n	8007236 <xTaskGenericNotifyFromISR+0x12a>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	4a1a      	ldr	r2, [pc, #104]	@ (800729c <xTaskGenericNotifyFromISR+0x190>)
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a17      	ldr	r2, [pc, #92]	@ (80072a0 <xTaskGenericNotifyFromISR+0x194>)
 8007244:	441a      	add	r2, r3
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	3304      	adds	r3, #4
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7fd fe51 	bl	8004ef4 <vListInsertEnd>
 8007252:	e005      	b.n	8007260 <xTaskGenericNotifyFromISR+0x154>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	3318      	adds	r3, #24
 8007258:	4619      	mov	r1, r3
 800725a:	4812      	ldr	r0, [pc, #72]	@ (80072a4 <xTaskGenericNotifyFromISR+0x198>)
 800725c:	f7fd fe4a 	bl	8004ef4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007264:	4b10      	ldr	r3, [pc, #64]	@ (80072a8 <xTaskGenericNotifyFromISR+0x19c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	429a      	cmp	r2, r3
 800726c:	d909      	bls.n	8007282 <xTaskGenericNotifyFromISR+0x176>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800726e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <xTaskGenericNotifyFromISR+0x170>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e002      	b.n	8007282 <xTaskGenericNotifyFromISR+0x176>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800727c:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <xTaskGenericNotifyFromISR+0x1a0>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f383 8811 	msr	BASEPRI, r3
}
 800728c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3738      	adds	r7, #56	@ 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	200011d8 	.word	0x200011d8
 800729c:	200011b8 	.word	0x200011b8
 80072a0:	20000ce0 	.word	0x20000ce0
 80072a4:	20001170 	.word	0x20001170
 80072a8:	20000cdc 	.word	0x20000cdc
 80072ac:	200011c4 	.word	0x200011c4

080072b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072ba:	4b21      	ldr	r3, [pc, #132]	@ (8007340 <prvAddCurrentTaskToDelayedList+0x90>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072c0:	4b20      	ldr	r3, [pc, #128]	@ (8007344 <prvAddCurrentTaskToDelayedList+0x94>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd fe71 	bl	8004fae <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d10a      	bne.n	80072ea <prvAddCurrentTaskToDelayedList+0x3a>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072da:	4b1a      	ldr	r3, [pc, #104]	@ (8007344 <prvAddCurrentTaskToDelayedList+0x94>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4819      	ldr	r0, [pc, #100]	@ (8007348 <prvAddCurrentTaskToDelayedList+0x98>)
 80072e4:	f7fd fe06 	bl	8004ef4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072e8:	e026      	b.n	8007338 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072f2:	4b14      	ldr	r3, [pc, #80]	@ (8007344 <prvAddCurrentTaskToDelayedList+0x94>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d209      	bcs.n	8007316 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007302:	4b12      	ldr	r3, [pc, #72]	@ (800734c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <prvAddCurrentTaskToDelayedList+0x94>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f7fd fe14 	bl	8004f3c <vListInsert>
}
 8007314:	e010      	b.n	8007338 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007316:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <prvAddCurrentTaskToDelayedList+0x94>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7fd fe0a 	bl	8004f3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvAddCurrentTaskToDelayedList+0xa4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	429a      	cmp	r2, r3
 8007330:	d202      	bcs.n	8007338 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007332:	4a08      	ldr	r2, [pc, #32]	@ (8007354 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	200011b4 	.word	0x200011b4
 8007344:	20000cdc 	.word	0x20000cdc
 8007348:	2000119c 	.word	0x2000119c
 800734c:	2000116c 	.word	0x2000116c
 8007350:	20001168 	.word	0x20001168
 8007354:	200011d0 	.word	0x200011d0

08007358 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	@ 0x28
 800735c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007362:	f000 fad9 	bl	8007918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007366:	4b1d      	ldr	r3, [pc, #116]	@ (80073dc <xTimerCreateTimerTask+0x84>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d021      	beq.n	80073b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007376:	1d3a      	adds	r2, r7, #4
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fd1d 	bl	8004dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	9202      	str	r2, [sp, #8]
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	2302      	movs	r3, #2
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	460a      	mov	r2, r1
 8007398:	4911      	ldr	r1, [pc, #68]	@ (80073e0 <xTimerCreateTimerTask+0x88>)
 800739a:	4812      	ldr	r0, [pc, #72]	@ (80073e4 <xTimerCreateTimerTask+0x8c>)
 800739c:	f7fe fe06 	bl	8005fac <xTaskCreateStatic>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4a11      	ldr	r2, [pc, #68]	@ (80073e8 <xTimerCreateTimerTask+0x90>)
 80073a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073a6:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <xTimerCreateTimerTask+0x90>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073ae:	2301      	movs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	613b      	str	r3, [r7, #16]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073d0:	697b      	ldr	r3, [r7, #20]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	2000120c 	.word	0x2000120c
 80073e0:	08008428 	.word	0x08008428
 80073e4:	0800750d 	.word	0x0800750d
 80073e8:	20001210 	.word	0x20001210

080073ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xTimerGenericCommand+0x30>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	623b      	str	r3, [r7, #32]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800741c:	4b19      	ldr	r3, [pc, #100]	@ (8007484 <xTimerGenericCommand+0x98>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02a      	beq.n	800747a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b05      	cmp	r3, #5
 8007434:	dc18      	bgt.n	8007468 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007436:	f7ff fc23 	bl	8006c80 <xTaskGetSchedulerState>
 800743a:	4603      	mov	r3, r0
 800743c:	2b02      	cmp	r3, #2
 800743e:	d109      	bne.n	8007454 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007440:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <xTimerGenericCommand+0x98>)
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	f107 0110 	add.w	r1, r7, #16
 8007448:	2300      	movs	r3, #0
 800744a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744c:	f7fe f84a 	bl	80054e4 <xQueueGenericSend>
 8007450:	6278      	str	r0, [r7, #36]	@ 0x24
 8007452:	e012      	b.n	800747a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007454:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <xTimerGenericCommand+0x98>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	f107 0110 	add.w	r1, r7, #16
 800745c:	2300      	movs	r3, #0
 800745e:	2200      	movs	r2, #0
 8007460:	f7fe f840 	bl	80054e4 <xQueueGenericSend>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24
 8007466:	e008      	b.n	800747a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007468:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <xTimerGenericCommand+0x98>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	f107 0110 	add.w	r1, r7, #16
 8007470:	2300      	movs	r3, #0
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	f7fe f938 	bl	80056e8 <xQueueGenericSendFromISR>
 8007478:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800747c:	4618      	mov	r0, r3
 800747e:	3728      	adds	r7, #40	@ 0x28
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	2000120c 	.word	0x2000120c

08007488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007492:	4b1d      	ldr	r3, [pc, #116]	@ (8007508 <prvProcessExpiredTimer+0x80>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd fd84 	bl	8004fae <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d123      	bne.n	80074f6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	6978      	ldr	r0, [r7, #20]
 80074bc:	f000 f8cc 	bl	8007658 <prvInsertTimerInActiveList>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d017      	beq.n	80074f6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074c6:	2300      	movs	r3, #0
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	2100      	movs	r1, #0
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f7ff ff8b 	bl	80073ec <xTimerGenericCommand>
 80074d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60fb      	str	r3, [r7, #12]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	4798      	blx	r3
}
 80074fe:	bf00      	nop
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001204 	.word	0x20001204

0800750c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007514:	f107 0308 	add.w	r3, r7, #8
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f859 	bl	80075d0 <prvGetNextExpireTime>
 800751e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f805 	bl	8007534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800752a:	f000 f8d7 	bl	80076dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800752e:	bf00      	nop
 8007530:	e7f0      	b.n	8007514 <prvTimerTask+0x8>
	...

08007534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800753e:	f7fe ff8f 	bl	8006460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f866 	bl	8007618 <prvSampleTimeNow>
 800754c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d130      	bne.n	80075b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <prvProcessTimerOrBlockTask+0x3c>
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	429a      	cmp	r2, r3
 8007560:	d806      	bhi.n	8007570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007562:	f7fe ff8b 	bl	800647c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff8d 	bl	8007488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800756e:	e024      	b.n	80075ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007576:	4b13      	ldr	r3, [pc, #76]	@ (80075c4 <prvProcessTimerOrBlockTask+0x90>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	bf0c      	ite	eq
 8007580:	2301      	moveq	r3, #1
 8007582:	2300      	movne	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007588:	4b0f      	ldr	r3, [pc, #60]	@ (80075c8 <prvProcessTimerOrBlockTask+0x94>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	4619      	mov	r1, r3
 8007596:	f7fe fcd5 	bl	8005f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800759a:	f7fe ff6f 	bl	800647c <xTaskResumeAll>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075a4:	4b09      	ldr	r3, [pc, #36]	@ (80075cc <prvProcessTimerOrBlockTask+0x98>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
}
 80075b4:	e001      	b.n	80075ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075b6:	f7fe ff61 	bl	800647c <xTaskResumeAll>
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20001208 	.word	0x20001208
 80075c8:	2000120c 	.word	0x2000120c
 80075cc:	e000ed04 	.word	0xe000ed04

080075d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007614 <prvGetNextExpireTime+0x44>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bf0c      	ite	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	2300      	movne	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075f6:	4b07      	ldr	r3, [pc, #28]	@ (8007614 <prvGetNextExpireTime+0x44>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e001      	b.n	8007606 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20001204 	.word	0x20001204

08007618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007620:	f7fe ffca 	bl	80065b8 <xTaskGetTickCount>
 8007624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <prvSampleTimeNow+0x3c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d205      	bcs.n	800763c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007630:	f000 f910 	bl	8007854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e002      	b.n	8007642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007642:	4a04      	ldr	r2, [pc, #16]	@ (8007654 <prvSampleTimeNow+0x3c>)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20001214 	.word	0x20001214

08007658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d812      	bhi.n	80076a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d302      	bcc.n	8007692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	e01b      	b.n	80076ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007692:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <prvInsertTimerInActiveList+0x7c>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7fd fc4d 	bl	8004f3c <vListInsert>
 80076a2:	e012      	b.n	80076ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d206      	bcs.n	80076ba <prvInsertTimerInActiveList+0x62>
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d302      	bcc.n	80076ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e007      	b.n	80076ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ba:	4b07      	ldr	r3, [pc, #28]	@ (80076d8 <prvInsertTimerInActiveList+0x80>)
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fd fc39 	bl	8004f3c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076ca:	697b      	ldr	r3, [r7, #20]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20001208 	.word	0x20001208
 80076d8:	20001204 	.word	0x20001204

080076dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	@ 0x38
 80076e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076e2:	e0a5      	b.n	8007830 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da19      	bge.n	800771e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	3304      	adds	r3, #4
 80076ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	61fb      	str	r3, [r7, #28]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007714:	6850      	ldr	r0, [r2, #4]
 8007716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007718:	6892      	ldr	r2, [r2, #8]
 800771a:	4611      	mov	r1, r2
 800771c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f2c0 8085 	blt.w	8007830 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fd fc39 	bl	8004fae <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800773c:	463b      	mov	r3, r7
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff ff6a 	bl	8007618 <prvSampleTimeNow>
 8007744:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b09      	cmp	r3, #9
 800774a:	d86c      	bhi.n	8007826 <prvProcessReceivedCommands+0x14a>
 800774c:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <prvProcessReceivedCommands+0x78>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	0800777d 	.word	0x0800777d
 8007758:	0800777d 	.word	0x0800777d
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007827 	.word	0x08007827
 8007764:	080077db 	.word	0x080077db
 8007768:	08007815 	.word	0x08007815
 800776c:	0800777d 	.word	0x0800777d
 8007770:	0800777d 	.word	0x0800777d
 8007774:	08007827 	.word	0x08007827
 8007778:	080077db 	.word	0x080077db
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	18d1      	adds	r1, r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800778a:	f7ff ff65 	bl	8007658 <prvInsertTimerInActiveList>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d04a      	beq.n	800782a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800779a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d142      	bne.n	800782a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	441a      	add	r2, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b6:	f7ff fe19 	bl	80073ec <xTimerGenericCommand>
 80077ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d133      	bne.n	800782a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61bb      	str	r3, [r7, #24]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	617b      	str	r3, [r7, #20]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	18d1      	adds	r1, r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780e:	f7ff ff23 	bl	8007658 <prvInsertTimerInActiveList>
					break;
 8007812:	e00d      	b.n	8007830 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800781e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007820:	f000 fbd4 	bl	8007fcc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007824:	e003      	b.n	800782e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007826:	bf00      	nop
 8007828:	e002      	b.n	8007830 <prvProcessReceivedCommands+0x154>
					break;
 800782a:	bf00      	nop
 800782c:	e000      	b.n	8007830 <prvProcessReceivedCommands+0x154>
					break;
 800782e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <prvProcessReceivedCommands+0x174>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	1d39      	adds	r1, r7, #4
 8007836:	2200      	movs	r2, #0
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd fff1 	bl	8005820 <xQueueReceive>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	f47f af4f 	bne.w	80076e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	3730      	adds	r7, #48	@ 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2000120c 	.word	0x2000120c

08007854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800785a:	e046      	b.n	80078ea <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800785c:	4b2c      	ldr	r3, [pc, #176]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007866:	4b2a      	ldr	r3, [pc, #168]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fb9a 	bl	8004fae <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d12f      	bne.n	80078ea <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4413      	add	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	429a      	cmp	r2, r3
 800789a:	d90e      	bls.n	80078ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078a8:	4b19      	ldr	r3, [pc, #100]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fd fb42 	bl	8004f3c <vListInsert>
 80078b8:	e017      	b.n	80078ea <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	2100      	movs	r1, #0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff fd91 	bl	80073ec <xTimerGenericCommand>
 80078ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <prvSwitchTimerLists+0x96>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	603b      	str	r3, [r7, #0]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ea:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1b3      	bne.n	800785c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078fa:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <prvSwitchTimerLists+0xc0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a04      	ldr	r2, [pc, #16]	@ (8007910 <prvSwitchTimerLists+0xbc>)
 8007900:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007902:	4a04      	ldr	r2, [pc, #16]	@ (8007914 <prvSwitchTimerLists+0xc0>)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20001204 	.word	0x20001204
 8007914:	20001208 	.word	0x20001208

08007918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800791e:	f000 f96b 	bl	8007bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007922:	4b15      	ldr	r3, [pc, #84]	@ (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d120      	bne.n	800796c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800792a:	4814      	ldr	r0, [pc, #80]	@ (800797c <prvCheckForValidListAndQueue+0x64>)
 800792c:	f7fd fab5 	bl	8004e9a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007930:	4813      	ldr	r0, [pc, #76]	@ (8007980 <prvCheckForValidListAndQueue+0x68>)
 8007932:	f7fd fab2 	bl	8004e9a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007936:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <prvCheckForValidListAndQueue+0x6c>)
 8007938:	4a10      	ldr	r2, [pc, #64]	@ (800797c <prvCheckForValidListAndQueue+0x64>)
 800793a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800793c:	4b12      	ldr	r3, [pc, #72]	@ (8007988 <prvCheckForValidListAndQueue+0x70>)
 800793e:	4a10      	ldr	r2, [pc, #64]	@ (8007980 <prvCheckForValidListAndQueue+0x68>)
 8007940:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007942:	2300      	movs	r3, #0
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4b11      	ldr	r3, [pc, #68]	@ (800798c <prvCheckForValidListAndQueue+0x74>)
 8007948:	4a11      	ldr	r2, [pc, #68]	@ (8007990 <prvCheckForValidListAndQueue+0x78>)
 800794a:	2110      	movs	r1, #16
 800794c:	200a      	movs	r0, #10
 800794e:	f7fd fbc3 	bl	80050d8 <xQueueGenericCreateStatic>
 8007952:	4603      	mov	r3, r0
 8007954:	4a08      	ldr	r2, [pc, #32]	@ (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007956:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007958:	4b07      	ldr	r3, [pc, #28]	@ (8007978 <prvCheckForValidListAndQueue+0x60>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007960:	4b05      	ldr	r3, [pc, #20]	@ (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	490b      	ldr	r1, [pc, #44]	@ (8007994 <prvCheckForValidListAndQueue+0x7c>)
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fa98 	bl	8005e9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800796c:	f000 f976 	bl	8007c5c <vPortExitCritical>
}
 8007970:	bf00      	nop
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	2000120c 	.word	0x2000120c
 800797c:	200011dc 	.word	0x200011dc
 8007980:	200011f0 	.word	0x200011f0
 8007984:	20001204 	.word	0x20001204
 8007988:	20001208 	.word	0x20001208
 800798c:	200012b8 	.word	0x200012b8
 8007990:	20001218 	.word	0x20001218
 8007994:	08008430 	.word	0x08008430

08007998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f023 0201 	bic.w	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c8:	4a0c      	ldr	r2, [pc, #48]	@ (80079fc <pxPortInitialiseStack+0x64>)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3b14      	subs	r3, #20
 80079d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3b04      	subs	r3, #4
 80079de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f06f 0202 	mvn.w	r2, #2
 80079e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b20      	subs	r3, #32
 80079ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ee:	68fb      	ldr	r3, [r7, #12]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	08007a01 	.word	0x08007a01

08007a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a0a:	4b13      	ldr	r3, [pc, #76]	@ (8007a58 <prvTaskExitError+0x58>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d00b      	beq.n	8007a2c <prvTaskExitError+0x2c>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	e7fd      	b.n	8007a28 <prvTaskExitError+0x28>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60bb      	str	r3, [r7, #8]
}
 8007a3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a40:	bf00      	nop
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0fc      	beq.n	8007a42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	2000000c 	.word	0x2000000c
 8007a5c:	00000000 	.word	0x00000000

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	@ (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ab6:	4b47      	ldr	r3, [pc, #284]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a47      	ldr	r2, [pc, #284]	@ (8007bd8 <xPortStartScheduler+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10b      	bne.n	8007ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bdc <xPortStartScheduler+0x12c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10b      	bne.n	8007afa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	613b      	str	r3, [r7, #16]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007afa:	4b39      	ldr	r3, [pc, #228]	@ (8007be0 <xPortStartScheduler+0x130>)
 8007afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	22ff      	movs	r2, #255	@ 0xff
 8007b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <xPortStartScheduler+0x134>)
 8007b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b22:	4b31      	ldr	r3, [pc, #196]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b24:	2207      	movs	r2, #7
 8007b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b28:	e009      	b.n	8007b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b46:	2b80      	cmp	r3, #128	@ 0x80
 8007b48:	d0ef      	beq.n	8007b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b4a:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1c3 0307 	rsb	r3, r3, #7
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d00b      	beq.n	8007b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a16      	ldr	r2, [pc, #88]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b98:	4b14      	ldr	r3, [pc, #80]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ba4:	f000 f8da 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <xPortStartScheduler+0x140>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bae:	f000 f8f9 	bl	8007da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bbe:	f7ff ff63 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bc2:	f7fe fdc9 	bl	8006758 <vTaskSwitchContext>
	prvTaskExitError();
 8007bc6:	f7ff ff1b 	bl	8007a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	e000ed00 	.word	0xe000ed00
 8007bd8:	410fc271 	.word	0x410fc271
 8007bdc:	410fc270 	.word	0x410fc270
 8007be0:	e000e400 	.word	0xe000e400
 8007be4:	20001308 	.word	0x20001308
 8007be8:	2000130c 	.word	0x2000130c
 8007bec:	e000ed20 	.word	0xe000ed20
 8007bf0:	2000000c 	.word	0x2000000c
 8007bf4:	e000ef34 	.word	0xe000ef34

08007bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d110      	bne.n	8007c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <vPortEnterCritical+0x60>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	603b      	str	r3, [r7, #0]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <vPortEnterCritical+0x4a>
	}
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	2000000c 	.word	0x2000000c
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <vPortExitCritical+0x50>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <vPortExitCritical+0x26>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	607b      	str	r3, [r7, #4]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c82:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <vPortExitCritical+0x44>
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	2000000c 	.word	0x2000000c

08007cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	@ (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cd4:	f380 8811 	msr	BASEPRI, r0
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f7fe fd3a 	bl	8006758 <vTaskSwitchContext>
 8007ce4:	f04f 0000 	mov.w	r0, #0
 8007ce8:	f380 8811 	msr	BASEPRI, r0
 8007cec:	bc09      	pop	{r0, r3}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	f01e 0f10 	tst.w	lr, #16
 8007cfa:	bf08      	it	eq
 8007cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d00:	f380 8809 	msr	PSP, r0
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst>:
 8007d10:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7fe fc51 	bl	80065d8 <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <SysTick_Handler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	@ (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a09      	ldr	r2, [pc, #36]	@ (8007da0 <vPortSetupTimerInterrupt+0x44>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010
 8007d94:	e000e018 	.word	0xe000e018
 8007d98:	20000000 	.word	0x20000000
 8007d9c:	10624dd3 	.word	0x10624dd3
 8007da0:	e000e014 	.word	0xe000e014

08007da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007db4 <vPortEnableVFP+0x10>
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dae:	6001      	str	r1, [r0, #0]
 8007db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007db2:	bf00      	nop
 8007db4:	e000ed88 	.word	0xe000ed88

08007db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dbe:	f3ef 8305 	mrs	r3, IPSR
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d915      	bls.n	8007df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dca:	4a18      	ldr	r2, [pc, #96]	@ (8007e2c <vPortValidateInterruptPriority+0x74>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd4:	4b16      	ldr	r3, [pc, #88]	@ (8007e30 <vPortValidateInterruptPriority+0x78>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20b      	bcs.n	8007df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <vPortValidateInterruptPriority+0x7c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <vPortValidateInterruptPriority+0x80>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d90b      	bls.n	8007e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	603b      	str	r3, [r7, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <vPortValidateInterruptPriority+0x62>
	}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	e000e3f0 	.word	0xe000e3f0
 8007e30:	20001308 	.word	0x20001308
 8007e34:	e000ed0c 	.word	0xe000ed0c
 8007e38:	2000130c 	.word	0x2000130c

08007e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	@ 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e48:	f7fe fb0a 	bl	8006460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb8 <pvPortMalloc+0x17c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e54:	f000 f916 	bl	8008084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e58:	4b58      	ldr	r3, [pc, #352]	@ (8007fbc <pvPortMalloc+0x180>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 8090 	bne.w	8007f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <pvPortMalloc+0x6e>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	617b      	str	r3, [r7, #20]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d06a      	beq.n	8007f86 <pvPortMalloc+0x14a>
 8007eb0:	4b43      	ldr	r3, [pc, #268]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d865      	bhi.n	8007f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eba:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <pvPortMalloc+0x188>)
 8007ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ebe:	4b41      	ldr	r3, [pc, #260]	@ (8007fc4 <pvPortMalloc+0x188>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ec4:	e004      	b.n	8007ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d903      	bls.n	8007ee2 <pvPortMalloc+0xa6>
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f1      	bne.n	8007ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ee2:	4b35      	ldr	r3, [pc, #212]	@ (8007fb8 <pvPortMalloc+0x17c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d04c      	beq.n	8007f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	4413      	add	r3, r2
 8007ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	1ad2      	subs	r2, r2, r3
 8007f06:	2308      	movs	r3, #8
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d920      	bls.n	8007f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <pvPortMalloc+0xfc>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f4a:	69b8      	ldr	r0, [r7, #24]
 8007f4c:	f000 f8fc 	bl	8008148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f50:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f5e:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b19      	ldr	r3, [pc, #100]	@ (8007fc8 <pvPortMalloc+0x18c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d203      	bcs.n	8007f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	@ (8007fc8 <pvPortMalloc+0x18c>)
 8007f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	4b11      	ldr	r3, [pc, #68]	@ (8007fbc <pvPortMalloc+0x180>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f86:	f7fe fa79 	bl	800647c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <pvPortMalloc+0x170>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <pvPortMalloc+0x16c>
	return pvReturn;
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	@ 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20002318 	.word	0x20002318
 8007fbc:	20002324 	.word	0x20002324
 8007fc0:	2000231c 	.word	0x2000231c
 8007fc4:	20002310 	.word	0x20002310
 8007fc8:	20002320 	.word	0x20002320

08007fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04a      	beq.n	8008074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fde:	2308      	movs	r3, #8
 8007fe0:	425b      	negs	r3, r3
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	4b22      	ldr	r3, [pc, #136]	@ (800807c <vPortFree+0xb0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <vPortFree+0x46>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60fb      	str	r3, [r7, #12]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <vPortFree+0x66>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	60bb      	str	r3, [r7, #8]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	4b11      	ldr	r3, [pc, #68]	@ (800807c <vPortFree+0xb0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d019      	beq.n	8008074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d115      	bne.n	8008074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	4b0b      	ldr	r3, [pc, #44]	@ (800807c <vPortFree+0xb0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	43db      	mvns	r3, r3
 8008052:	401a      	ands	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008058:	f7fe fa02 	bl	8006460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <vPortFree+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4413      	add	r3, r2
 8008066:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <vPortFree+0xb4>)
 8008068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f000 f86c 	bl	8008148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008070:	f7fe fa04 	bl	800647c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008074:	bf00      	nop
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20002324 	.word	0x20002324
 8008080:	2000231c 	.word	0x2000231c

08008084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800808a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800808e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008090:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <prvHeapInit+0xac>)
 8008092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3307      	adds	r3, #7
 80080a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008130 <prvHeapInit+0xac>)
 80080b4:	4413      	add	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008134 <prvHeapInit+0xb0>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <prvHeapInit+0xb0>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4413      	add	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080d0:	2208      	movs	r2, #8
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <prvHeapInit+0xb4>)
 80080e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <prvHeapInit+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ee:	4b12      	ldr	r3, [pc, #72]	@ (8008138 <prvHeapInit+0xb4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <prvHeapInit+0xb4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a0a      	ldr	r2, [pc, #40]	@ (800813c <prvHeapInit+0xb8>)
 8008112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a09      	ldr	r2, [pc, #36]	@ (8008140 <prvHeapInit+0xbc>)
 800811a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <prvHeapInit+0xc0>)
 800811e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008122:	601a      	str	r2, [r3, #0]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20001310 	.word	0x20001310
 8008134:	20002310 	.word	0x20002310
 8008138:	20002318 	.word	0x20002318
 800813c:	20002320 	.word	0x20002320
 8008140:	2000231c 	.word	0x2000231c
 8008144:	20002324 	.word	0x20002324

08008148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008150:	4b28      	ldr	r3, [pc, #160]	@ (80081f4 <prvInsertBlockIntoFreeList+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e002      	b.n	800815c <prvInsertBlockIntoFreeList+0x14>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d8f7      	bhi.n	8008156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d108      	bne.n	800818a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d118      	bne.n	80081d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b15      	ldr	r3, [pc, #84]	@ (80081f8 <prvInsertBlockIntoFreeList+0xb0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d00d      	beq.n	80081c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e008      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081c6:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <prvInsertBlockIntoFreeList+0xb0>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e003      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d002      	beq.n	80081e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20002310 	.word	0x20002310
 80081f8:	20002318 	.word	0x20002318

080081fc <memset>:
 80081fc:	4402      	add	r2, r0
 80081fe:	4603      	mov	r3, r0
 8008200:	4293      	cmp	r3, r2
 8008202:	d100      	bne.n	8008206 <memset+0xa>
 8008204:	4770      	bx	lr
 8008206:	f803 1b01 	strb.w	r1, [r3], #1
 800820a:	e7f9      	b.n	8008200 <memset+0x4>

0800820c <_reclaim_reent>:
 800820c:	4b2d      	ldr	r3, [pc, #180]	@ (80082c4 <_reclaim_reent+0xb8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4283      	cmp	r3, r0
 8008212:	b570      	push	{r4, r5, r6, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	d053      	beq.n	80082c0 <_reclaim_reent+0xb4>
 8008218:	69c3      	ldr	r3, [r0, #28]
 800821a:	b31b      	cbz	r3, 8008264 <_reclaim_reent+0x58>
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	b163      	cbz	r3, 800823a <_reclaim_reent+0x2e>
 8008220:	2500      	movs	r5, #0
 8008222:	69e3      	ldr	r3, [r4, #28]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	5959      	ldr	r1, [r3, r5]
 8008228:	b9b1      	cbnz	r1, 8008258 <_reclaim_reent+0x4c>
 800822a:	3504      	adds	r5, #4
 800822c:	2d80      	cmp	r5, #128	@ 0x80
 800822e:	d1f8      	bne.n	8008222 <_reclaim_reent+0x16>
 8008230:	69e3      	ldr	r3, [r4, #28]
 8008232:	4620      	mov	r0, r4
 8008234:	68d9      	ldr	r1, [r3, #12]
 8008236:	f000 f87b 	bl	8008330 <_free_r>
 800823a:	69e3      	ldr	r3, [r4, #28]
 800823c:	6819      	ldr	r1, [r3, #0]
 800823e:	b111      	cbz	r1, 8008246 <_reclaim_reent+0x3a>
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f875 	bl	8008330 <_free_r>
 8008246:	69e3      	ldr	r3, [r4, #28]
 8008248:	689d      	ldr	r5, [r3, #8]
 800824a:	b15d      	cbz	r5, 8008264 <_reclaim_reent+0x58>
 800824c:	4629      	mov	r1, r5
 800824e:	4620      	mov	r0, r4
 8008250:	682d      	ldr	r5, [r5, #0]
 8008252:	f000 f86d 	bl	8008330 <_free_r>
 8008256:	e7f8      	b.n	800824a <_reclaim_reent+0x3e>
 8008258:	680e      	ldr	r6, [r1, #0]
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f868 	bl	8008330 <_free_r>
 8008260:	4631      	mov	r1, r6
 8008262:	e7e1      	b.n	8008228 <_reclaim_reent+0x1c>
 8008264:	6961      	ldr	r1, [r4, #20]
 8008266:	b111      	cbz	r1, 800826e <_reclaim_reent+0x62>
 8008268:	4620      	mov	r0, r4
 800826a:	f000 f861 	bl	8008330 <_free_r>
 800826e:	69e1      	ldr	r1, [r4, #28]
 8008270:	b111      	cbz	r1, 8008278 <_reclaim_reent+0x6c>
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f85c 	bl	8008330 <_free_r>
 8008278:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800827a:	b111      	cbz	r1, 8008282 <_reclaim_reent+0x76>
 800827c:	4620      	mov	r0, r4
 800827e:	f000 f857 	bl	8008330 <_free_r>
 8008282:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008284:	b111      	cbz	r1, 800828c <_reclaim_reent+0x80>
 8008286:	4620      	mov	r0, r4
 8008288:	f000 f852 	bl	8008330 <_free_r>
 800828c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800828e:	b111      	cbz	r1, 8008296 <_reclaim_reent+0x8a>
 8008290:	4620      	mov	r0, r4
 8008292:	f000 f84d 	bl	8008330 <_free_r>
 8008296:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008298:	b111      	cbz	r1, 80082a0 <_reclaim_reent+0x94>
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f848 	bl	8008330 <_free_r>
 80082a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80082a2:	b111      	cbz	r1, 80082aa <_reclaim_reent+0x9e>
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 f843 	bl	8008330 <_free_r>
 80082aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80082ac:	b111      	cbz	r1, 80082b4 <_reclaim_reent+0xa8>
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 f83e 	bl	8008330 <_free_r>
 80082b4:	6a23      	ldr	r3, [r4, #32]
 80082b6:	b11b      	cbz	r3, 80082c0 <_reclaim_reent+0xb4>
 80082b8:	4620      	mov	r0, r4
 80082ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082be:	4718      	bx	r3
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
 80082c2:	bf00      	nop
 80082c4:	20000010 	.word	0x20000010

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008300 <__libc_init_array+0x38>)
 80082cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008304 <__libc_init_array+0x3c>)
 80082ce:	1b64      	subs	r4, r4, r5
 80082d0:	10a4      	asrs	r4, r4, #2
 80082d2:	2600      	movs	r6, #0
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008308 <__libc_init_array+0x40>)
 80082da:	4c0c      	ldr	r4, [pc, #48]	@ (800830c <__libc_init_array+0x44>)
 80082dc:	f000 f87e 	bl	80083dc <_init>
 80082e0:	1b64      	subs	r4, r4, r5
 80082e2:	10a4      	asrs	r4, r4, #2
 80082e4:	2600      	movs	r6, #0
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	080084d8 	.word	0x080084d8
 8008304:	080084d8 	.word	0x080084d8
 8008308:	080084d8 	.word	0x080084d8
 800830c:	080084dc 	.word	0x080084dc

08008310 <__retarget_lock_acquire_recursive>:
 8008310:	4770      	bx	lr

08008312 <__retarget_lock_release_recursive>:
 8008312:	4770      	bx	lr

08008314 <memcpy>:
 8008314:	440a      	add	r2, r1
 8008316:	4291      	cmp	r1, r2
 8008318:	f100 33ff 	add.w	r3, r0, #4294967295
 800831c:	d100      	bne.n	8008320 <memcpy+0xc>
 800831e:	4770      	bx	lr
 8008320:	b510      	push	{r4, lr}
 8008322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832a:	4291      	cmp	r1, r2
 800832c:	d1f9      	bne.n	8008322 <memcpy+0xe>
 800832e:	bd10      	pop	{r4, pc}

08008330 <_free_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4605      	mov	r5, r0
 8008334:	2900      	cmp	r1, #0
 8008336:	d041      	beq.n	80083bc <_free_r+0x8c>
 8008338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800833c:	1f0c      	subs	r4, r1, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfb8      	it	lt
 8008342:	18e4      	addlt	r4, r4, r3
 8008344:	f000 f83e 	bl	80083c4 <__malloc_lock>
 8008348:	4a1d      	ldr	r2, [pc, #116]	@ (80083c0 <_free_r+0x90>)
 800834a:	6813      	ldr	r3, [r2, #0]
 800834c:	b933      	cbnz	r3, 800835c <_free_r+0x2c>
 800834e:	6063      	str	r3, [r4, #4]
 8008350:	6014      	str	r4, [r2, #0]
 8008352:	4628      	mov	r0, r5
 8008354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008358:	f000 b83a 	b.w	80083d0 <__malloc_unlock>
 800835c:	42a3      	cmp	r3, r4
 800835e:	d908      	bls.n	8008372 <_free_r+0x42>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	1821      	adds	r1, r4, r0
 8008364:	428b      	cmp	r3, r1
 8008366:	bf01      	itttt	eq
 8008368:	6819      	ldreq	r1, [r3, #0]
 800836a:	685b      	ldreq	r3, [r3, #4]
 800836c:	1809      	addeq	r1, r1, r0
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	e7ed      	b.n	800834e <_free_r+0x1e>
 8008372:	461a      	mov	r2, r3
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b10b      	cbz	r3, 800837c <_free_r+0x4c>
 8008378:	42a3      	cmp	r3, r4
 800837a:	d9fa      	bls.n	8008372 <_free_r+0x42>
 800837c:	6811      	ldr	r1, [r2, #0]
 800837e:	1850      	adds	r0, r2, r1
 8008380:	42a0      	cmp	r0, r4
 8008382:	d10b      	bne.n	800839c <_free_r+0x6c>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4401      	add	r1, r0
 8008388:	1850      	adds	r0, r2, r1
 800838a:	4283      	cmp	r3, r0
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	d1e0      	bne.n	8008352 <_free_r+0x22>
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	6053      	str	r3, [r2, #4]
 8008396:	4408      	add	r0, r1
 8008398:	6010      	str	r0, [r2, #0]
 800839a:	e7da      	b.n	8008352 <_free_r+0x22>
 800839c:	d902      	bls.n	80083a4 <_free_r+0x74>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d6      	b.n	8008352 <_free_r+0x22>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf04      	itt	eq
 80083ac:	6819      	ldreq	r1, [r3, #0]
 80083ae:	685b      	ldreq	r3, [r3, #4]
 80083b0:	6063      	str	r3, [r4, #4]
 80083b2:	bf04      	itt	eq
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	6054      	str	r4, [r2, #4]
 80083ba:	e7ca      	b.n	8008352 <_free_r+0x22>
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	20002464 	.word	0x20002464

080083c4 <__malloc_lock>:
 80083c4:	4801      	ldr	r0, [pc, #4]	@ (80083cc <__malloc_lock+0x8>)
 80083c6:	f7ff bfa3 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80083ca:	bf00      	nop
 80083cc:	20002460 	.word	0x20002460

080083d0 <__malloc_unlock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_unlock+0x8>)
 80083d2:	f7ff bf9e 	b.w	8008312 <__retarget_lock_release_recursive>
 80083d6:	bf00      	nop
 80083d8:	20002460 	.word	0x20002460

080083dc <_init>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr

080083e8 <_fini>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr
