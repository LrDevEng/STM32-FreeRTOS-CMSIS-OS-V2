
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800731c  0800731c  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800731c  0800731c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0000831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007320  08007320  00008320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007324  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00001ffc  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000205c  2000205c  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002298c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043dc  00000000  00000000  0002ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b0  00000000  00000000  00032f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002226e  00000000  00000000  00036fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7915  00000000  00000000  00059243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120b58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078c8  00000000  00000000  00120b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00128464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800725c 	.word	0x0800725c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800725c 	.word	0x0800725c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fce4 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82e 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9a4 	bl	8000578 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f892 	bl	8000358 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f910 	bl	8000458 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f97c 	bl	8000534 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8cc 	bl	80003d8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f948 	bl	80004d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f96e 	bl	8004524 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <main+0x50>)
 800024a:	2100      	movs	r1, #0
 800024c:	4809      	ldr	r0, [pc, #36]	@ (8000274 <main+0x54>)
 800024e:	f004 f9d1 	bl	80045f4 <osThreadNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a08      	ldr	r2, [pc, #32]	@ (8000278 <main+0x58>)
 8000256:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <main+0x5c>)
 800025a:	2100      	movs	r1, #0
 800025c:	4808      	ldr	r0, [pc, #32]	@ (8000280 <main+0x60>)
 800025e:	f004 f9c9 	bl	80045f4 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <main+0x64>)
 8000266:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000268:	f004 f990 	bl	800458c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <main+0x4c>
 8000270:	0800729c 	.word	0x0800729c
 8000274:	080006a9 	.word	0x080006a9
 8000278:	200004e4 	.word	0x200004e4
 800027c:	080072c0 	.word	0x080072c0
 8000280:	080006d5 	.word	0x080006d5
 8000284:	200004e8 	.word	0x200004e8

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09e      	sub	sp, #120	@ 0x78
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f006 fef0 	bl	800707c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	223c      	movs	r2, #60	@ 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f006 fee2 	bl	800707c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b8:	2303      	movs	r3, #3
 80002ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f9c6 	bl	8001674 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ee:	f000 fa1d 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000302:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f9be 	bl	8002690 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031a:	f000 fa07 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <SystemClock_Config+0xcc>)
 8000320:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800032e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000332:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fc26 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000342:	f000 f9f3 	bl	800072c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000346:	f002 fb11 	bl	800296c <HAL_RCC_EnableCSS>
}
 800034a:	bf00      	nop
 800034c:	3778      	adds	r7, #120	@ 0x78
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	00020062 	.word	0x00020062

08000358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_I2C1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	@ (80003d0 <MX_I2C1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000362:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000364:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <MX_I2C1_Init+0x7c>)
 8000366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036e:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	480e      	ldr	r0, [pc, #56]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000394:	f000 ff75 	bl	8001282 <HAL_I2C_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800039e:	f000 f9c5 	bl	800072c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4809      	ldr	r0, [pc, #36]	@ (80003cc <MX_I2C1_Init+0x74>)
 80003a6:	f001 f807 	bl	80013b8 <HAL_I2CEx_ConfigAnalogFilter>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b0:	f000 f9bc 	bl	800072c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b4:	2100      	movs	r1, #0
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_I2C1_Init+0x74>)
 80003b8:	f001 f849 	bl	800144e <HAL_I2CEx_ConfigDigitalFilter>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f9b3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000007c 	.word	0x2000007c
 80003d0:	40005400 	.word	0x40005400
 80003d4:	00201d2b 	.word	0x00201d2b

080003d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <MX_I2C2_Init+0x74>)
 80003de:	4a1c      	ldr	r2, [pc, #112]	@ (8000450 <MX_I2C2_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_I2C2_Init+0x74>)
 80003e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000454 <MX_I2C2_Init+0x7c>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003e8:	4b18      	ldr	r3, [pc, #96]	@ (800044c <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_I2C2_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_I2C2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000400:	4b12      	ldr	r3, [pc, #72]	@ (800044c <MX_I2C2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_I2C2_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_I2C2_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000412:	480e      	ldr	r0, [pc, #56]	@ (800044c <MX_I2C2_Init+0x74>)
 8000414:	f000 ff35 	bl	8001282 <HAL_I2C_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800041e:	f000 f985 	bl	800072c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4809      	ldr	r0, [pc, #36]	@ (800044c <MX_I2C2_Init+0x74>)
 8000426:	f000 ffc7 	bl	80013b8 <HAL_I2CEx_ConfigAnalogFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000430:	f000 f97c 	bl	800072c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000434:	2100      	movs	r1, #0
 8000436:	4805      	ldr	r0, [pc, #20]	@ (800044c <MX_I2C2_Init+0x74>)
 8000438:	f001 f809 	bl	800144e <HAL_I2CEx_ConfigDigitalFilter>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f973 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000d0 	.word	0x200000d0
 8000450:	40005800 	.word	0x40005800
 8000454:	00201d2b 	.word	0x00201d2b

08000458 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <MX_SPI1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <MX_SPI1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000464:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000470:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000472:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_SPI1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047e:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800048a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_SPI1_Init+0x74>)
 800048e:	2208      	movs	r2, #8
 8000490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004b8:	f002 fd14 	bl	8002ee4 <HAL_SPI_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f933 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000124 	.word	0x20000124
 80004d0:	40013000 	.word	0x40013000

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004da:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <MX_USART2_UART_Init+0x5c>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b11      	ldr	r3, [pc, #68]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000518:	f003 f83e 	bl	8003598 <HAL_UART_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000522:	f000 f903 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000188 	.word	0x20000188
 8000530:	40004400 	.word	0x40004400

08000534 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <MX_USB_PCD_Init+0x40>)
 800053c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000540:	2208      	movs	r2, #8
 8000542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000546:	2202      	movs	r2, #2
 8000548:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800054c:	2202      	movs	r2, #2
 800054e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000558:	2200      	movs	r2, #0
 800055a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800055e:	f000 ffc2 	bl	80014e6 <HAL_PCD_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000568:	f000 f8e0 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000210 	.word	0x20000210
 8000574:	40005c00 	.word	0x40005c00

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058e:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <MX_GPIO_Init+0x108>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x108>)
 8000594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <MX_GPIO_Init+0x108>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b36      	ldr	r3, [pc, #216]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a35      	ldr	r2, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a23      	ldr	r2, [pc, #140]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000606:	2200      	movs	r2, #0
 8000608:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800060c:	481d      	ldr	r0, [pc, #116]	@ (8000684 <MX_GPIO_Init+0x10c>)
 800060e:	f000 fdfd 	bl	800120c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000612:	2336      	movs	r3, #54	@ 0x36
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000616:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4817      	ldr	r0, [pc, #92]	@ (8000684 <MX_GPIO_Init+0x10c>)
 8000628:	f000 fc76 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800062c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000630:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <MX_GPIO_Init+0x10c>)
 8000646:	f000 fc67 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fc59 	bl	8000f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2105      	movs	r1, #5
 800066a:	2006      	movs	r0, #6
 800066c:	f000 fbae 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000670:	2006      	movs	r0, #6
 8000672:	f000 fbc7 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	48001000 	.word	0x48001000

08000688 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd9b 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 800069a:	200a      	movs	r0, #10
 800069c:	f7ff fd98 	bl	80001d0 <ITM_SendChar>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b6:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <StartTask1+0x28>)
 80006b8:	f000 fda8 	bl	800120c <HAL_GPIO_WritePin>
	Task_action('1');
 80006bc:	2031      	movs	r0, #49	@ 0x31
 80006be:	f7ff ffe3 	bl	8000688 <Task_action>
    osDelay(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c6:	f004 f83f 	bl	8004748 <osDelay>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 80006ca:	bf00      	nop
 80006cc:	e7f0      	b.n	80006b0 <StartTask1+0x8>
 80006ce:	bf00      	nop
 80006d0:	48001000 	.word	0x48001000

080006d4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006e0:	f004 f832 	bl	8004748 <osDelay>
    HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <StartTask2+0x30>)
 80006ec:	f000 fd8e 	bl	800120c <HAL_GPIO_WritePin>
	Task_action('2');
 80006f0:	2032      	movs	r0, #50	@ 0x32
 80006f2:	f7ff ffc9 	bl	8000688 <Task_action>
	osDelay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006fa:	f004 f825 	bl	8004748 <osDelay>
	osDelay(500);
 80006fe:	bf00      	nop
 8000700:	e7ec      	b.n	80006dc <StartTask2+0x8>
 8000702:	bf00      	nop
 8000704:	48001000 	.word	0x48001000

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800071a:	f000 fa7f 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40001000 	.word	0x40001000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_MspInit+0x4c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <HAL_MspInit+0x4c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <HAL_MspInit+0x4c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f000 fb29 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000864 <HAL_I2C_MspInit+0xdc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d128      	bne.n	80007fc <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007c2:	23c0      	movs	r3, #192	@ 0xc0
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d2:	2304      	movs	r3, #4
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4823      	ldr	r0, [pc, #140]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007de:	f000 fb9b 	bl	8000f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a20      	ldr	r2, [pc, #128]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007fa:	e02e      	b.n	800085a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <HAL_I2C_MspInit+0xe8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d129      	bne.n	800085a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800081e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000824:	2312      	movs	r3, #18
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000830:	2304      	movs	r3, #4
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083e:	f000 fb6b 	bl	8000f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	@ 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40005400 	.word	0x40005400
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	40005800 	.word	0x40005800

08000874 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_SPI_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 800089c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_SPI_MspInit+0x80>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008c6:	23e0      	movs	r3, #224	@ 0xe0
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d6:	2305      	movs	r3, #5
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f000 fb18 	bl	8000f18 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <HAL_UART_MspInit+0x8c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d130      	bne.n	800097c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_UART_MspInit+0x90>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 fad6 	bl	8000f18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	2026      	movs	r0, #38	@ 0x26
 8000972:	f000 fa2b 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000976:	2026      	movs	r0, #38	@ 0x26
 8000978:	f000 fa44 	bl	8000e04 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	@ 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a18      	ldr	r2, [pc, #96]	@ (8000a0c <HAL_PCD_MspInit+0x80>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d129      	bne.n	8000a02 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009d8:	230e      	movs	r3, #14
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e6:	f000 fa97 	bl	8000f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_PCD_MspInit+0x84>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	@ 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40005c00 	.word	0x40005c00
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a24:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	61d3      	str	r3, [r2, #28]
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 0210 	add.w	r2, r7, #16
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f850 	bl	8002aec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a56:	f002 f805 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8000a5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a5e:	f002 f801 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8000a62:	4603      	mov	r3, r0
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_InitTick+0xe4>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	0c9b      	lsrs	r3, r3, #18
 8000a72:	3b01      	subs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_InitTick+0xec>)
 8000a7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a84:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a9e:	f002 facc 	bl	800303a <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11b      	bne.n	8000ae8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <HAL_InitTick+0xe8>)
 8000ab2:	f002 fb23 	bl	80030fc <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d111      	bne.n	8000ae8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ac4:	2036      	movs	r0, #54	@ 0x36
 8000ac6:	f000 f99d 	bl	8000e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d808      	bhi.n	8000ae2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2036      	movs	r0, #54	@ 0x36
 8000ad6:	f000 f979 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_InitTick+0xf0>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e002      	b.n	8000ae8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	200004ec 	.word	0x200004ec
 8000b00:	40001000 	.word	0x40001000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b0c:	f002 f820 	bl	8002b50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x8>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 fb78 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	f002 fd6d 	bl	8003634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000188 	.word	0x20000188

08000b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <TIM6_DAC_IRQHandler+0x10>)
 8000b6a:	f002 fb31 	bl	80031d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200004ec 	.word	0x200004ec

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f006 fabd 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fb27 	bl	8000220 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000be0:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8000be4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be8:	2000205c 	.word	0x2000205c

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_Init+0x28>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_Init+0x28>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d8 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff ff04 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fd94 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000538 	.word	0x20000538

08000c44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000538 	.word	0x20000538

08000c5c <__NVIC_SetPriorityGrouping>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	@ (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	@ 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e02e      	b.n	8000e90 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d008      	beq.n	8000e4e <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2204      	movs	r2, #4
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e020      	b.n	8000e90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 020e 	bic.w	r2, r2, #14
 8000e5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d005      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e027      	b.n	8000f0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020e 	bic.w	r2, r2, #14
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	4798      	blx	r3
    }
  }
  return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e154      	b.n	80011d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8146 	beq.w	80011cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 0201 	and.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	6939      	ldr	r1, [r7, #16]
 8001046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0203 	and.w	r2, r3, #3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a0 	beq.w	80011cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b58      	ldr	r3, [pc, #352]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a57      	ldr	r2, [pc, #348]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a4:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <HAL_GPIO_Init+0x2dc>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ce:	d019      	beq.n	8001104 <HAL_GPIO_Init+0x1ec>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_GPIO_Init+0x2e0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d013      	beq.n	8001100 <HAL_GPIO_Init+0x1e8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a48      	ldr	r2, [pc, #288]	@ (80011fc <HAL_GPIO_Init+0x2e4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_Init+0x1e4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a47      	ldr	r2, [pc, #284]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x1e0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a46      	ldr	r2, [pc, #280]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_Init+0x1dc>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f4:	2305      	movs	r3, #5
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001104:	2300      	movs	r3, #0
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001116:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_GPIO_Init+0x2dc>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001148:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114e:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001172:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800119c:	4a1a      	ldr	r2, [pc, #104]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f aea3 	bne.w	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	48001000 	.word	0x48001000
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e002      	b.n	8001230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e08d      	b.n	80013b0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fa6d 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2224      	movs	r2, #36	@ 0x24
 80012b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e006      	b.n	800130a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d108      	bne.n	8001324 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	e007      	b.n	8001334 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001332:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001346:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69d9      	ldr	r1, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2220      	movs	r2, #32
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	d138      	bne.n	8001440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013d8:	2302      	movs	r3, #2
 80013da:	e032      	b.n	8001442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	@ 0x24
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800140a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001440:	2302      	movs	r3, #2
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b20      	cmp	r3, #32
 8001462:	d139      	bne.n	80014d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800146e:	2302      	movs	r3, #2
 8001470:	e033      	b.n	80014da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2224      	movs	r2, #36	@ 0x24
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e000      	b.n	80014da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014d8:	2302      	movs	r3, #2
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0b9      	b.n	800166c <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d106      	bne.n	8001512 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fa3d 	bl	800098c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 ffc7 	bl	80044b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e03e      	b.n	80015a8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3311      	adds	r3, #17
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	3310      	adds	r3, #16
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3313      	adds	r3, #19
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3320      	adds	r3, #32
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	3324      	adds	r3, #36	@ 0x24
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	3301      	adds	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3bb      	bcc.n	800152a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e044      	b.n	8001642 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3b5      	bcc.n	80015b8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001658:	f002 ff46 	bl	80044e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800167a:	af00      	add	r7, sp, #0
 800167c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001684:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f000 bff4 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 816d 	beq.w	800198a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016b0:	4bb4      	ldr	r3, [pc, #720]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d157      	bne.n	8001778 <HAL_RCC_OscConfig+0x104>
 80016c8:	4bae      	ldr	r3, [pc, #696]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d4:	d150      	bne.n	8001778 <HAL_RCC_OscConfig+0x104>
 80016d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016f6:	d802      	bhi.n	80016fe <HAL_RCC_OscConfig+0x8a>
 80016f8:	4ba2      	ldr	r3, [pc, #648]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0xb6>
 80016fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001702:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001716:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800171a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001726:	4b97      	ldr	r3, [pc, #604]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800172e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001732:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800173e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8114 	beq.w	8001988 <HAL_RCC_OscConfig+0x314>
 8001760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 810b 	bne.w	8001988 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f000 bf85 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x124>
 800178a:	4b7e      	ldr	r3, [pc, #504]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7d      	ldr	r2, [pc, #500]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e036      	b.n	8001806 <HAL_RCC_OscConfig+0x192>
 8001798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x14e>
 80017a8:	4b76      	ldr	r3, [pc, #472]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a75      	ldr	r2, [pc, #468]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a72      	ldr	r2, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e021      	b.n	8001806 <HAL_RCC_OscConfig+0x192>
 80017c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d2:	d10c      	bne.n	80017ee <HAL_RCC_OscConfig+0x17a>
 80017d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e00b      	b.n	8001806 <HAL_RCC_OscConfig+0x192>
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a64      	ldr	r2, [pc, #400]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a61      	ldr	r2, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 8001800:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001804:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001806:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	f023 020f 	bic.w	r2, r3, #15
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	495a      	ldr	r1, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 800181c:	4313      	orrs	r3, r2
 800181e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d054      	beq.n	80018da <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa08 	bl	8000c44 <HAL_GetTick>
 8001834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff fa03 	bl	8000c44 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d902      	bls.n	8001850 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	f000 bf19 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 8001850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001854:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001864:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001870:	d802      	bhi.n	8001878 <HAL_RCC_OscConfig+0x204>
 8001872:	4b44      	ldr	r3, [pc, #272]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	e015      	b.n	80018a4 <HAL_RCC_OscConfig+0x230>
 8001878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800188c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001890:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001894:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80018a0:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80018ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80018b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0b0      	beq.n	800183a <HAL_RCC_OscConfig+0x1c6>
 80018d8:	e057      	b.n	800198a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f9b3 	bl	8000c44 <HAL_GetTick>
 80018de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f9ae 	bl	8000c44 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	@ 0x64
 80018f2:	d902      	bls.n	80018fa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f000 bec4 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 80018fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800190e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b3f      	cmp	r3, #63	@ 0x3f
 800191a:	d802      	bhi.n	8001922 <HAL_RCC_OscConfig+0x2ae>
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x2da>
 8001922:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001926:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800193a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800193e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x310>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001952:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001956:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001962:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1b0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x270>
 8001982:	e002      	b.n	800198a <HAL_RCC_OscConfig+0x316>
 8001984:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 816c 	beq.w	8001c78 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a0:	4bcc      	ldr	r3, [pc, #816]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019ac:	4bc9      	ldr	r3, [pc, #804]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d16d      	bne.n	8001a94 <HAL_RCC_OscConfig+0x420>
 80019b8:	4bc6      	ldr	r3, [pc, #792]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d167      	bne.n	8001a94 <HAL_RCC_OscConfig+0x420>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80019d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e2:	d802      	bhi.n	80019ea <HAL_RCC_OscConfig+0x376>
 80019e4:	4bbb      	ldr	r3, [pc, #748]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e013      	b.n	8001a12 <HAL_RCC_OscConfig+0x39e>
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001a0e:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	2202      	movs	r2, #2
 8001a14:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001a18:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a1c:	fa92 f2a2 	rbit	r2, r2
 8001a20:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001a24:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00a      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3e6>
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d002      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f000 be14 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	21f8      	movs	r1, #248	@ 0xf8
 8001a70:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a78:	fa91 f1a1 	rbit	r1, r1
 8001a7c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a80:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a84:	fab1 f181 	clz	r1, r1
 8001a88:	b2c9      	uxtb	r1, r1
 8001a8a:	408b      	lsls	r3, r1
 8001a8c:	4991      	ldr	r1, [pc, #580]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e0f1      	b.n	8001c78 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8083 	beq.w	8001bac <HAL_RCC_OscConfig+0x538>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001ab8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ac6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f8b7 	bl	8000c44 <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff f8b2 	bl	8000c44 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d902      	bls.n	8001af2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 bdc8 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001b04:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b10:	d802      	bhi.n	8001b18 <HAL_RCC_OscConfig+0x4a4>
 8001b12:	4b70      	ldr	r3, [pc, #448]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e013      	b.n	8001b40 <HAL_RCC_OscConfig+0x4cc>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b30:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001b3c:	4b65      	ldr	r3, [pc, #404]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	2202      	movs	r2, #2
 8001b42:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001b46:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b4a:	fa92 f2a2 	rbit	r2, r2
 8001b4e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001b52:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001b56:	fab2 f282 	clz	r2, r2
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f042 0220 	orr.w	r2, r2, #32
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f002 021f 	and.w	r2, r2, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0b4      	beq.n	8001adc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b58      	ldr	r3, [pc, #352]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	21f8      	movs	r1, #248	@ 0xf8
 8001b88:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b90:	fa91 f1a1 	rbit	r1, r1
 8001b94:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001b98:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001b9c:	fab1 f181 	clz	r1, r1
 8001ba0:	b2c9      	uxtb	r1, r1
 8001ba2:	408b      	lsls	r3, r1
 8001ba4:	494b      	ldr	r1, [pc, #300]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
 8001baa:	e065      	b.n	8001c78 <HAL_RCC_OscConfig+0x604>
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f834 	bl	8000c44 <HAL_GetTick>
 8001bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff f82f 	bl	8000c44 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d902      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	f000 bd45 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c16:	d802      	bhi.n	8001c1e <HAL_RCC_OscConfig+0x5aa>
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	e013      	b.n	8001c46 <HAL_RCC_OscConfig+0x5d2>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c30:	2302      	movs	r3, #2
 8001c32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <HAL_RCC_OscConfig+0x660>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	2202      	movs	r2, #2
 8001c48:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001c4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c50:	fa92 f2a2 	rbit	r2, r2
 8001c54:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001c58:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1b4      	bne.n	8001be2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8115 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d07e      	beq.n	8001d9c <HAL_RCC_OscConfig+0x728>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_OscConfig+0x664>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ffbc 	bl	8000c44 <HAL_GetTick>
 8001ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd0:	e00f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x67e>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7fe ffb2 	bl	8000c44 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d902      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	f000 bcc8 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	4bb0      	ldr	r3, [pc, #704]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d58:	2102      	movs	r1, #2
 8001d5a:	6019      	str	r1, [r3, #0]
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f1a3 	rbit	r1, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d72:	6019      	str	r1, [r3, #0]
  return result;
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0a0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x668>
 8001d9a:	e08d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x844>
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b90      	ldr	r3, [pc, #576]	@ (8002014 <HAL_RCC_OscConfig+0x9a0>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2300      	movs	r3, #0
 8001ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7fe ff31 	bl	8000c44 <HAL_GetTick>
 8001de2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de8:	f7fe ff2c 	bl	8000c44 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d902      	bls.n	8001dfe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	f000 bc42 	b.w	8002682 <HAL_RCC_OscConfig+0x100e>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e06:	2202      	movs	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6a:	4b69      	ldr	r3, [pc, #420]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e76:	2102      	movs	r1, #2
 8001e78:	6019      	str	r1, [r3, #0]
 8001e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f1a3 	rbit	r1, r3
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e90:	6019      	str	r1, [r3, #0]
  return result;
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d197      	bne.n	8001de8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 819e 	beq.w	800220a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d116      	bne.n	8001f0e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b42      	ldr	r3, [pc, #264]	@ (8002018 <HAL_RCC_OscConfig+0x9a4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <HAL_RCC_OscConfig+0x9a4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002018 <HAL_RCC_OscConfig+0x9a4>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7fe fe8d 	bl	8000c44 <HAL_GetTick>
 8001f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe fe88 	bl	8000c44 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	@ 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e39e      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <HAL_RCC_OscConfig+0x9a4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ef      	beq.n	8001f30 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x8fa>
 8001f60:	4b2b      	ldr	r3, [pc, #172]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a2a      	ldr	r2, [pc, #168]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e035      	b.n	8001fda <HAL_RCC_OscConfig+0x966>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x924>
 8001f7e:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a20      	ldr	r2, [pc, #128]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	e020      	b.n	8001fda <HAL_RCC_OscConfig+0x966>
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x94e>
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x966>
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <HAL_RCC_OscConfig+0x99c>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fe2a 	bl	8000c44 <HAL_GetTick>
 8001ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e012      	b.n	800201c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fe25 	bl	8000c44 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d908      	bls.n	800201c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e339      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	10908120 	.word	0x10908120
 8002018:	40007000 	.word	0x40007000
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f2a3 	rbit	r2, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002062:	601a      	str	r2, [r3, #0]
  return result;
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800206c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0xa10>
 800207e:	4b98      	ldr	r3, [pc, #608]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0xa38>
 8002084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002088:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800208c:	2202      	movs	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b8d      	ldr	r3, [pc, #564]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020b4:	2102      	movs	r1, #2
 80020b6:	6011      	str	r1, [r2, #0]
 80020b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	fa92 f1a2 	rbit	r1, r2
 80020c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020ce:	6011      	str	r1, [r2, #0]
  return result;
 80020d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f43f af7f 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x982>
 80020f8:	e07d      	b.n	80021f6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fda3 	bl	8000c44 <HAL_GetTick>
 80020fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fd9e 	bl	8000c44 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2b2      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002150:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002162:	601a      	str	r2, [r3, #0]
  return result;
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800216c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_RCC_OscConfig+0xb10>
 800217e:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0xb38>
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021b4:	2102      	movs	r1, #2
 80021b6:	6011      	str	r1, [r2, #0]
 80021b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021bc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	fa92 f1a2 	rbit	r1, r2
 80021c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021ce:	6011      	str	r1, [r2, #0]
  return result;
 80021d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f002 021f 	and.w	r2, r2, #31
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d186      	bne.n	8002104 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a37      	ldr	r2, [pc, #220]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8232 	beq.w	8002680 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	f000 8201 	beq.w	800262c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 8157 	bne.w	80024ea <HAL_RCC_OscConfig+0xe76>
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002260:	601a      	str	r2, [r3, #0]
  return result;
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800226a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002276:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	461a      	mov	r2, r3
 800227e:	2300      	movs	r3, #0
 8002280:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fcdf 	bl	8000c44 <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e009      	b.n	80022a0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fcda 	bl	8000c44 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1f0      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d8:	d804      	bhi.n	80022e4 <HAL_RCC_OscConfig+0xc70>
 80022da:	4b01      	ldr	r3, [pc, #4]	@ (80022e0 <HAL_RCC_OscConfig+0xc6c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e029      	b.n	8002334 <HAL_RCC_OscConfig+0xcc0>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002312:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4bc3      	ldr	r3, [pc, #780]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002338:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800233c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002340:	6011      	str	r1, [r2, #0]
 8002342:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002346:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fa92 f1a2 	rbit	r1, r2
 8002350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002354:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002358:	6011      	str	r1, [r2, #0]
  return result;
 800235a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800235e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0220 	orr.w	r2, r2, #32
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d185      	bne.n	800228c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4baf      	ldr	r3, [pc, #700]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	49a7      	ldr	r1, [pc, #668]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	fa93 f2a3 	rbit	r2, r3
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023cc:	601a      	str	r2, [r3, #0]
  return result;
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fc29 	bl	8000c44 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fc24 	bl	8000c44 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e13a      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002430:	601a      	str	r2, [r3, #0]
  return result;
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800243a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b3f      	cmp	r3, #63	@ 0x3f
 8002444:	d802      	bhi.n	800244c <HAL_RCC_OscConfig+0xdd8>
 8002446:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	e027      	b.n	800249c <HAL_RCC_OscConfig+0xe28>
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002454:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800247a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	4b69      	ldr	r3, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fa92 f1a2 	rbit	r1, r2
 80024b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024c0:	6011      	str	r1, [r2, #0]
  return result;
 80024c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f002 021f 	and.w	r2, r2, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d087      	beq.n	80023f8 <HAL_RCC_OscConfig+0xd84>
 80024e8:	e0ca      	b.n	8002680 <HAL_RCC_OscConfig+0x100c>
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80024f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800250e:	601a      	str	r2, [r3, #0]
  return result;
 8002510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002514:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002518:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002524:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fb88 	bl	8000c44 <HAL_GetTick>
 8002534:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e009      	b.n	800254e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fb83 	bl	8000c44 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e099      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002556:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800257c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b3f      	cmp	r3, #63	@ 0x3f
 8002586:	d802      	bhi.n	800258e <HAL_RCC_OscConfig+0xf1a>
 8002588:	4b2d      	ldr	r3, [pc, #180]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	e027      	b.n	80025de <HAL_RCC_OscConfig+0xf6a>
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002596:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_RCC_OscConfig+0xfcc>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80025e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025ea:	6011      	str	r1, [r2, #0]
 80025ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	fa92 f1a2 	rbit	r1, r2
 80025fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025fe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002602:	6011      	str	r1, [r2, #0]
  return result;
 8002604:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002608:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	fab2 f282 	clz	r2, r2
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f042 0220 	orr.w	r2, r2, #32
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f002 021f 	and.w	r2, r2, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d187      	bne.n	800253a <HAL_RCC_OscConfig+0xec6>
 800262a:	e029      	b.n	8002680 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d103      	bne.n	8002644 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e020      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
 8002640:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_RCC_OscConfig+0x1018>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800264c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002664:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002668:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b09e      	sub	sp, #120	@ 0x78
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e154      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b89      	ldr	r3, [pc, #548]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d910      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b86      	ldr	r3, [pc, #536]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4984      	ldr	r1, [pc, #528]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b82      	ldr	r3, [pc, #520]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e13c      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b7b      	ldr	r3, [pc, #492]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4978      	ldr	r1, [pc, #480]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80cd 	beq.w	800289e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d137      	bne.n	800277c <HAL_RCC_ClockConfig+0xec>
 800270c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002710:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800271a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b3f      	cmp	r3, #63	@ 0x3f
 8002724:	d802      	bhi.n	800272c <HAL_RCC_ClockConfig+0x9c>
 8002726:	4b6b      	ldr	r3, [pc, #428]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e00f      	b.n	800274c <HAL_RCC_ClockConfig+0xbc>
 800272c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002730:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	667b      	str	r3, [r7, #100]	@ 0x64
 800273a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002748:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002750:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800275a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d171      	bne.n	800285c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0ea      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d137      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x164>
 8002784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002788:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b3f      	cmp	r3, #63	@ 0x3f
 800279c:	d802      	bhi.n	80027a4 <HAL_RCC_ClockConfig+0x114>
 800279e:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x134>
 80027a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80027b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027c0:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80027ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80027d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d135      	bne.n	800285c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0ae      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
 80027f4:	2302      	movs	r3, #2
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b3f      	cmp	r3, #63	@ 0x3f
 800280a:	d802      	bhi.n	8002812 <HAL_RCC_ClockConfig+0x182>
 800280c:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	e00d      	b.n	800282e <HAL_RCC_ClockConfig+0x19e>
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
 800281e:	2302      	movs	r3, #2
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	2202      	movs	r2, #2
 8002830:	61ba      	str	r2, [r7, #24]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	617a      	str	r2, [r7, #20]
  return result;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e07a      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 0203 	bic.w	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	491a      	ldr	r1, [pc, #104]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286e:	f7fe f9e9 	bl	8000c44 <HAL_GetTick>
 8002872:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002874:	e00a      	b.n	800288c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002876:	f7fe f9e5 	bl	8000c44 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e062      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_ClockConfig+0x244>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 020c 	and.w	r2, r3, #12
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	429a      	cmp	r2, r3
 800289c:	d1eb      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d215      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 0207 	bic.w	r2, r3, #7
 80028b4:	4906      	ldr	r1, [pc, #24]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCC_ClockConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d006      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_RCC_ClockConfig+0x2c2>
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <HAL_RCC_ClockConfig+0x2cc>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	491a      	ldr	r1, [pc, #104]	@ (800295c <HAL_RCC_ClockConfig+0x2cc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x2cc>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4912      	ldr	r1, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x2cc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002916:	f000 f845 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800291a:	4601      	mov	r1, r0
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <HAL_RCC_ClockConfig+0x2cc>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002924:	22f0      	movs	r2, #240	@ 0xf0
 8002926:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	fa92 f2a2 	rbit	r2, r2
 800292e:	60fa      	str	r2, [r7, #12]
  return result;
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	40d3      	lsrs	r3, r2
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x2d0>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	fa21 f303 	lsr.w	r3, r1, r3
 8002942:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <HAL_RCC_ClockConfig+0x2d4>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_RCC_ClockConfig+0x2d8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f862 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3778      	adds	r7, #120	@ 0x78
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	080072e4 	.word	0x080072e4
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002976:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	603b      	str	r3, [r7, #0]
  return result;
 8002980:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800298c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	461a      	mov	r2, r3
 8002994:	2301      	movs	r3, #1
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x36>
 80029d2:	e026      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	e026      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a00:	4a0e      	ldr	r2, [pc, #56]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e004      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
      break;
 8002a20:	e002      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a24:	613b      	str	r3, [r7, #16]
      break;
 8002a26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a28:	693b      	ldr	r3, [r7, #16]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	007a1200 	.word	0x007a1200
 8002a40:	080072fc 	.word	0x080072fc
 8002a44:	0800730c 	.word	0x0800730c
 8002a48:	003d0900 	.word	0x003d0900

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a6a:	f7ff ffef 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a78:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	603a      	str	r2, [r7, #0]
  return result;
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	40d3      	lsrs	r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	080072f4 	.word	0x080072f4

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002aae:	f7ff ffcd 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002abc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ac0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	603a      	str	r2, [r7, #0]
  return result;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	fab2 f282 	clz	r2, r2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	40d3      	lsrs	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	080072f4 	.word	0x080072f4

08002aec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	220f      	movs	r2, #15
 8002afa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b08:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b2e:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <HAL_RCC_GetClockConfig+0x60>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0207 	and.w	r2, r3, #7
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40022000 	.word	0x40022000

08002b50 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5c:	2b80      	cmp	r3, #128	@ 0x80
 8002b5e:	d104      	bne.n	8002b6a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002b60:	f000 f80a 	bl	8002b78 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002b66:	2280      	movs	r2, #128	@ 0x80
 8002b68:	701a      	strb	r2, [r3, #0]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	4002100a 	.word	0x4002100a

08002b78 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b092      	sub	sp, #72	@ 0x48
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80d2 	beq.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a40      	ldr	r2, [pc, #256]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe f829 	bl	8000c44 <HAL_GetTick>
 8002bf2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe f825 	bl	8000c44 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	@ 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e167      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8082 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d07a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c86:	4a17      	ldr	r2, [pc, #92]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d049      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fd ffd5 	bl	8000c44 <HAL_GetTick>
 8002c9a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd ffd1 	bl	8000c44 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e111      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002cde:	4b01      	ldr	r3, [pc, #4]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	e00d      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	10908100 	.word	0x10908100
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	4b78      	ldr	r3, [pc, #480]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2202      	movs	r2, #2
 8002d02:	613a      	str	r2, [r7, #16]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	fa92 f2a2 	rbit	r2, r2
 8002d0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0b9      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	496a      	ldr	r1, [pc, #424]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4a65      	ldr	r2, [pc, #404]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5c:	4b60      	ldr	r3, [pc, #384]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	495d      	ldr	r1, [pc, #372]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7a:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4956      	ldr	r1, [pc, #344]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d98:	4b51      	ldr	r3, [pc, #324]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	494e      	ldr	r1, [pc, #312]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f023 0210 	bic.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4947      	ldr	r1, [pc, #284]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dd4:	4b42      	ldr	r3, [pc, #264]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	493f      	ldr	r1, [pc, #252]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f023 0220 	bic.w	r2, r3, #32
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4938      	ldr	r1, [pc, #224]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4930      	ldr	r1, [pc, #192]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	4929      	ldr	r1, [pc, #164]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4921      	ldr	r1, [pc, #132]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	491a      	ldr	r1, [pc, #104]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	4912      	ldr	r1, [pc, #72]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	490b      	ldr	r1, [pc, #44]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	4903      	ldr	r1, [pc, #12]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3748      	adds	r7, #72	@ 0x48
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e09d      	b.n	8003032 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fc9c 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f5c:	d902      	bls.n	8002f64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e002      	b.n	8002f6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f72:	d007      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0204 	and.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e049      	b.n	80030e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f841 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f000 f9d3 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04a      	b.n	80031aa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x6c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313e:	d013      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x6c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x6c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x6c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1a      	ldr	r2, [pc, #104]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x6c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a19      	ldr	r2, [pc, #100]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d115      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d015      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0xaa>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d011      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e008      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	00010007 	.word	0x00010007

080031d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0202 	mvn.w	r2, #2
 8003204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8e4 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8d6 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8e7 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0204 	mvn.w	r2, #4
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8be 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8b0 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8c1 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d020      	beq.n	80032cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0208 	mvn.w	r2, #8
 800329c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f898 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f88a 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f89b 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0210 	mvn.w	r2, #16
 80032e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2208      	movs	r2, #8
 80032ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f872 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f864 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f875 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd f9e6 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f908 	bl	8003570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f900 	bl	8003584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f834 	bl	8003410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0220 	mvn.w	r2, #32
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8c8 	bl	800355c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a42      	ldr	r2, [pc, #264]	@ (8003540 <TIM_Base_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3f      	ldr	r2, [pc, #252]	@ (8003544 <TIM_Base_SetConfig+0x120>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3e      	ldr	r2, [pc, #248]	@ (8003548 <TIM_Base_SetConfig+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3d      	ldr	r2, [pc, #244]	@ (800354c <TIM_Base_SetConfig+0x128>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a33      	ldr	r2, [pc, #204]	@ (8003540 <TIM_Base_SetConfig+0x11c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01b      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347c:	d017      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a30      	ldr	r2, [pc, #192]	@ (8003544 <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2f      	ldr	r2, [pc, #188]	@ (8003548 <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00f      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2e      	ldr	r2, [pc, #184]	@ (800354c <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2d      	ldr	r2, [pc, #180]	@ (8003550 <TIM_Base_SetConfig+0x12c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a16      	ldr	r2, [pc, #88]	@ (8003540 <TIM_Base_SetConfig+0x11c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00f      	beq.n	800350c <TIM_Base_SetConfig+0xe8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a17      	ldr	r2, [pc, #92]	@ (800354c <TIM_Base_SetConfig+0x128>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0xe8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <TIM_Base_SetConfig+0x12c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0xe8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <TIM_Base_SetConfig+0x130>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0xe8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_Base_SetConfig+0x134>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d103      	bne.n	8003514 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
  }
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40013400 	.word	0x40013400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800

0800355c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd f99c 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	@ 0x24
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fd02 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fb2b 	bl	8003c40 <UART_SetConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e01b      	b.n	800362c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fd81 	bl	800412c <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b0ba      	sub	sp, #232	@ 0xe8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800365a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800365e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003662:	4013      	ands	r3, r2
 8003664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d115      	bne.n	800369c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00f      	beq.n	800369c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 82ab 	beq.w	8003be8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
      }
      return;
 800369a:	e2a5      	b.n	8003be8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800369c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8117 	beq.w	80038d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036b6:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_UART_IRQHandler+0x298>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 810a 	beq.w	80038d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d011      	beq.n	80036f0 <HAL_UART_IRQHandler+0xbc>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d011      	beq.n	8003720 <HAL_UART_IRQHandler+0xec>
 80036fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_UART_IRQHandler+0x11c>
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2204      	movs	r2, #4
 800373e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003782:	f043 0208 	orr.w	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <HAL_UART_IRQHandler+0x18a>
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800379c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8211 	beq.w	8003bec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800380a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800380e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04f      	beq.n	80038b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd9d 	bl	8004356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003826:	2b40      	cmp	r3, #64	@ 0x40
 8003828:	d141      	bne.n	80038ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800385a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800386e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1d9      	bne.n	800382a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	2b00      	cmp	r3, #0
 800387c:	d013      	beq.n	80038a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003882:	4a13      	ldr	r2, [pc, #76]	@ (80038d0 <HAL_UART_IRQHandler+0x29c>)
 8003884:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fb06 	bl	8000e9c <HAL_DMA_Abort_IT>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d017      	beq.n	80038c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038a0:	4610      	mov	r0, r2
 80038a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00f      	b.n	80038c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9b4 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e00b      	b.n	80038c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9b0 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	e007      	b.n	80038c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9ac 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038c4:	e192      	b.n	8003bec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c6:	bf00      	nop
    return;
 80038c8:	e190      	b.n	8003bec <HAL_UART_IRQHandler+0x5b8>
 80038ca:	bf00      	nop
 80038cc:	04000120 	.word	0x04000120
 80038d0:	0800441f 	.word	0x0800441f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 814b 	bne.w	8003b74 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8144 	beq.w	8003b74 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 813d 	beq.w	8003b74 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2210      	movs	r2, #16
 8003900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	f040 80b5 	bne.w	8003a7c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800391e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8164 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800392e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003932:	429a      	cmp	r2, r3
 8003934:	f080 815c 	bcs.w	8003bf0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800393e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b20      	cmp	r3, #32
 800394a:	f000 8086 	beq.w	8003a5a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800396a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003978:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800397c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003984:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1da      	bne.n	800394e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e1      	bne.n	8003998 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e3      	bne.n	80039d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e4      	bne.n	8003a1a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd f9e3 	bl	8000e20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8d7 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a7a:	e0b9      	b.n	8003bf0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80ab 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a6 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003acc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e4      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	623b      	str	r3, [r7, #32]
   return(result);
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e3      	bne.n	8003ade <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	617b      	str	r3, [r7, #20]
   return(result);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e4      	bne.n	8003b2a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f85b 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b72:	e03f      	b.n	8003bf4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <HAL_UART_IRQHandler+0x56a>
 8003b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fc81 	bl	800449e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b9c:	e02d      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01c      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
    }
    return;
 8003bc6:	e017      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d012      	beq.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00c      	beq.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fc32 	bl	800444a <UART_EndTransmit_IT>
    return;
 8003be6:	e008      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8003be8:	bf00      	nop
 8003bea:	e006      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bec:	bf00      	nop
 8003bee:	e004      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bf8:	bf00      	nop
  }

}
 8003bfa:	37e8      	adds	r7, #232	@ 0xe8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003c6e:	f023 030c 	bic.w	r3, r3, #12
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4aa7      	ldr	r2, [pc, #668]	@ (8003f58 <UART_SetConfig+0x318>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d120      	bne.n	8003d02 <UART_SetConfig+0xc2>
 8003cc0:	4ba6      	ldr	r3, [pc, #664]	@ (8003f5c <UART_SetConfig+0x31c>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d817      	bhi.n	8003cfc <UART_SetConfig+0xbc>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <UART_SetConfig+0x94>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf1 	.word	0x08003cf1
 8003cdc:	08003cf7 	.word	0x08003cf7
 8003ce0:	08003ceb 	.word	0x08003ceb
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0b5      	b.n	8003e56 <UART_SetConfig+0x216>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0b2      	b.n	8003e56 <UART_SetConfig+0x216>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e0af      	b.n	8003e56 <UART_SetConfig+0x216>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e0ac      	b.n	8003e56 <UART_SetConfig+0x216>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e0a9      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a96      	ldr	r2, [pc, #600]	@ (8003f60 <UART_SetConfig+0x320>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d124      	bne.n	8003d56 <UART_SetConfig+0x116>
 8003d0c:	4b93      	ldr	r3, [pc, #588]	@ (8003f5c <UART_SetConfig+0x31c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d18:	d011      	beq.n	8003d3e <UART_SetConfig+0xfe>
 8003d1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d1e:	d817      	bhi.n	8003d50 <UART_SetConfig+0x110>
 8003d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d24:	d011      	beq.n	8003d4a <UART_SetConfig+0x10a>
 8003d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d2a:	d811      	bhi.n	8003d50 <UART_SetConfig+0x110>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0xf8>
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d34:	d006      	beq.n	8003d44 <UART_SetConfig+0x104>
 8003d36:	e00b      	b.n	8003d50 <UART_SetConfig+0x110>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e08b      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e088      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d44:	2304      	movs	r3, #4
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e085      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e082      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d50:	2310      	movs	r3, #16
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e07f      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a82      	ldr	r2, [pc, #520]	@ (8003f64 <UART_SetConfig+0x324>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d124      	bne.n	8003daa <UART_SetConfig+0x16a>
 8003d60:	4b7e      	ldr	r3, [pc, #504]	@ (8003f5c <UART_SetConfig+0x31c>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d6c:	d011      	beq.n	8003d92 <UART_SetConfig+0x152>
 8003d6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d72:	d817      	bhi.n	8003da4 <UART_SetConfig+0x164>
 8003d74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d78:	d011      	beq.n	8003d9e <UART_SetConfig+0x15e>
 8003d7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d7e:	d811      	bhi.n	8003da4 <UART_SetConfig+0x164>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x14c>
 8003d84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d88:	d006      	beq.n	8003d98 <UART_SetConfig+0x158>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x164>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e061      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e05e      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e05b      	b.n	8003e56 <UART_SetConfig+0x216>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e058      	b.n	8003e56 <UART_SetConfig+0x216>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e055      	b.n	8003e56 <UART_SetConfig+0x216>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6e      	ldr	r2, [pc, #440]	@ (8003f68 <UART_SetConfig+0x328>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d124      	bne.n	8003dfe <UART_SetConfig+0x1be>
 8003db4:	4b69      	ldr	r3, [pc, #420]	@ (8003f5c <UART_SetConfig+0x31c>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dc0:	d011      	beq.n	8003de6 <UART_SetConfig+0x1a6>
 8003dc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dc6:	d817      	bhi.n	8003df8 <UART_SetConfig+0x1b8>
 8003dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dcc:	d011      	beq.n	8003df2 <UART_SetConfig+0x1b2>
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd2:	d811      	bhi.n	8003df8 <UART_SetConfig+0x1b8>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <UART_SetConfig+0x1a0>
 8003dd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ddc:	d006      	beq.n	8003dec <UART_SetConfig+0x1ac>
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x1b8>
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e037      	b.n	8003e56 <UART_SetConfig+0x216>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e034      	b.n	8003e56 <UART_SetConfig+0x216>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e031      	b.n	8003e56 <UART_SetConfig+0x216>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e02e      	b.n	8003e56 <UART_SetConfig+0x216>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e02b      	b.n	8003e56 <UART_SetConfig+0x216>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	@ (8003f6c <UART_SetConfig+0x32c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d124      	bne.n	8003e52 <UART_SetConfig+0x212>
 8003e08:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <UART_SetConfig+0x31c>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e14:	d011      	beq.n	8003e3a <UART_SetConfig+0x1fa>
 8003e16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e1a:	d817      	bhi.n	8003e4c <UART_SetConfig+0x20c>
 8003e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e20:	d011      	beq.n	8003e46 <UART_SetConfig+0x206>
 8003e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e26:	d811      	bhi.n	8003e4c <UART_SetConfig+0x20c>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <UART_SetConfig+0x1f4>
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e30:	d006      	beq.n	8003e40 <UART_SetConfig+0x200>
 8003e32:	e00b      	b.n	8003e4c <UART_SetConfig+0x20c>
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e00d      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e00a      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e40:	2304      	movs	r3, #4
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e007      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e46:	2308      	movs	r3, #8
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e004      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e001      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e52:	2310      	movs	r3, #16
 8003e54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5e:	d15b      	bne.n	8003f18 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d827      	bhi.n	8003eb6 <UART_SetConfig+0x276>
 8003e66:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0x22c>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	08003eb7 	.word	0x08003eb7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
 8003e8c:	08003eaf 	.word	0x08003eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fde8 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8003e94:	61b8      	str	r0, [r7, #24]
        break;
 8003e96:	e013      	b.n	8003ec0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7fe fe06 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	61b8      	str	r0, [r7, #24]
        break;
 8003e9e:	e00f      	b.n	8003ec0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <UART_SetConfig+0x330>)
 8003ea2:	61bb      	str	r3, [r7, #24]
        break;
 8003ea4:	e00c      	b.n	8003ec0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fd7d 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003eaa:	61b8      	str	r0, [r7, #24]
        break;
 8003eac:	e008      	b.n	8003ec0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb2:	61bb      	str	r3, [r7, #24]
        break;
 8003eb4:	e004      	b.n	8003ec0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8082 	beq.w	8003fcc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	005a      	lsls	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	441a      	add	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d916      	bls.n	8003f12 <UART_SetConfig+0x2d2>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d212      	bcs.n	8003f12 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f023 030f 	bic.w	r3, r3, #15
 8003ef4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	89fa      	ldrh	r2, [r7, #14]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e05c      	b.n	8003fcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	77bb      	strb	r3, [r7, #30]
 8003f16:	e059      	b.n	8003fcc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f18:	7ffb      	ldrb	r3, [r7, #31]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d835      	bhi.n	8003f8a <UART_SetConfig+0x34a>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <UART_SetConfig+0x2e4>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f8b 	.word	0x08003f8b
 8003f34:	08003f7b 	.word	0x08003f7b
 8003f38:	08003f8b 	.word	0x08003f8b
 8003f3c:	08003f8b 	.word	0x08003f8b
 8003f40:	08003f8b 	.word	0x08003f8b
 8003f44:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe fd8c 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61b8      	str	r0, [r7, #24]
        break;
 8003f4e:	e021      	b.n	8003f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe fdaa 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003f54:	61b8      	str	r0, [r7, #24]
        break;
 8003f56:	e01d      	b.n	8003f94 <UART_SetConfig+0x354>
 8003f58:	40013800 	.word	0x40013800
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40004400 	.word	0x40004400
 8003f64:	40004800 	.word	0x40004800
 8003f68:	40004c00 	.word	0x40004c00
 8003f6c:	40005000 	.word	0x40005000
 8003f70:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <UART_SetConfig+0x3a4>)
 8003f76:	61bb      	str	r3, [r7, #24]
        break;
 8003f78:	e00c      	b.n	8003f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fe fd13 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003f7e:	61b8      	str	r0, [r7, #24]
        break;
 8003f80:	e008      	b.n	8003f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f86:	61bb      	str	r3, [r7, #24]
        break;
 8003f88:	e004      	b.n	8003f94 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77bb      	strb	r3, [r7, #30]
        break;
 8003f92:	bf00      	nop
    }

    if (pclk != 0U)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085a      	lsrs	r2, r3, #1
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	441a      	add	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b0f      	cmp	r3, #15
 8003fb2:	d909      	bls.n	8003fc8 <UART_SetConfig+0x388>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fba:	d205      	bcs.n	8003fc8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e001      	b.n	8003fcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01a      	beq.n	80040fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e6:	d10a      	bne.n	80040fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b098      	sub	sp, #96	@ 0x60
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800413c:	f7fc fd82 	bl	8000c44 <HAL_GetTick>
 8004140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d12e      	bne.n	80041ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f88c 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d021      	beq.n	80041ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004188:	647b      	str	r3, [r7, #68]	@ 0x44
 800418a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e062      	b.n	8004274 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d149      	bne.n	8004250 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f856 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d03c      	beq.n	8004250 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	623b      	str	r3, [r7, #32]
   return(result);
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	60fb      	str	r3, [r7, #12]
   return(result);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004228:	61fa      	str	r2, [r7, #28]
 800422a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	617b      	str	r3, [r7, #20]
   return(result);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e011      	b.n	8004274 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3758      	adds	r7, #88	@ 0x58
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	e04f      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d04b      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fc fcd5 	bl	8000c44 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e04e      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d037      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b80      	cmp	r3, #128	@ 0x80
 80042c2:	d034      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b40      	cmp	r3, #64	@ 0x40
 80042c8:	d031      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d110      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f838 	bl	8004356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2208      	movs	r2, #8
 80042ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e029      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d111      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f81e 	bl	8004356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e00f      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d0a0      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004356:	b480      	push	{r7}
 8004358:	b095      	sub	sp, #84	@ 0x54
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437c:	643b      	str	r3, [r7, #64]	@ 0x40
 800437e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d118      	bne.n	80043fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	613b      	str	r3, [r7, #16]
   return(result);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004412:	bf00      	nop
 8004414:	3754      	adds	r7, #84	@ 0x54
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fbe9 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b088      	sub	sp, #32
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fbb5 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	1d3b      	adds	r3, r7, #4
 80044f2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452a:	f3ef 8305 	mrs	r3, IPSR
 800452e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004530:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004536:	f3ef 8310 	mrs	r3, PRIMASK
 800453a:	607b      	str	r3, [r7, #4]
  return(result);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <osKernelInitialize+0x32>
 8004542:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <osKernelInitialize+0x64>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d109      	bne.n	800455e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800454a:	f3ef 8311 	mrs	r3, BASEPRI
 800454e:	603b      	str	r3, [r7, #0]
  return(result);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004556:	f06f 0305 	mvn.w	r3, #5
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e00c      	b.n	8004578 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800455e:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <osKernelInitialize+0x64>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004566:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <osKernelInitialize+0x64>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e002      	b.n	8004578 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004572:	f04f 33ff 	mov.w	r3, #4294967295
 8004576:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000053c 	.word	0x2000053c

0800458c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	60bb      	str	r3, [r7, #8]
  return(result);
 8004598:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459e:	f3ef 8310 	mrs	r3, PRIMASK
 80045a2:	607b      	str	r3, [r7, #4]
  return(result);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <osKernelStart+0x32>
 80045aa:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <osKernelStart+0x64>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d109      	bne.n	80045c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045b2:	f3ef 8311 	mrs	r3, BASEPRI
 80045b6:	603b      	str	r3, [r7, #0]
  return(result);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80045be:	f06f 0305 	mvn.w	r3, #5
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e00e      	b.n	80045e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <osKernelStart+0x64>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80045ce:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <osKernelStart+0x64>)
 80045d0:	2202      	movs	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80045d4:	f001 f8b0 	bl	8005738 <vTaskStartScheduler>
      stat = osOK;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e002      	b.n	80045e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045e4:	68fb      	ldr	r3, [r7, #12]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000053c 	.word	0x2000053c

080045f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b092      	sub	sp, #72	@ 0x48
 80045f8:	af04      	add	r7, sp, #16
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004604:	f3ef 8305 	mrs	r3, IPSR
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8094 	bne.w	800473a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004612:	f3ef 8310 	mrs	r3, PRIMASK
 8004616:	623b      	str	r3, [r7, #32]
  return(result);
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 808d 	bne.w	800473a <osThreadNew+0x146>
 8004620:	4b48      	ldr	r3, [pc, #288]	@ (8004744 <osThreadNew+0x150>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d106      	bne.n	8004636 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004628:	f3ef 8311 	mrs	r3, BASEPRI
 800462c:	61fb      	str	r3, [r7, #28]
  return(result);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 8082 	bne.w	800473a <osThreadNew+0x146>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d07e      	beq.n	800473a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800463c:	2380      	movs	r3, #128	@ 0x80
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004640:	2318      	movs	r3, #24
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004644:	2300      	movs	r3, #0
 8004646:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004648:	f107 031b 	add.w	r3, r7, #27
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d045      	beq.n	80046e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <osThreadNew+0x74>
        name = attr->name;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <osThreadNew+0x9a>
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	2b38      	cmp	r3, #56	@ 0x38
 8004680:	d805      	bhi.n	800468e <osThreadNew+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <osThreadNew+0x9e>
        return (NULL);
 800468e:	2300      	movs	r3, #0
 8004690:	e054      	b.n	800473c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <osThreadNew+0xd4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2ba7      	cmp	r3, #167	@ 0xa7
 80046b0:	d90a      	bls.n	80046c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <osThreadNew+0xd4>
        mem = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046c6:	e010      	b.n	80046ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10c      	bne.n	80046ea <osThreadNew+0xf6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d108      	bne.n	80046ea <osThreadNew+0xf6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <osThreadNew+0xf6>
          mem = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e4:	e001      	b.n	80046ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d110      	bne.n	8004712 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046f8:	9202      	str	r2, [sp, #8]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004704:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fe2c 	bl	8005364 <xTaskCreateStatic>
 800470c:	4603      	mov	r3, r0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e013      	b.n	800473a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	b29a      	uxth	r2, r3
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fe79 	bl	8005422 <xTaskCreate>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <osThreadNew+0x146>
          hTask = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800473a:	697b      	ldr	r3, [r7, #20]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3738      	adds	r7, #56	@ 0x38
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	2000053c 	.word	0x2000053c

08004748 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004750:	f3ef 8305 	mrs	r3, IPSR
 8004754:	613b      	str	r3, [r7, #16]
  return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10f      	bne.n	800477c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	60fb      	str	r3, [r7, #12]
  return(result);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <osDelay+0x34>
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <osDelay+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d109      	bne.n	8004784 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004770:	f3ef 8311 	mrs	r3, BASEPRI
 8004774:	60bb      	str	r3, [r7, #8]
  return(result);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <osDelay+0x3c>
    stat = osErrorISR;
 800477c:	f06f 0305 	mvn.w	r3, #5
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e007      	b.n	8004794 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <osDelay+0x4c>
      vTaskDelay(ticks);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 ff9c 	bl	80056cc <vTaskDelay>
    }
  }

  return (stat);
 8004794:	697b      	ldr	r3, [r7, #20]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	2000053c 	.word	0x2000053c

080047a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80047b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a06      	ldr	r2, [pc, #24]	@ (80047d4 <vApplicationGetIdleTaskMemory+0x30>)
 80047ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2280      	movs	r2, #128	@ 0x80
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000540 	.word	0x20000540
 80047d4:	200005e8 	.word	0x200005e8

080047d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <vApplicationGetTimerTaskMemory+0x2c>)
 80047e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4a06      	ldr	r2, [pc, #24]	@ (8004808 <vApplicationGetTimerTaskMemory+0x30>)
 80047ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047f6:	601a      	str	r2, [r3, #0]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	200007e8 	.word	0x200007e8
 8004808:	20000890 	.word	0x20000890

0800480c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f103 0208 	add.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 0208 	add.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f103 0208 	add.w	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d103      	bne.n	80048ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e00c      	b.n	80048e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3308      	adds	r3, #8
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e002      	b.n	80048dc <vListInsert+0x2e>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d2f6      	bcs.n	80048d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6852      	ldr	r2, [r2, #4]
 8004940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d103      	bne.n	8004954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049a0:	f002 f86a 	bl	8006a78 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	441a      	add	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	3b01      	subs	r3, #1
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	441a      	add	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	22ff      	movs	r2, #255	@ 0xff
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	22ff      	movs	r2, #255	@ 0xff
 80049ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d114      	bne.n	8004a20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3310      	adds	r3, #16
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f93c 	bl	8005c80 <xTaskRemoveFromEventList>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d012      	beq.n	8004a34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <xQueueGenericReset+0xd0>)
 8004a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	e009      	b.n	8004a34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3310      	adds	r3, #16
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fef1 	bl	800480c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3324      	adds	r3, #36	@ 0x24
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff feec 	bl	800480c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a34:	f002 f852 	bl	8006adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a38:	2301      	movs	r3, #1
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	@ 0x38
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <xQueueGenericCreateStatic+0x56>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <xQueueGenericCreateStatic+0x5a>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericCreateStatic+0x5c>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <xQueueGenericCreateStatic+0x84>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <xQueueGenericCreateStatic+0x88>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <xQueueGenericCreateStatic+0x8a>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	61fb      	str	r3, [r7, #28]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aee:	2350      	movs	r3, #80	@ 0x50
 8004af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b50      	cmp	r3, #80	@ 0x50
 8004af6:	d00b      	beq.n	8004b10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61bb      	str	r3, [r7, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b22:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f805 	bl	8004b40 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3730      	adds	r7, #48	@ 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d103      	bne.n	8004b5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e002      	b.n	8004b62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b6e:	2101      	movs	r1, #1
 8004b70:	69b8      	ldr	r0, [r7, #24]
 8004b72:	f7ff feff 	bl	8004974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	@ 0x38
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xQueueGenericSend+0x34>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x42>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericSend+0x46>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericSend+0x48>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericSend+0x64>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x72>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSend+0x76>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSend+0x78>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xQueueGenericSend+0x94>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c1c:	f001 f9fc 	bl	8006018 <xTaskGetSchedulerState>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <xQueueGenericSend+0xa4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <xQueueGenericSend+0xa8>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <xQueueGenericSend+0xaa>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <xQueueGenericSend+0xc6>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	61fb      	str	r3, [r7, #28]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c4e:	f001 ff13 	bl	8006a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <xQueueGenericSend+0xdc>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d129      	bne.n	8004cb8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c6a:	f000 fa0d 	bl	8005088 <prvCopyDataToQueue>
 8004c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	3324      	adds	r3, #36	@ 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 ffff 	bl	8005c80 <xTaskRemoveFromEventList>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c88:	4b3f      	ldr	r3, [pc, #252]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	e00a      	b.n	8004cb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cb0:	f001 ff14 	bl	8006adc <vPortExitCritical>
				return pdPASS;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e063      	b.n	8004d80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cbe:	f001 ff0d 	bl	8006adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e05c      	b.n	8004d80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 f839 	bl	8005d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cda:	f001 feff 	bl	8006adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cde:	f000 fd9b 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce2:	f001 fec9 	bl	8006a78 <vPortEnterCritical>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d103      	bne.n	8004cfc <xQueueGenericSend+0x174>
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d02:	b25b      	sxtb	r3, r3
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x18a>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d12:	f001 fee3 	bl	8006adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d16:	1d3a      	adds	r2, r7, #4
 8004d18:	f107 0314 	add.w	r3, r7, #20
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f828 	bl	8005d74 <xTaskCheckForTimeOut>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d124      	bne.n	8004d74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d2c:	f000 faa4 	bl	8005278 <prvIsQueueFull>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	3310      	adds	r3, #16
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 ff4c 	bl	8005bdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d46:	f000 fa2f 	bl	80051a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d4a:	f000 fd73 	bl	8005834 <xTaskResumeAll>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f af7c 	bne.w	8004c4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d56:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	e772      	b.n	8004c4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d6a:	f000 fa1d 	bl	80051a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6e:	f000 fd61 	bl	8005834 <xTaskResumeAll>
 8004d72:	e76c      	b.n	8004c4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d76:	f000 fa17 	bl	80051a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7a:	f000 fd5b 	bl	8005834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d7e:	2300      	movs	r3, #0
		}
	}
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3738      	adds	r7, #56	@ 0x38
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	@ 0x38
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <xQueueGenericSendFromISR+0x3e>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueGenericSendFromISR+0x42>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <xQueueGenericSendFromISR+0x44>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	623b      	str	r3, [r7, #32]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSendFromISR+0x6e>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <xQueueGenericSendFromISR+0x72>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xQueueGenericSendFromISR+0x74>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61fb      	str	r3, [r7, #28]
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e1c:	f001 ff0c 	bl	8006c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e20:	f3ef 8211 	mrs	r2, BASEPRI
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <xQueueGenericSendFromISR+0xc2>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d12c      	bne.n	8004ea8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e5e:	f000 f913 	bl	8005088 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e62:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d112      	bne.n	8004e92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	3324      	adds	r3, #36	@ 0x24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 ff01 	bl	8005c80 <xTaskRemoveFromEventList>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e007      	b.n	8004ea2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	b25a      	sxtb	r2, r3
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004ea6:	e001      	b.n	8004eac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3738      	adds	r7, #56	@ 0x38
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	@ 0x30
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <xQueueReceive+0x32>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	623b      	str	r3, [r7, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <xQueueReceive+0x40>
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <xQueueReceive+0x44>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <xQueueReceive+0x46>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <xQueueReceive+0x62>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	61fb      	str	r3, [r7, #28]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f26:	f001 f877 	bl	8006018 <xTaskGetSchedulerState>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <xQueueReceive+0x72>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <xQueueReceive+0x76>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueReceive+0x78>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <xQueueReceive+0x94>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61bb      	str	r3, [r7, #24]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f58:	f001 fd8e 	bl	8006a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01f      	beq.n	8004fa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	f000 f8f6 	bl	800515c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00f      	beq.n	8004fa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	3310      	adds	r3, #16
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fe7b 	bl	8005c80 <xTaskRemoveFromEventList>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f90:	4b3c      	ldr	r3, [pc, #240]	@ (8005084 <xQueueReceive+0x1c0>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fa0:	f001 fd9c 	bl	8006adc <vPortExitCritical>
				return pdPASS;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e069      	b.n	800507c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fae:	f001 fd95 	bl	8006adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e062      	b.n	800507c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fec1 	bl	8005d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fca:	f001 fd87 	bl	8006adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fce:	f000 fc23 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd2:	f001 fd51 	bl	8006a78 <vPortEnterCritical>
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d103      	bne.n	8004fec <xQueueReceive+0x128>
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <xQueueReceive+0x13e>
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005002:	f001 fd6b 	bl	8006adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005006:	1d3a      	adds	r2, r7, #4
 8005008:	f107 0310 	add.w	r3, r7, #16
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f000 feb0 	bl	8005d74 <xTaskCheckForTimeOut>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d123      	bne.n	8005062 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800501c:	f000 f916 	bl	800524c <prvIsQueueEmpty>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d017      	beq.n	8005056 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	3324      	adds	r3, #36	@ 0x24
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fdd4 	bl	8005bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005036:	f000 f8b7 	bl	80051a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800503a:	f000 fbfb 	bl	8005834 <xTaskResumeAll>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d189      	bne.n	8004f58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005044:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <xQueueReceive+0x1c0>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	e780      	b.n	8004f58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005058:	f000 f8a6 	bl	80051a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800505c:	f000 fbea 	bl	8005834 <xTaskResumeAll>
 8005060:	e77a      	b.n	8004f58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005064:	f000 f8a0 	bl	80051a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005068:	f000 fbe4 	bl	8005834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800506c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800506e:	f000 f8ed 	bl	800524c <prvIsQueueEmpty>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	f43f af6f 	beq.w	8004f58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800507a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800507c:	4618      	mov	r0, r3
 800507e:	3730      	adds	r7, #48	@ 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d14d      	bne.n	800514a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 ffce 	bl	8006054 <xTaskPriorityDisinherit>
 80050b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	e043      	b.n	800514a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d119      	bne.n	80050fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6898      	ldr	r0, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	461a      	mov	r2, r3
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	f002 f85e 	bl	8007194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	441a      	add	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d32b      	bcc.n	800514a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	609a      	str	r2, [r3, #8]
 80050fa:	e026      	b.n	800514a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68d8      	ldr	r0, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	461a      	mov	r2, r3
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	f002 f844 	bl	8007194 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	425b      	negs	r3, r3
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d207      	bcs.n	8005138 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	425b      	negs	r3, r3
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d105      	bne.n	800514a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3b01      	subs	r3, #1
 8005148:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	d303      	bcc.n	8005190 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68d9      	ldr	r1, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	461a      	mov	r2, r3
 800519a:	6838      	ldr	r0, [r7, #0]
 800519c:	f001 fffa 	bl	8007194 <memcpy>
	}
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051b0:	f001 fc62 	bl	8006a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051bc:	e011      	b.n	80051e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3324      	adds	r3, #36	@ 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fd58 	bl	8005c80 <xTaskRemoveFromEventList>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051d6:	f000 fe31 	bl	8005e3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	3b01      	subs	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dce9      	bgt.n	80051be <prvUnlockQueue+0x16>
 80051ea:	e000      	b.n	80051ee <prvUnlockQueue+0x46>
					break;
 80051ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	22ff      	movs	r2, #255	@ 0xff
 80051f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051f6:	f001 fc71 	bl	8006adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051fa:	f001 fc3d 	bl	8006a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005204:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005206:	e011      	b.n	800522c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d012      	beq.n	8005236 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3310      	adds	r3, #16
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fd33 	bl	8005c80 <xTaskRemoveFromEventList>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005220:	f000 fe0c 	bl	8005e3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	3b01      	subs	r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800522c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005230:	2b00      	cmp	r3, #0
 8005232:	dce9      	bgt.n	8005208 <prvUnlockQueue+0x60>
 8005234:	e000      	b.n	8005238 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005236:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	22ff      	movs	r2, #255	@ 0xff
 800523c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005240:	f001 fc4c 	bl	8006adc <vPortExitCritical>
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005254:	f001 fc10 	bl	8006a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e001      	b.n	800526a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800526a:	f001 fc37 	bl	8006adc <vPortExitCritical>

	return xReturn;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005280:	f001 fbfa 	bl	8006a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528c:	429a      	cmp	r2, r3
 800528e:	d102      	bne.n	8005296 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e001      	b.n	800529a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800529a:	f001 fc1f 	bl	8006adc <vPortExitCritical>

	return xReturn;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e014      	b.n	80052e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052b8:	4a0f      	ldr	r2, [pc, #60]	@ (80052f8 <vQueueAddToRegistry+0x50>)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052c4:	490c      	ldr	r1, [pc, #48]	@ (80052f8 <vQueueAddToRegistry+0x50>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ce:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <vQueueAddToRegistry+0x50>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052da:	e006      	b.n	80052ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b07      	cmp	r3, #7
 80052e6:	d9e7      	bls.n	80052b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000c90 	.word	0x20000c90

080052fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800530c:	f001 fbb4 	bl	8006a78 <vPortEnterCritical>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005316:	b25b      	sxtb	r3, r3
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d103      	bne.n	8005326 <vQueueWaitForMessageRestricted+0x2a>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800532c:	b25b      	sxtb	r3, r3
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d103      	bne.n	800533c <vQueueWaitForMessageRestricted+0x40>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533c:	f001 fbce 	bl	8006adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3324      	adds	r3, #36	@ 0x24
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fc69 	bl	8005c28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7ff ff26 	bl	80051a8 <prvUnlockQueue>
	}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	@ 0x38
 8005368:	af04      	add	r7, sp, #16
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	623b      	str	r3, [r7, #32]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	61fb      	str	r3, [r7, #28]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053ae:	23a8      	movs	r3, #168	@ 0xa8
 80053b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80053b6:	d00b      	beq.n	80053d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	61bb      	str	r3, [r7, #24]
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01e      	beq.n	8005414 <xTaskCreateStatic+0xb0>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01b      	beq.n	8005414 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ee:	2300      	movs	r3, #0
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f850 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800540e:	f000 f8ed 	bl	80055ec <prvAddNewTaskToReadyList>
 8005412:	e001      	b.n	8005418 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005418:	697b      	ldr	r3, [r7, #20]
	}
 800541a:	4618      	mov	r0, r3
 800541c:	3728      	adds	r7, #40	@ 0x28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005422:	b580      	push	{r7, lr}
 8005424:	b08c      	sub	sp, #48	@ 0x30
 8005426:	af04      	add	r7, sp, #16
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 fc40 	bl	8006cbc <pvPortMalloc>
 800543c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005444:	20a8      	movs	r0, #168	@ 0xa8
 8005446:	f001 fc39 	bl	8006cbc <pvPortMalloc>
 800544a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
 8005458:	e005      	b.n	8005466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f001 fcf6 	bl	8006e4c <vPortFree>
 8005460:	e001      	b.n	8005466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d017      	beq.n	800549c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	2300      	movs	r3, #0
 8005478:	9303      	str	r3, [sp, #12]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	9302      	str	r3, [sp, #8]
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f80e 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005490:	69f8      	ldr	r0, [r7, #28]
 8005492:	f000 f8ab 	bl	80055ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005496:	2301      	movs	r3, #1
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	e002      	b.n	80054a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a2:	69bb      	ldr	r3, [r7, #24]
	}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	21a5      	movs	r1, #165	@ 0xa5
 80054c6:	f001 fdd9 	bl	800707c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e012      	b.n	8005532 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	7819      	ldrb	r1, [r3, #0]
 8005514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	3334      	adds	r3, #52	@ 0x34
 800551c:	460a      	mov	r2, r1
 800551e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d9e9      	bls.n	800550c <prvInitialiseNewTask+0x60>
 8005538:	e000      	b.n	800553c <prvInitialiseNewTask+0x90>
		{
			break;
 800553a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2b37      	cmp	r3, #55	@ 0x37
 8005548:	d901      	bls.n	800554e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554a:	2337      	movs	r3, #55	@ 0x37
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005558:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f971 	bl	800484c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	3318      	adds	r3, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f96c 	bl	800484c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005578:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	2200      	movs	r2, #0
 800558e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	3354      	adds	r3, #84	@ 0x54
 800559e:	224c      	movs	r2, #76	@ 0x4c
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fd6a 	bl	800707c <memset>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <prvInitialiseNewTask+0x134>)
 80055ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	4a0c      	ldr	r2, [pc, #48]	@ (80055e4 <prvInitialiseNewTask+0x138>)
 80055b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	4a0c      	ldr	r2, [pc, #48]	@ (80055e8 <prvInitialiseNewTask+0x13c>)
 80055b8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	69b8      	ldr	r0, [r7, #24]
 80055c0:	f001 f92c 	bl	800681c <pxPortInitialiseStack>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055d6:	bf00      	nop
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20001f1c 	.word	0x20001f1c
 80055e4:	20001f84 	.word	0x20001f84
 80055e8:	20001fec 	.word	0x20001fec

080055ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f4:	f001 fa40 	bl	8006a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055f8:	4b2d      	ldr	r3, [pc, #180]	@ (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 8005600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005602:	4b2c      	ldr	r3, [pc, #176]	@ (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800560a:	4a2a      	ldr	r2, [pc, #168]	@ (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005610:	4b27      	ldr	r3, [pc, #156]	@ (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d110      	bne.n	800563a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005618:	f000 fc34 	bl	8005e84 <prvInitialiseTaskLists>
 800561c:	e00d      	b.n	800563a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <prvAddNewTaskToReadyList+0xcc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005626:	4b23      	ldr	r3, [pc, #140]	@ (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d802      	bhi.n	800563a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005634:	4a1f      	ldr	r2, [pc, #124]	@ (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <prvAddNewTaskToReadyList+0xd0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a1e      	ldr	r2, [pc, #120]	@ (80056bc <prvAddNewTaskToReadyList+0xd0>)
 8005642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005644:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <prvAddNewTaskToReadyList+0xd0>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005650:	4b1b      	ldr	r3, [pc, #108]	@ (80056c0 <prvAddNewTaskToReadyList+0xd4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d903      	bls.n	8005660 <prvAddNewTaskToReadyList+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <prvAddNewTaskToReadyList+0xd4>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <prvAddNewTaskToReadyList+0xd8>)
 800566e:	441a      	add	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7ff f8f5 	bl	8004866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800567c:	f001 fa2e 	bl	8006adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <prvAddNewTaskToReadyList+0xcc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d207      	bcs.n	80056a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005696:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <prvAddNewTaskToReadyList+0xdc>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200011a4 	.word	0x200011a4
 80056b4:	20000cd0 	.word	0x20000cd0
 80056b8:	200011b0 	.word	0x200011b0
 80056bc:	200011c0 	.word	0x200011c0
 80056c0:	200011ac 	.word	0x200011ac
 80056c4:	20000cd4 	.word	0x20000cd4
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d018      	beq.n	8005710 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056de:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <vTaskDelay+0x64>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <vTaskDelay+0x32>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056fe:	f000 f88b 	bl	8005818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005702:	2100      	movs	r1, #0
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fd15 	bl	8006134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800570a:	f000 f893 	bl	8005834 <xTaskResumeAll>
 800570e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005716:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <vTaskDelay+0x68>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200011cc 	.word	0x200011cc
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	@ 0x28
 800573c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005746:	463a      	mov	r2, r7
 8005748:	1d39      	adds	r1, r7, #4
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f828 	bl	80047a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	9202      	str	r2, [sp, #8]
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	2300      	movs	r3, #0
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	460a      	mov	r2, r1
 8005766:	4924      	ldr	r1, [pc, #144]	@ (80057f8 <vTaskStartScheduler+0xc0>)
 8005768:	4824      	ldr	r0, [pc, #144]	@ (80057fc <vTaskStartScheduler+0xc4>)
 800576a:	f7ff fdfb 	bl	8005364 <xTaskCreateStatic>
 800576e:	4603      	mov	r3, r0
 8005770:	4a23      	ldr	r2, [pc, #140]	@ (8005800 <vTaskStartScheduler+0xc8>)
 8005772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005774:	4b22      	ldr	r3, [pc, #136]	@ (8005800 <vTaskStartScheduler+0xc8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e001      	b.n	8005786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800578c:	f000 fd26 	bl	80061dc <xTimerCreateTimerTask>
 8005790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d11b      	bne.n	80057d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ac:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <vTaskStartScheduler+0xcc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3354      	adds	r3, #84	@ 0x54
 80057b2:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <vTaskStartScheduler+0xd0>)
 80057b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057b6:	4b15      	ldr	r3, [pc, #84]	@ (800580c <vTaskStartScheduler+0xd4>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295
 80057bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057be:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <vTaskStartScheduler+0xd8>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057c4:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <vTaskStartScheduler+0xdc>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ca:	f001 f8b1 	bl	8006930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ce:	e00f      	b.n	80057f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d10b      	bne.n	80057f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <vTaskStartScheduler+0xb4>
}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	08007284 	.word	0x08007284
 80057fc:	08005e55 	.word	0x08005e55
 8005800:	200011c8 	.word	0x200011c8
 8005804:	20000cd0 	.word	0x20000cd0
 8005808:	20000010 	.word	0x20000010
 800580c:	200011c4 	.word	0x200011c4
 8005810:	200011b0 	.word	0x200011b0
 8005814:	200011a8 	.word	0x200011a8

08005818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <vTaskSuspendAll+0x18>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a03      	ldr	r2, [pc, #12]	@ (8005830 <vTaskSuspendAll+0x18>)
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	200011cc 	.word	0x200011cc

08005834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005842:	4b42      	ldr	r3, [pc, #264]	@ (800594c <xTaskResumeAll+0x118>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <xTaskResumeAll+0x2e>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	603b      	str	r3, [r7, #0]
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005862:	f001 f909 	bl	8006a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005866:	4b39      	ldr	r3, [pc, #228]	@ (800594c <xTaskResumeAll+0x118>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a37      	ldr	r2, [pc, #220]	@ (800594c <xTaskResumeAll+0x118>)
 800586e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005870:	4b36      	ldr	r3, [pc, #216]	@ (800594c <xTaskResumeAll+0x118>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d162      	bne.n	800593e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005878:	4b35      	ldr	r3, [pc, #212]	@ (8005950 <xTaskResumeAll+0x11c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05e      	beq.n	800593e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005880:	e02f      	b.n	80058e2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005882:	4b34      	ldr	r3, [pc, #208]	@ (8005954 <xTaskResumeAll+0x120>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3318      	adds	r3, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff f846 	bl	8004920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f841 	bl	8004920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005958 <xTaskResumeAll+0x124>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d903      	bls.n	80058b2 <xTaskResumeAll+0x7e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <xTaskResumeAll+0x124>)
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4a27      	ldr	r2, [pc, #156]	@ (800595c <xTaskResumeAll+0x128>)
 80058c0:	441a      	add	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7fe ffcc 	bl	8004866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4b23      	ldr	r3, [pc, #140]	@ (8005960 <xTaskResumeAll+0x12c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058dc:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <xTaskResumeAll+0x130>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <xTaskResumeAll+0x120>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1cb      	bne.n	8005882 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058f0:	f000 fb6c 	bl	8005fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005968 <xTaskResumeAll+0x134>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005900:	f000 f846 	bl	8005990 <xTaskIncrementTick>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <xTaskResumeAll+0x130>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3b01      	subs	r3, #1
 8005914:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f1      	bne.n	8005900 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800591c:	4b12      	ldr	r3, [pc, #72]	@ (8005968 <xTaskResumeAll+0x134>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <xTaskResumeAll+0x130>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800592e:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <xTaskResumeAll+0x138>)
 8005930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800593e:	f001 f8cd 	bl	8006adc <vPortExitCritical>

	return xAlreadyYielded;
 8005942:	68bb      	ldr	r3, [r7, #8]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200011cc 	.word	0x200011cc
 8005950:	200011a4 	.word	0x200011a4
 8005954:	20001164 	.word	0x20001164
 8005958:	200011ac 	.word	0x200011ac
 800595c:	20000cd4 	.word	0x20000cd4
 8005960:	20000cd0 	.word	0x20000cd0
 8005964:	200011b8 	.word	0x200011b8
 8005968:	200011b4 	.word	0x200011b4
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005976:	4b05      	ldr	r3, [pc, #20]	@ (800598c <xTaskGetTickCount+0x1c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800597c:	687b      	ldr	r3, [r7, #4]
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	200011a8 	.word	0x200011a8

08005990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599a:	4b52      	ldr	r3, [pc, #328]	@ (8005ae4 <xTaskIncrementTick+0x154>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 808f 	bne.w	8005ac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a4:	4b50      	ldr	r3, [pc, #320]	@ (8005ae8 <xTaskIncrementTick+0x158>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059ac:	4a4e      	ldr	r2, [pc, #312]	@ (8005ae8 <xTaskIncrementTick+0x158>)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d121      	bne.n	80059fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059b8:	4b4c      	ldr	r3, [pc, #304]	@ (8005aec <xTaskIncrementTick+0x15c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <xTaskIncrementTick+0x4a>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	603b      	str	r3, [r7, #0]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <xTaskIncrementTick+0x46>
 80059da:	4b44      	ldr	r3, [pc, #272]	@ (8005aec <xTaskIncrementTick+0x15c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	4b43      	ldr	r3, [pc, #268]	@ (8005af0 <xTaskIncrementTick+0x160>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a41      	ldr	r2, [pc, #260]	@ (8005aec <xTaskIncrementTick+0x15c>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4a41      	ldr	r2, [pc, #260]	@ (8005af0 <xTaskIncrementTick+0x160>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b41      	ldr	r3, [pc, #260]	@ (8005af4 <xTaskIncrementTick+0x164>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a3f      	ldr	r2, [pc, #252]	@ (8005af4 <xTaskIncrementTick+0x164>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	f000 fae8 	bl	8005fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059fc:	4b3e      	ldr	r3, [pc, #248]	@ (8005af8 <xTaskIncrementTick+0x168>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d34e      	bcc.n	8005aa4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a06:	4b39      	ldr	r3, [pc, #228]	@ (8005aec <xTaskIncrementTick+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <xTaskIncrementTick+0x84>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <xTaskIncrementTick+0x86>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1a:	4b37      	ldr	r3, [pc, #220]	@ (8005af8 <xTaskIncrementTick+0x168>)
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	601a      	str	r2, [r3, #0]
					break;
 8005a22:	e03f      	b.n	8005aa4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <xTaskIncrementTick+0x15c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d203      	bcs.n	8005a44 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005af8 <xTaskIncrementTick+0x168>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
						break;
 8005a42:	e02f      	b.n	8005aa4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe ff69 	bl	8004920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3318      	adds	r3, #24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ff60 	bl	8004920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a64:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <xTaskIncrementTick+0x16c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <xTaskIncrementTick+0xe4>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <xTaskIncrementTick+0x16c>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <xTaskIncrementTick+0x170>)
 8005a82:	441a      	add	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe feeb 	bl	8004866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <xTaskIncrementTick+0x174>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3b3      	bcc.n	8005a06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa2:	e7b0      	b.n	8005a06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aa4:	4b17      	ldr	r3, [pc, #92]	@ (8005b04 <xTaskIncrementTick+0x174>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	4915      	ldr	r1, [pc, #84]	@ (8005b00 <xTaskIncrementTick+0x170>)
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d907      	bls.n	8005acc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e004      	b.n	8005acc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ac2:	4b11      	ldr	r3, [pc, #68]	@ (8005b08 <xTaskIncrementTick+0x178>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8005b08 <xTaskIncrementTick+0x178>)
 8005aca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005acc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b0c <xTaskIncrementTick+0x17c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ad8:	697b      	ldr	r3, [r7, #20]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200011cc 	.word	0x200011cc
 8005ae8:	200011a8 	.word	0x200011a8
 8005aec:	2000115c 	.word	0x2000115c
 8005af0:	20001160 	.word	0x20001160
 8005af4:	200011bc 	.word	0x200011bc
 8005af8:	200011c4 	.word	0x200011c4
 8005afc:	200011ac 	.word	0x200011ac
 8005b00:	20000cd4 	.word	0x20000cd4
 8005b04:	20000cd0 	.word	0x20000cd0
 8005b08:	200011b4 	.word	0x200011b4
 8005b0c:	200011b8 	.word	0x200011b8

08005b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b16:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc4 <vTaskSwitchContext+0xb4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc8 <vTaskSwitchContext+0xb8>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b24:	e047      	b.n	8005bb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b26:	4b28      	ldr	r3, [pc, #160]	@ (8005bc8 <vTaskSwitchContext+0xb8>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b2c:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <vTaskSwitchContext+0xbc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e011      	b.n	8005b58 <vTaskSwitchContext+0x48>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vTaskSwitchContext+0x3e>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	491d      	ldr	r1, [pc, #116]	@ (8005bd0 <vTaskSwitchContext+0xc0>)
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0e3      	beq.n	8005b34 <vTaskSwitchContext+0x24>
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <vTaskSwitchContext+0xc0>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d104      	bne.n	8005b9c <vTaskSwitchContext+0x8c>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd4 <vTaskSwitchContext+0xc4>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4a09      	ldr	r2, [pc, #36]	@ (8005bcc <vTaskSwitchContext+0xbc>)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <vTaskSwitchContext+0xc4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3354      	adds	r3, #84	@ 0x54
 8005bb2:	4a09      	ldr	r2, [pc, #36]	@ (8005bd8 <vTaskSwitchContext+0xc8>)
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	200011cc 	.word	0x200011cc
 8005bc8:	200011b8 	.word	0x200011b8
 8005bcc:	200011ac 	.word	0x200011ac
 8005bd0:	20000cd4 	.word	0x20000cd4
 8005bd4:	20000cd0 	.word	0x20000cd0
 8005bd8:	20000010 	.word	0x20000010

08005bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c04:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <vTaskPlaceOnEventList+0x48>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3318      	adds	r3, #24
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fe fe4e 	bl	80048ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c12:	2101      	movs	r1, #1
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	f000 fa8d 	bl	8006134 <prvAddCurrentTaskToDelayedList>
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000cd0 	.word	0x20000cd0

08005c28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	617b      	str	r3, [r7, #20]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c52:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3318      	adds	r3, #24
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7fe fe03 	bl	8004866 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	68b8      	ldr	r0, [r7, #8]
 8005c70:	f000 fa60 	bl	8006134 <prvAddCurrentTaskToDelayedList>
	}
 8005c74:	bf00      	nop
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000cd0 	.word	0x20000cd0

08005c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3318      	adds	r3, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fe34 	bl	8004920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <xTaskRemoveFromEventList+0xb0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11d      	bne.n	8005cfc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fe2b 	bl	8004920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	4b19      	ldr	r3, [pc, #100]	@ (8005d34 <xTaskRemoveFromEventList+0xb4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d903      	bls.n	8005cde <xTaskRemoveFromEventList+0x5e>
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	4a16      	ldr	r2, [pc, #88]	@ (8005d34 <xTaskRemoveFromEventList+0xb4>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4a13      	ldr	r2, [pc, #76]	@ (8005d38 <xTaskRemoveFromEventList+0xb8>)
 8005cec:	441a      	add	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7fe fdb6 	bl	8004866 <vListInsertEnd>
 8005cfa:	e005      	b.n	8005d08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	3318      	adds	r3, #24
 8005d00:	4619      	mov	r1, r3
 8005d02:	480e      	ldr	r0, [pc, #56]	@ (8005d3c <xTaskRemoveFromEventList+0xbc>)
 8005d04:	f7fe fdaf 	bl	8004866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <xTaskRemoveFromEventList+0xc0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d905      	bls.n	8005d22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <xTaskRemoveFromEventList+0xc4>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e001      	b.n	8005d26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d26:	697b      	ldr	r3, [r7, #20]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200011cc 	.word	0x200011cc
 8005d34:	200011ac 	.word	0x200011ac
 8005d38:	20000cd4 	.word	0x20000cd4
 8005d3c:	20001164 	.word	0x20001164
 8005d40:	20000cd0 	.word	0x20000cd0
 8005d44:	200011b8 	.word	0x200011b8

08005d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d50:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <vTaskInternalSetTimeOutState+0x24>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <vTaskInternalSetTimeOutState+0x28>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	200011bc 	.word	0x200011bc
 8005d70:	200011a8 	.word	0x200011a8

08005d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60fb      	str	r3, [r7, #12]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005dba:	f000 fe5d 	bl	8006a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <xTaskCheckForTimeOut+0xc0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d102      	bne.n	8005dde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e023      	b.n	8005e26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b15      	ldr	r3, [pc, #84]	@ (8005e38 <xTaskCheckForTimeOut+0xc4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d007      	beq.n	8005dfa <xTaskCheckForTimeOut+0x86>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e015      	b.n	8005e26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d20b      	bcs.n	8005e1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff99 	bl	8005d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e004      	b.n	8005e26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f000 fe59 	bl	8006adc <vPortExitCritical>

	return xReturn;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	200011a8 	.word	0x200011a8
 8005e38:	200011bc 	.word	0x200011bc

08005e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e40:	4b03      	ldr	r3, [pc, #12]	@ (8005e50 <vTaskMissedYield+0x14>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200011b8 	.word	0x200011b8

08005e54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e5c:	f000 f852 	bl	8005f04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e60:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <prvIdleTask+0x28>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d9f9      	bls.n	8005e5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <prvIdleTask+0x2c>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e78:	e7f0      	b.n	8005e5c <prvIdleTask+0x8>
 8005e7a:	bf00      	nop
 8005e7c:	20000cd4 	.word	0x20000cd4
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	e00c      	b.n	8005eaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ee4 <prvInitialiseTaskLists+0x60>)
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fcb4 	bl	800480c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b37      	cmp	r3, #55	@ 0x37
 8005eae:	d9ef      	bls.n	8005e90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb0:	480d      	ldr	r0, [pc, #52]	@ (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005eb2:	f7fe fcab 	bl	800480c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb6:	480d      	ldr	r0, [pc, #52]	@ (8005eec <prvInitialiseTaskLists+0x68>)
 8005eb8:	f7fe fca8 	bl	800480c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ebc:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <prvInitialiseTaskLists+0x6c>)
 8005ebe:	f7fe fca5 	bl	800480c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ec2:	480c      	ldr	r0, [pc, #48]	@ (8005ef4 <prvInitialiseTaskLists+0x70>)
 8005ec4:	f7fe fca2 	bl	800480c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec8:	480b      	ldr	r0, [pc, #44]	@ (8005ef8 <prvInitialiseTaskLists+0x74>)
 8005eca:	f7fe fc9f 	bl	800480c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <prvInitialiseTaskLists+0x78>)
 8005ed0:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005ed2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <prvInitialiseTaskLists+0x7c>)
 8005ed6:	4a05      	ldr	r2, [pc, #20]	@ (8005eec <prvInitialiseTaskLists+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000cd4 	.word	0x20000cd4
 8005ee8:	20001134 	.word	0x20001134
 8005eec:	20001148 	.word	0x20001148
 8005ef0:	20001164 	.word	0x20001164
 8005ef4:	20001178 	.word	0x20001178
 8005ef8:	20001190 	.word	0x20001190
 8005efc:	2000115c 	.word	0x2000115c
 8005f00:	20001160 	.word	0x20001160

08005f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0a:	e019      	b.n	8005f40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f0c:	f000 fdb4 	bl	8006a78 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fcff 	bl	8004920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4a0b      	ldr	r2, [pc, #44]	@ (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a0a      	ldr	r2, [pc, #40]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f36:	f000 fdd1 	bl	8006adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f810 	bl	8005f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f40:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <prvCheckTasksWaitingTermination+0x58>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e1      	bne.n	8005f0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20001178 	.word	0x20001178
 8005f58:	200011a4 	.word	0x200011a4
 8005f5c:	2000118c 	.word	0x2000118c

08005f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3354      	adds	r3, #84	@ 0x54
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f88d 	bl	800708c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 ff63 	bl	8006e4c <vPortFree>
				vPortFree( pxTCB );
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 ff60 	bl	8006e4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f8c:	e019      	b.n	8005fc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d103      	bne.n	8005fa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 ff57 	bl	8006e4c <vPortFree>
	}
 8005f9e:	e010      	b.n	8005fc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d00b      	beq.n	8005fc2 <prvDeleteTCB+0x62>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60fb      	str	r3, [r7, #12]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <prvDeleteTCB+0x5e>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <prvResetNextTaskUnblockTime+0x44>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <prvResetNextTaskUnblockTime+0x14>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <prvResetNextTaskUnblockTime+0x16>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <prvResetNextTaskUnblockTime+0x48>)
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fee:	e008      	b.n	8006002 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <prvResetNextTaskUnblockTime+0x44>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4a05      	ldr	r2, [pc, #20]	@ (8006014 <prvResetNextTaskUnblockTime+0x48>)
 8006000:	6013      	str	r3, [r2, #0]
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000115c 	.word	0x2000115c
 8006014:	200011c4 	.word	0x200011c4

08006018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800601e:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <xTaskGetSchedulerState+0x34>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006026:	2301      	movs	r3, #1
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	e008      	b.n	800603e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602c:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <xTaskGetSchedulerState+0x38>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006034:	2302      	movs	r3, #2
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	e001      	b.n	800603e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800603e:	687b      	ldr	r3, [r7, #4]
	}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	200011b0 	.word	0x200011b0
 8006050:	200011cc 	.word	0x200011cc

08006054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d058      	beq.n	800611c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800606a:	4b2f      	ldr	r3, [pc, #188]	@ (8006128 <xTaskPriorityDisinherit+0xd4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	429a      	cmp	r2, r3
 8006072:	d00b      	beq.n	800608c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60fb      	str	r3, [r7, #12]
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60bb      	str	r3, [r7, #8]
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d02c      	beq.n	800611c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d128      	bne.n	800611c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fc26 	bl	8004920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ec:	4b0f      	ldr	r3, [pc, #60]	@ (800612c <xTaskPriorityDisinherit+0xd8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskPriorityDisinherit+0xa8>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f8:	4a0c      	ldr	r2, [pc, #48]	@ (800612c <xTaskPriorityDisinherit+0xd8>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <xTaskPriorityDisinherit+0xdc>)
 800610a:	441a      	add	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fba7 	bl	8004866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800611c:	697b      	ldr	r3, [r7, #20]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000cd0 	.word	0x20000cd0
 800612c:	200011ac 	.word	0x200011ac
 8006130:	20000cd4 	.word	0x20000cd4

08006134 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613e:	4b21      	ldr	r3, [pc, #132]	@ (80061c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006144:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fbe8 	bl	8004920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d10a      	bne.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b1a      	ldr	r3, [pc, #104]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4819      	ldr	r0, [pc, #100]	@ (80061cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006168:	f7fe fb7d 	bl	8004866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800616c:	e026      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006176:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d209      	bcs.n	800619a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006186:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe fb8b 	bl	80048ae <vListInsert>
}
 8006198:	e010      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619a:	4b0e      	ldr	r3, [pc, #56]	@ (80061d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe fb81 	bl	80048ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d202      	bcs.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061b6:	4a08      	ldr	r2, [pc, #32]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200011a8 	.word	0x200011a8
 80061c8:	20000cd0 	.word	0x20000cd0
 80061cc:	20001190 	.word	0x20001190
 80061d0:	20001160 	.word	0x20001160
 80061d4:	2000115c 	.word	0x2000115c
 80061d8:	200011c4 	.word	0x200011c4

080061dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061e6:	f000 fad9 	bl	800679c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <xTimerCreateTimerTask+0x84>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d021      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061fa:	1d3a      	adds	r2, r7, #4
 80061fc:	f107 0108 	add.w	r1, r7, #8
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe fae7 	bl	80047d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	9202      	str	r2, [sp, #8]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	2302      	movs	r3, #2
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	460a      	mov	r2, r1
 800621c:	4911      	ldr	r1, [pc, #68]	@ (8006264 <xTimerCreateTimerTask+0x88>)
 800621e:	4812      	ldr	r0, [pc, #72]	@ (8006268 <xTimerCreateTimerTask+0x8c>)
 8006220:	f7ff f8a0 	bl	8005364 <xTaskCreateStatic>
 8006224:	4603      	mov	r3, r0
 8006226:	4a11      	ldr	r2, [pc, #68]	@ (800626c <xTimerCreateTimerTask+0x90>)
 8006228:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <xTimerCreateTimerTask+0x90>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	613b      	str	r3, [r7, #16]
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20001200 	.word	0x20001200
 8006264:	0800728c 	.word	0x0800728c
 8006268:	08006391 	.word	0x08006391
 800626c:	20001204 	.word	0x20001204

08006270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	e7fd      	b.n	800629c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062a0:	4b19      	ldr	r3, [pc, #100]	@ (8006308 <xTimerGenericCommand+0x98>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d02a      	beq.n	80062fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	dc18      	bgt.n	80062ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062ba:	f7ff fead 	bl	8006018 <xTaskGetSchedulerState>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d109      	bne.n	80062d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062c4:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <xTimerGenericCommand+0x98>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	f107 0110 	add.w	r1, r7, #16
 80062cc:	2300      	movs	r3, #0
 80062ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d0:	f7fe fc5a 	bl	8004b88 <xQueueGenericSend>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80062d6:	e012      	b.n	80062fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <xTimerGenericCommand+0x98>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	f107 0110 	add.w	r1, r7, #16
 80062e0:	2300      	movs	r3, #0
 80062e2:	2200      	movs	r2, #0
 80062e4:	f7fe fc50 	bl	8004b88 <xQueueGenericSend>
 80062e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ea:	e008      	b.n	80062fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062ec:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <xTimerGenericCommand+0x98>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	f107 0110 	add.w	r1, r7, #16
 80062f4:	2300      	movs	r3, #0
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	f7fe fd48 	bl	8004d8c <xQueueGenericSendFromISR>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006300:	4618      	mov	r0, r3
 8006302:	3728      	adds	r7, #40	@ 0x28
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20001200 	.word	0x20001200

0800630c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006316:	4b1d      	ldr	r3, [pc, #116]	@ (800638c <prvProcessExpiredTimer+0x80>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3304      	adds	r3, #4
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fafb 	bl	8004920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d123      	bne.n	800637a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	18d1      	adds	r1, r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	6978      	ldr	r0, [r7, #20]
 8006340:	f000 f8cc 	bl	80064dc <prvInsertTimerInActiveList>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d017      	beq.n	800637a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	2100      	movs	r1, #0
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f7ff ff8b 	bl	8006270 <xTimerGenericCommand>
 800635a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60fb      	str	r3, [r7, #12]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	4798      	blx	r3
}
 8006382:	bf00      	nop
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200011f8 	.word	0x200011f8

08006390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	4618      	mov	r0, r3
 800639e:	f000 f859 	bl	8006454 <prvGetNextExpireTime>
 80063a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4619      	mov	r1, r3
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f805 	bl	80063b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ae:	f000 f8d7 	bl	8006560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b2:	bf00      	nop
 80063b4:	e7f0      	b.n	8006398 <prvTimerTask+0x8>
	...

080063b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063c2:	f7ff fa29 	bl	8005818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f866 	bl	800649c <prvSampleTimeNow>
 80063d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d130      	bne.n	800643a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d806      	bhi.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063e6:	f7ff fa25 	bl	8005834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff8d 	bl	800630c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063f2:	e024      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063fa:	4b13      	ldr	r3, [pc, #76]	@ (8006448 <prvProcessTimerOrBlockTask+0x90>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800640c:	4b0f      	ldr	r3, [pc, #60]	@ (800644c <prvProcessTimerOrBlockTask+0x94>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	f7fe ff6f 	bl	80052fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800641e:	f7ff fa09 	bl	8005834 <xTaskResumeAll>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <prvProcessTimerOrBlockTask+0x98>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
}
 8006438:	e001      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800643a:	f7ff f9fb 	bl	8005834 <xTaskResumeAll>
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200011fc 	.word	0x200011fc
 800644c:	20001200 	.word	0x20001200
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800645c:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <prvGetNextExpireTime+0x44>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647a:	4b07      	ldr	r3, [pc, #28]	@ (8006498 <prvGetNextExpireTime+0x44>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	200011f8 	.word	0x200011f8

0800649c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064a4:	f7ff fa64 	bl	8005970 <xTaskGetTickCount>
 80064a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064aa:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <prvSampleTimeNow+0x3c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d205      	bcs.n	80064c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064b4:	f000 f910 	bl	80066d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e002      	b.n	80064c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064c6:	4a04      	ldr	r2, [pc, #16]	@ (80064d8 <prvSampleTimeNow+0x3c>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064cc:	68fb      	ldr	r3, [r7, #12]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20001208 	.word	0x20001208

080064dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d812      	bhi.n	8006528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e01b      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006516:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <prvInsertTimerInActiveList+0x7c>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe f9c4 	bl	80048ae <vListInsert>
 8006526:	e012      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d206      	bcs.n	800653e <prvInsertTimerInActiveList+0x62>
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e007      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800653e:	4b07      	ldr	r3, [pc, #28]	@ (800655c <prvInsertTimerInActiveList+0x80>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fe f9b0 	bl	80048ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800654e:	697b      	ldr	r3, [r7, #20]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	200011fc 	.word	0x200011fc
 800655c:	200011f8 	.word	0x200011f8

08006560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	@ 0x38
 8006564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006566:	e0a5      	b.n	80066b4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da19      	bge.n	80065a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	3304      	adds	r3, #4
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	61fb      	str	r3, [r7, #28]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006598:	6850      	ldr	r0, [r2, #4]
 800659a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800659c:	6892      	ldr	r2, [r2, #8]
 800659e:	4611      	mov	r1, r2
 80065a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f2c0 8085 	blt.w	80066b4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe f9b0 	bl	8004920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065c0:	463b      	mov	r3, r7
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff6a 	bl	800649c <prvSampleTimeNow>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	d86c      	bhi.n	80066aa <prvProcessReceivedCommands+0x14a>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <prvProcessReceivedCommands+0x78>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	08006601 	.word	0x08006601
 80065dc:	08006601 	.word	0x08006601
 80065e0:	08006601 	.word	0x08006601
 80065e4:	080066ab 	.word	0x080066ab
 80065e8:	0800665f 	.word	0x0800665f
 80065ec:	08006699 	.word	0x08006699
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006601 	.word	0x08006601
 80065f8:	080066ab 	.word	0x080066ab
 80065fc:	0800665f 	.word	0x0800665f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	18d1      	adds	r1, r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800660e:	f7ff ff65 	bl	80064dc <prvInsertTimerInActiveList>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d04a      	beq.n	80066ae <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800661e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d142      	bne.n	80066ae <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	441a      	add	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	2100      	movs	r1, #0
 8006638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800663a:	f7ff fe19 	bl	8006270 <xTimerGenericCommand>
 800663e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d133      	bne.n	80066ae <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61bb      	str	r3, [r7, #24]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	617b      	str	r3, [r7, #20]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	18d1      	adds	r1, r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006692:	f7ff ff23 	bl	80064dc <prvInsertTimerInActiveList>
					break;
 8006696:	e00d      	b.n	80066b4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d107      	bne.n	80066b2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80066a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a4:	f000 fbd2 	bl	8006e4c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066a8:	e003      	b.n	80066b2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <prvProcessReceivedCommands+0x154>
					break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <prvProcessReceivedCommands+0x154>
					break;
 80066b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066b4:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <prvProcessReceivedCommands+0x174>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1d39      	adds	r1, r7, #4
 80066ba:	2200      	movs	r2, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe fc01 	bl	8004ec4 <xQueueReceive>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f af4f 	bne.w	8006568 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	3730      	adds	r7, #48	@ 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001200 	.word	0x20001200

080066d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066de:	e046      	b.n	800676e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe f911 	bl	8004920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d12f      	bne.n	800676e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d90e      	bls.n	800673e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800672c:	4b19      	ldr	r3, [pc, #100]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fe f8b9 	bl	80048ae <vListInsert>
 800673c:	e017      	b.n	800676e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	2100      	movs	r1, #0
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fd91 	bl	8006270 <xTimerGenericCommand>
 800674e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10b      	bne.n	800676e <prvSwitchTimerLists+0x96>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800676e:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1b3      	bne.n	80066e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006778:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800677e:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <prvSwitchTimerLists+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a04      	ldr	r2, [pc, #16]	@ (8006794 <prvSwitchTimerLists+0xbc>)
 8006784:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006786:	4a04      	ldr	r2, [pc, #16]	@ (8006798 <prvSwitchTimerLists+0xc0>)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200011f8 	.word	0x200011f8
 8006798:	200011fc 	.word	0x200011fc

0800679c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067a2:	f000 f969 	bl	8006a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <prvCheckForValidListAndQueue+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d120      	bne.n	80067f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ae:	4814      	ldr	r0, [pc, #80]	@ (8006800 <prvCheckForValidListAndQueue+0x64>)
 80067b0:	f7fe f82c 	bl	800480c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067b4:	4813      	ldr	r0, [pc, #76]	@ (8006804 <prvCheckForValidListAndQueue+0x68>)
 80067b6:	f7fe f829 	bl	800480c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067ba:	4b13      	ldr	r3, [pc, #76]	@ (8006808 <prvCheckForValidListAndQueue+0x6c>)
 80067bc:	4a10      	ldr	r2, [pc, #64]	@ (8006800 <prvCheckForValidListAndQueue+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067c0:	4b12      	ldr	r3, [pc, #72]	@ (800680c <prvCheckForValidListAndQueue+0x70>)
 80067c2:	4a10      	ldr	r2, [pc, #64]	@ (8006804 <prvCheckForValidListAndQueue+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067c6:	2300      	movs	r3, #0
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <prvCheckForValidListAndQueue+0x74>)
 80067cc:	4a11      	ldr	r2, [pc, #68]	@ (8006814 <prvCheckForValidListAndQueue+0x78>)
 80067ce:	2110      	movs	r1, #16
 80067d0:	200a      	movs	r0, #10
 80067d2:	f7fe f939 	bl	8004a48 <xQueueGenericCreateStatic>
 80067d6:	4603      	mov	r3, r0
 80067d8:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <prvCheckForValidListAndQueue+0x60>)
 80067da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <prvCheckForValidListAndQueue+0x60>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067e4:	4b05      	ldr	r3, [pc, #20]	@ (80067fc <prvCheckForValidListAndQueue+0x60>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	490b      	ldr	r1, [pc, #44]	@ (8006818 <prvCheckForValidListAndQueue+0x7c>)
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe fd5c 	bl	80052a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067f0:	f000 f974 	bl	8006adc <vPortExitCritical>
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20001200 	.word	0x20001200
 8006800:	200011d0 	.word	0x200011d0
 8006804:	200011e4 	.word	0x200011e4
 8006808:	200011f8 	.word	0x200011f8
 800680c:	200011fc 	.word	0x200011fc
 8006810:	200012ac 	.word	0x200012ac
 8006814:	2000120c 	.word	0x2000120c
 8006818:	08007294 	.word	0x08007294

0800681c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3b04      	subs	r3, #4
 800682c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b04      	subs	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800684c:	4a0c      	ldr	r2, [pc, #48]	@ (8006880 <pxPortInitialiseStack+0x64>)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b14      	subs	r3, #20
 8006856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3b04      	subs	r3, #4
 8006862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f06f 0202 	mvn.w	r2, #2
 800686a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3b20      	subs	r3, #32
 8006870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	08006885 	.word	0x08006885

08006884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <prvTaskExitError+0x58>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d00b      	beq.n	80068b0 <prvTaskExitError+0x2c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <prvTaskExitError+0x28>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60bb      	str	r3, [r7, #8]
}
 80068c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068c4:	bf00      	nop
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0fc      	beq.n	80068c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst2>:
 8006900:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006908:	4808      	ldr	r0, [pc, #32]	@ (800692c <prvPortStartFirstTask+0x24>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8814 	msr	CONTROL, r0
 800691a:	b662      	cpsie	i
 800691c:	b661      	cpsie	f
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	df00      	svc	0
 8006928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800692a:	bf00      	nop
 800692c:	e000ed08 	.word	0xe000ed08

08006930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006936:	4b47      	ldr	r3, [pc, #284]	@ (8006a54 <xPortStartScheduler+0x124>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a47      	ldr	r2, [pc, #284]	@ (8006a58 <xPortStartScheduler+0x128>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10b      	bne.n	8006958 <xPortStartScheduler+0x28>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006958:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <xPortStartScheduler+0x124>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a5c <xPortStartScheduler+0x12c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10b      	bne.n	800697a <xPortStartScheduler+0x4a>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	613b      	str	r3, [r7, #16]
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800697a:	4b39      	ldr	r3, [pc, #228]	@ (8006a60 <xPortStartScheduler+0x130>)
 800697c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	22ff      	movs	r2, #255	@ 0xff
 800698a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800699c:	b2da      	uxtb	r2, r3
 800699e:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <xPortStartScheduler+0x134>)
 80069a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069a2:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069a4:	2207      	movs	r2, #7
 80069a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069a8:	e009      	b.n	80069be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b80      	cmp	r3, #128	@ 0x80
 80069c8:	d0ef      	beq.n	80069aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069ca:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1c3 0307 	rsb	r3, r3, #7
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00b      	beq.n	80069ee <xPortStartScheduler+0xbe>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60bb      	str	r3, [r7, #8]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a00:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <xPortStartScheduler+0x138>)
 8006a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a0c:	4b17      	ldr	r3, [pc, #92]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a16      	ldr	r2, [pc, #88]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a18:	4b14      	ldr	r3, [pc, #80]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a24:	f000 f8da 	bl	8006bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a28:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <xPortStartScheduler+0x140>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a2e:	f000 f8f9 	bl	8006c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <xPortStartScheduler+0x144>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a0f      	ldr	r2, [pc, #60]	@ (8006a74 <xPortStartScheduler+0x144>)
 8006a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a3e:	f7ff ff63 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a42:	f7ff f865 	bl	8005b10 <vTaskSwitchContext>
	prvTaskExitError();
 8006a46:	f7ff ff1d 	bl	8006884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	e000ed00 	.word	0xe000ed00
 8006a58:	410fc271 	.word	0x410fc271
 8006a5c:	410fc270 	.word	0x410fc270
 8006a60:	e000e400 	.word	0xe000e400
 8006a64:	200012fc 	.word	0x200012fc
 8006a68:	20001300 	.word	0x20001300
 8006a6c:	e000ed20 	.word	0xe000ed20
 8006a70:	2000000c 	.word	0x2000000c
 8006a74:	e000ef34 	.word	0xe000ef34

08006a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d110      	bne.n	8006ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <vPortEnterCritical+0x60>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <vPortEnterCritical+0x4a>
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000000c 	.word	0x2000000c
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <vPortExitCritical+0x50>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <vPortExitCritical+0x26>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	607b      	str	r3, [r7, #4]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	4a08      	ldr	r2, [pc, #32]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b0c:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <vPortExitCritical+0x44>
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	2000000c 	.word	0x2000000c

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7fe ffd6 	bl	8005b10 <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7fe feed 	bl	8005990 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <SysTick_Handler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <vPortSetupTimerInterrupt+0x38>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <vPortSetupTimerInterrupt+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <vPortSetupTimerInterrupt+0x40>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <vPortSetupTimerInterrupt+0x44>)
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfe:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	e000e010 	.word	0xe000e010
 8006c14:	e000e018 	.word	0xe000e018
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	10624dd3 	.word	0x10624dd3
 8006c20:	e000e014 	.word	0xe000e014

08006c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c34 <vPortEnableVFP+0x10>
 8006c28:	6801      	ldr	r1, [r0, #0]
 8006c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c2e:	6001      	str	r1, [r0, #0]
 8006c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c32:	bf00      	nop
 8006c34:	e000ed88 	.word	0xe000ed88

08006c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d915      	bls.n	8006c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c4a:	4a18      	ldr	r2, [pc, #96]	@ (8006cac <vPortValidateInterruptPriority+0x74>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c54:	4b16      	ldr	r3, [pc, #88]	@ (8006cb0 <vPortValidateInterruptPriority+0x78>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	7afa      	ldrb	r2, [r7, #11]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20b      	bcs.n	8006c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <vPortValidateInterruptPriority+0x7c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb8 <vPortValidateInterruptPriority+0x80>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90b      	bls.n	8006c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	603b      	str	r3, [r7, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <vPortValidateInterruptPriority+0x62>
	}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e000e3f0 	.word	0xe000e3f0
 8006cb0:	200012fc 	.word	0x200012fc
 8006cb4:	e000ed0c 	.word	0xe000ed0c
 8006cb8:	20001300 	.word	0x20001300

08006cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	@ 0x28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc8:	f7fe fda6 	bl	8005818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e38 <pvPortMalloc+0x17c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cd4:	f000 f916 	bl	8006f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd8:	4b58      	ldr	r3, [pc, #352]	@ (8006e3c <pvPortMalloc+0x180>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 8090 	bne.w	8006e06 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01e      	beq.n	8006d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006cec:	2208      	movs	r2, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d015      	beq.n	8006d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f023 0307 	bic.w	r3, r3, #7
 8006d04:	3308      	adds	r3, #8
 8006d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <pvPortMalloc+0x6e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	617b      	str	r3, [r7, #20]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d06a      	beq.n	8006e06 <pvPortMalloc+0x14a>
 8006d30:	4b43      	ldr	r3, [pc, #268]	@ (8006e40 <pvPortMalloc+0x184>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d865      	bhi.n	8006e06 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d3a:	4b42      	ldr	r3, [pc, #264]	@ (8006e44 <pvPortMalloc+0x188>)
 8006d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d3e:	4b41      	ldr	r3, [pc, #260]	@ (8006e44 <pvPortMalloc+0x188>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d44:	e004      	b.n	8006d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d903      	bls.n	8006d62 <pvPortMalloc+0xa6>
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f1      	bne.n	8006d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d62:	4b35      	ldr	r3, [pc, #212]	@ (8006e38 <pvPortMalloc+0x17c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d04c      	beq.n	8006e06 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4413      	add	r3, r2
 8006d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	2308      	movs	r3, #8
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d920      	bls.n	8006dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <pvPortMalloc+0xfc>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dca:	69b8      	ldr	r0, [r7, #24]
 8006dcc:	f000 f8fc 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e40 <pvPortMalloc+0x184>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	4a19      	ldr	r2, [pc, #100]	@ (8006e40 <pvPortMalloc+0x184>)
 8006ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dde:	4b18      	ldr	r3, [pc, #96]	@ (8006e40 <pvPortMalloc+0x184>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b19      	ldr	r3, [pc, #100]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d203      	bcs.n	8006df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <pvPortMalloc+0x184>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a16      	ldr	r2, [pc, #88]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <pvPortMalloc+0x180>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e06:	f7fe fd15 	bl	8005834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <pvPortMalloc+0x170>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <pvPortMalloc+0x16c>
	return pvReturn;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3728      	adds	r7, #40	@ 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20001f0c 	.word	0x20001f0c
 8006e3c:	20001f18 	.word	0x20001f18
 8006e40:	20001f10 	.word	0x20001f10
 8006e44:	20001f04 	.word	0x20001f04
 8006e48:	20001f14 	.word	0x20001f14

08006e4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04a      	beq.n	8006ef4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e5e:	2308      	movs	r3, #8
 8006e60:	425b      	negs	r3, r3
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b22      	ldr	r3, [pc, #136]	@ (8006efc <vPortFree+0xb0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <vPortFree+0x46>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	60fb      	str	r3, [r7, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <vPortFree+0x66>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <vPortFree+0xb0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d019      	beq.n	8006ef4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d115      	bne.n	8006ef4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <vPortFree+0xb0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ed8:	f7fe fc9e 	bl	8005818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <vPortFree+0xb4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4a06      	ldr	r2, [pc, #24]	@ (8006f00 <vPortFree+0xb4>)
 8006ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 f86c 	bl	8006fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ef0:	f7fe fca0 	bl	8005834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20001f18 	.word	0x20001f18
 8006f00:	20001f10 	.word	0x20001f10

08006f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <prvHeapInit+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0307 	bic.w	r3, r3, #7
 8006f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb0 <prvHeapInit+0xac>)
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb4 <prvHeapInit+0xb0>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f42:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb4 <prvHeapInit+0xb0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f50:	2208      	movs	r2, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <prvHeapInit+0xb4>)
 8006f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f66:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <prvHeapInit+0xb4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <prvHeapInit+0xb4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <prvHeapInit+0xb4>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <prvHeapInit+0xb8>)
 8006f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a09      	ldr	r2, [pc, #36]	@ (8006fc0 <prvHeapInit+0xbc>)
 8006f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <prvHeapInit+0xc0>)
 8006f9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fa2:	601a      	str	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20001304 	.word	0x20001304
 8006fb4:	20001f04 	.word	0x20001f04
 8006fb8:	20001f0c 	.word	0x20001f0c
 8006fbc:	20001f14 	.word	0x20001f14
 8006fc0:	20001f10 	.word	0x20001f10
 8006fc4:	20001f18 	.word	0x20001f18

08006fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fd0:	4b28      	ldr	r3, [pc, #160]	@ (8007074 <prvInsertBlockIntoFreeList+0xac>)
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <prvInsertBlockIntoFreeList+0x14>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d8f7      	bhi.n	8006fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d108      	bne.n	800700a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	441a      	add	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d118      	bne.n	8007050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d00d      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e008      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007046:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e003      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20001f04 	.word	0x20001f04
 8007078:	20001f0c 	.word	0x20001f0c

0800707c <memset>:
 800707c:	4402      	add	r2, r0
 800707e:	4603      	mov	r3, r0
 8007080:	4293      	cmp	r3, r2
 8007082:	d100      	bne.n	8007086 <memset+0xa>
 8007084:	4770      	bx	lr
 8007086:	f803 1b01 	strb.w	r1, [r3], #1
 800708a:	e7f9      	b.n	8007080 <memset+0x4>

0800708c <_reclaim_reent>:
 800708c:	4b2d      	ldr	r3, [pc, #180]	@ (8007144 <_reclaim_reent+0xb8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4283      	cmp	r3, r0
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	4604      	mov	r4, r0
 8007096:	d053      	beq.n	8007140 <_reclaim_reent+0xb4>
 8007098:	69c3      	ldr	r3, [r0, #28]
 800709a:	b31b      	cbz	r3, 80070e4 <_reclaim_reent+0x58>
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	b163      	cbz	r3, 80070ba <_reclaim_reent+0x2e>
 80070a0:	2500      	movs	r5, #0
 80070a2:	69e3      	ldr	r3, [r4, #28]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	5959      	ldr	r1, [r3, r5]
 80070a8:	b9b1      	cbnz	r1, 80070d8 <_reclaim_reent+0x4c>
 80070aa:	3504      	adds	r5, #4
 80070ac:	2d80      	cmp	r5, #128	@ 0x80
 80070ae:	d1f8      	bne.n	80070a2 <_reclaim_reent+0x16>
 80070b0:	69e3      	ldr	r3, [r4, #28]
 80070b2:	4620      	mov	r0, r4
 80070b4:	68d9      	ldr	r1, [r3, #12]
 80070b6:	f000 f87b 	bl	80071b0 <_free_r>
 80070ba:	69e3      	ldr	r3, [r4, #28]
 80070bc:	6819      	ldr	r1, [r3, #0]
 80070be:	b111      	cbz	r1, 80070c6 <_reclaim_reent+0x3a>
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 f875 	bl	80071b0 <_free_r>
 80070c6:	69e3      	ldr	r3, [r4, #28]
 80070c8:	689d      	ldr	r5, [r3, #8]
 80070ca:	b15d      	cbz	r5, 80070e4 <_reclaim_reent+0x58>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	682d      	ldr	r5, [r5, #0]
 80070d2:	f000 f86d 	bl	80071b0 <_free_r>
 80070d6:	e7f8      	b.n	80070ca <_reclaim_reent+0x3e>
 80070d8:	680e      	ldr	r6, [r1, #0]
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f868 	bl	80071b0 <_free_r>
 80070e0:	4631      	mov	r1, r6
 80070e2:	e7e1      	b.n	80070a8 <_reclaim_reent+0x1c>
 80070e4:	6961      	ldr	r1, [r4, #20]
 80070e6:	b111      	cbz	r1, 80070ee <_reclaim_reent+0x62>
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 f861 	bl	80071b0 <_free_r>
 80070ee:	69e1      	ldr	r1, [r4, #28]
 80070f0:	b111      	cbz	r1, 80070f8 <_reclaim_reent+0x6c>
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 f85c 	bl	80071b0 <_free_r>
 80070f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80070fa:	b111      	cbz	r1, 8007102 <_reclaim_reent+0x76>
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 f857 	bl	80071b0 <_free_r>
 8007102:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007104:	b111      	cbz	r1, 800710c <_reclaim_reent+0x80>
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f852 	bl	80071b0 <_free_r>
 800710c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800710e:	b111      	cbz	r1, 8007116 <_reclaim_reent+0x8a>
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f84d 	bl	80071b0 <_free_r>
 8007116:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007118:	b111      	cbz	r1, 8007120 <_reclaim_reent+0x94>
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f848 	bl	80071b0 <_free_r>
 8007120:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007122:	b111      	cbz	r1, 800712a <_reclaim_reent+0x9e>
 8007124:	4620      	mov	r0, r4
 8007126:	f000 f843 	bl	80071b0 <_free_r>
 800712a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800712c:	b111      	cbz	r1, 8007134 <_reclaim_reent+0xa8>
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f83e 	bl	80071b0 <_free_r>
 8007134:	6a23      	ldr	r3, [r4, #32]
 8007136:	b11b      	cbz	r3, 8007140 <_reclaim_reent+0xb4>
 8007138:	4620      	mov	r0, r4
 800713a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800713e:	4718      	bx	r3
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	bf00      	nop
 8007144:	20000010 	.word	0x20000010

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4d0d      	ldr	r5, [pc, #52]	@ (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	@ (8007184 <__libc_init_array+0x3c>)
 800714e:	1b64      	subs	r4, r4, r5
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2600      	movs	r6, #0
 8007154:	42a6      	cmp	r6, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4d0b      	ldr	r5, [pc, #44]	@ (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	@ (800718c <__libc_init_array+0x44>)
 800715c:	f000 f87e 	bl	800725c <_init>
 8007160:	1b64      	subs	r4, r4, r5
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2600      	movs	r6, #0
 8007166:	42a6      	cmp	r6, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007170:	4798      	blx	r3
 8007172:	3601      	adds	r6, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f855 3b04 	ldr.w	r3, [r5], #4
 800717a:	4798      	blx	r3
 800717c:	3601      	adds	r6, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	0800731c 	.word	0x0800731c
 8007184:	0800731c 	.word	0x0800731c
 8007188:	0800731c 	.word	0x0800731c
 800718c:	08007320 	.word	0x08007320

08007190 <__retarget_lock_acquire_recursive>:
 8007190:	4770      	bx	lr

08007192 <__retarget_lock_release_recursive>:
 8007192:	4770      	bx	lr

08007194 <memcpy>:
 8007194:	440a      	add	r2, r1
 8007196:	4291      	cmp	r1, r2
 8007198:	f100 33ff 	add.w	r3, r0, #4294967295
 800719c:	d100      	bne.n	80071a0 <memcpy+0xc>
 800719e:	4770      	bx	lr
 80071a0:	b510      	push	{r4, lr}
 80071a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071aa:	4291      	cmp	r1, r2
 80071ac:	d1f9      	bne.n	80071a2 <memcpy+0xe>
 80071ae:	bd10      	pop	{r4, pc}

080071b0 <_free_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4605      	mov	r5, r0
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d041      	beq.n	800723c <_free_r+0x8c>
 80071b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071bc:	1f0c      	subs	r4, r1, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfb8      	it	lt
 80071c2:	18e4      	addlt	r4, r4, r3
 80071c4:	f000 f83e 	bl	8007244 <__malloc_lock>
 80071c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007240 <_free_r+0x90>)
 80071ca:	6813      	ldr	r3, [r2, #0]
 80071cc:	b933      	cbnz	r3, 80071dc <_free_r+0x2c>
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	6014      	str	r4, [r2, #0]
 80071d2:	4628      	mov	r0, r5
 80071d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d8:	f000 b83a 	b.w	8007250 <__malloc_unlock>
 80071dc:	42a3      	cmp	r3, r4
 80071de:	d908      	bls.n	80071f2 <_free_r+0x42>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	1821      	adds	r1, r4, r0
 80071e4:	428b      	cmp	r3, r1
 80071e6:	bf01      	itttt	eq
 80071e8:	6819      	ldreq	r1, [r3, #0]
 80071ea:	685b      	ldreq	r3, [r3, #4]
 80071ec:	1809      	addeq	r1, r1, r0
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	e7ed      	b.n	80071ce <_free_r+0x1e>
 80071f2:	461a      	mov	r2, r3
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b10b      	cbz	r3, 80071fc <_free_r+0x4c>
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d9fa      	bls.n	80071f2 <_free_r+0x42>
 80071fc:	6811      	ldr	r1, [r2, #0]
 80071fe:	1850      	adds	r0, r2, r1
 8007200:	42a0      	cmp	r0, r4
 8007202:	d10b      	bne.n	800721c <_free_r+0x6c>
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	4401      	add	r1, r0
 8007208:	1850      	adds	r0, r2, r1
 800720a:	4283      	cmp	r3, r0
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	d1e0      	bne.n	80071d2 <_free_r+0x22>
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	6053      	str	r3, [r2, #4]
 8007216:	4408      	add	r0, r1
 8007218:	6010      	str	r0, [r2, #0]
 800721a:	e7da      	b.n	80071d2 <_free_r+0x22>
 800721c:	d902      	bls.n	8007224 <_free_r+0x74>
 800721e:	230c      	movs	r3, #12
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	e7d6      	b.n	80071d2 <_free_r+0x22>
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	1821      	adds	r1, r4, r0
 8007228:	428b      	cmp	r3, r1
 800722a:	bf04      	itt	eq
 800722c:	6819      	ldreq	r1, [r3, #0]
 800722e:	685b      	ldreq	r3, [r3, #4]
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	bf04      	itt	eq
 8007234:	1809      	addeq	r1, r1, r0
 8007236:	6021      	streq	r1, [r4, #0]
 8007238:	6054      	str	r4, [r2, #4]
 800723a:	e7ca      	b.n	80071d2 <_free_r+0x22>
 800723c:	bd38      	pop	{r3, r4, r5, pc}
 800723e:	bf00      	nop
 8007240:	20002058 	.word	0x20002058

08007244 <__malloc_lock>:
 8007244:	4801      	ldr	r0, [pc, #4]	@ (800724c <__malloc_lock+0x8>)
 8007246:	f7ff bfa3 	b.w	8007190 <__retarget_lock_acquire_recursive>
 800724a:	bf00      	nop
 800724c:	20002054 	.word	0x20002054

08007250 <__malloc_unlock>:
 8007250:	4801      	ldr	r0, [pc, #4]	@ (8007258 <__malloc_unlock+0x8>)
 8007252:	f7ff bf9e 	b.w	8007192 <__retarget_lock_release_recursive>
 8007256:	bf00      	nop
 8007258:	20002054 	.word	0x20002054

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
