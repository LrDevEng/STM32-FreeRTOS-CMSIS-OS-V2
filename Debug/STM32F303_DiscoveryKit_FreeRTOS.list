
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007e24  08007e24  00008e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f18  08007f18  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f18  08007f18  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007f20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00002408  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002468  20002468  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023748  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046e7  00000000  00000000  0002c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  00030ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001614  00000000  00000000  00032af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000445b  00000000  00000000  00034104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e23  00000000  00000000  0003855f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c3c  00000000  00000000  0005b382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122fbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b48  00000000  00000000  00123004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0012ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e0c 	.word	0x08007e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007e0c 	.word	0x08007e0c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd24 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f850 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9c6 	bl	80005bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8b4 	bl	800039c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f932 	bl	800049c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f99e 	bl	8000578 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8ee 	bl	800041c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f96a 	bl	8000518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9be 	bl	80045c4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000248:	4a14      	ldr	r2, [pc, #80]	@ (800029c <main+0x7c>)
 800024a:	2100      	movs	r1, #0
 800024c:	2002      	movs	r0, #2
 800024e:	f004 fc17 	bl	8004a80 <osSemaphoreNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <main+0x80>)
 8000256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000258:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <main+0x84>)
 800025a:	2100      	movs	r1, #0
 800025c:	4812      	ldr	r0, [pc, #72]	@ (80002a8 <main+0x88>)
 800025e:	f004 fa19 	bl	8004694 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <main+0x8c>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000268:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <main+0x90>)
 800026a:	2100      	movs	r1, #0
 800026c:	4811      	ldr	r0, [pc, #68]	@ (80002b4 <main+0x94>)
 800026e:	f004 fa11 	bl	8004694 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <main+0x98>)
 8000276:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <main+0x9c>)
 800027a:	2100      	movs	r1, #0
 800027c:	4810      	ldr	r0, [pc, #64]	@ (80002c0 <main+0xa0>)
 800027e:	f004 fa09 	bl	8004694 <osThreadNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <main+0xa4>)
 8000286:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  EventGroup1 = osEventFlagsNew(NULL);
 8000288:	2000      	movs	r0, #0
 800028a:	f004 fadb 	bl	8004844 <osEventFlagsNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <main+0xa8>)
 8000292:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000294:	f004 f9ca 	bl	800462c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x78>
 800029c:	08007ed0 	.word	0x08007ed0
 80002a0:	200004f0 	.word	0x200004f0
 80002a4:	08007e64 	.word	0x08007e64
 80002a8:	08000715 	.word	0x08000715
 80002ac:	200004e4 	.word	0x200004e4
 80002b0:	08007e88 	.word	0x08007e88
 80002b4:	08000749 	.word	0x08000749
 80002b8:	200004e8 	.word	0x200004e8
 80002bc:	08007eac 	.word	0x08007eac
 80002c0:	08000775 	.word	0x08000775
 80002c4:	200004ec 	.word	0x200004ec
 80002c8:	200004f4 	.word	0x200004f4

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09e      	sub	sp, #120	@ 0x78
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f007 fca6 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	463b      	mov	r3, r7
 80002f2:	223c      	movs	r2, #60	@ 0x3c
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f007 fc98 	bl	8007c2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002fc:	2303      	movs	r3, #3
 80002fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000300:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000304:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000320:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f9f4 	bl	8001714 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000332:	f000 fa3b 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000346:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000350:	2101      	movs	r1, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f9ec 	bl	8002730 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800035e:	f000 fa25 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000362:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <SystemClock_Config+0xcc>)
 8000364:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000372:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000376:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fc54 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000386:	f000 fa11 	bl	80007ac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800038a:	f002 fb3f 	bl	8002a0c <HAL_RCC_EnableCSS>
}
 800038e:	bf00      	nop
 8000390:	3778      	adds	r7, #120	@ 0x78
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	00020062 	.word	0x00020062

0800039c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000414 <MX_I2C1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000418 <MX_I2C1_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d6:	480e      	ldr	r0, [pc, #56]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003d8:	f000 ffa2 	bl	8001320 <HAL_I2C_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 f9e3 	bl	80007ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	2100      	movs	r1, #0
 80003e8:	4809      	ldr	r0, [pc, #36]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003ea:	f001 f834 	bl	8001456 <HAL_I2CEx_ConfigAnalogFilter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f9da 	bl	80007ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f8:	2100      	movs	r1, #0
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003fc:	f001 f876 	bl	80014ec <HAL_I2CEx_ConfigDigitalFilter>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 f9d1 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40005400 	.word	0x40005400
 8000418:	00201d2b 	.word	0x00201d2b

0800041c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	@ (8000494 <MX_I2C2_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000428:	4a1b      	ldr	r2, [pc, #108]	@ (8000498 <MX_I2C2_Init+0x7c>)
 800042a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800042c:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <MX_I2C2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000432:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000434:	2201      	movs	r2, #1
 8000436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <MX_I2C2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800043e:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_I2C2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000456:	480e      	ldr	r0, [pc, #56]	@ (8000490 <MX_I2C2_Init+0x74>)
 8000458:	f000 ff62 	bl	8001320 <HAL_I2C_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000462:	f000 f9a3 	bl	80007ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000466:	2100      	movs	r1, #0
 8000468:	4809      	ldr	r0, [pc, #36]	@ (8000490 <MX_I2C2_Init+0x74>)
 800046a:	f000 fff4 	bl	8001456 <HAL_I2CEx_ConfigAnalogFilter>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f99a 	bl	80007ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000478:	2100      	movs	r1, #0
 800047a:	4805      	ldr	r0, [pc, #20]	@ (8000490 <MX_I2C2_Init+0x74>)
 800047c:	f001 f836 	bl	80014ec <HAL_I2CEx_ConfigDigitalFilter>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f991 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000d0 	.word	0x200000d0
 8000494:	40005800 	.word	0x40005800
 8000498:	00201d2b 	.word	0x00201d2b

0800049c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000514 <MX_SPI1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ae:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004b4:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004b6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c2:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004ea:	2207      	movs	r2, #7
 80004ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <MX_SPI1_Init+0x74>)
 80004fc:	f002 fd42 	bl	8002f84 <HAL_SPI_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 f951 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000124 	.word	0x20000124
 8000514:	40013000 	.word	0x40013000

08000518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800051c:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <MX_USART2_UART_Init+0x5c>)
 8000520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <MX_USART2_UART_Init+0x58>)
 800055c:	f003 f86c 	bl	8003638 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000566:	f000 f921 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000188 	.word	0x20000188
 8000574:	40004400 	.word	0x40004400

08000578 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <MX_USB_PCD_Init+0x40>)
 8000580:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 8000584:	2208      	movs	r2, #8
 8000586:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 800058a:	2202      	movs	r2, #2
 800058c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 8000590:	2202      	movs	r2, #2
 8000592:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 8000596:	2200      	movs	r2, #0
 8000598:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 800059c:	2200      	movs	r2, #0
 800059e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <MX_USB_PCD_Init+0x3c>)
 80005a2:	f000 ffef 	bl	8001584 <HAL_PCD_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005ac:	f000 f8fe 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000210 	.word	0x20000210
 80005b8:	40005c00 	.word	0x40005c00

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4b3c      	ldr	r3, [pc, #240]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a3b      	ldr	r2, [pc, #236]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b36      	ldr	r3, [pc, #216]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a35      	ldr	r2, [pc, #212]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <MX_GPIO_Init+0x108>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <MX_GPIO_Init+0x108>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_GPIO_Init+0x108>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800064a:	2200      	movs	r2, #0
 800064c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000650:	481d      	ldr	r0, [pc, #116]	@ (80006c8 <MX_GPIO_Init+0x10c>)
 8000652:	f000 fe1b 	bl	800128c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000656:	2336      	movs	r3, #54	@ 0x36
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800065a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_GPIO_Init+0x10c>)
 800066c:	f000 fc94 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000670:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000674:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480f      	ldr	r0, [pc, #60]	@ (80006c8 <MX_GPIO_Init+0x10c>)
 800068a:	f000 fc85 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800068e:	2301      	movs	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f000 fc77 	bl	8000f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2006      	movs	r0, #6
 80006b0:	f000 fbcc 	bl	8000e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b4:	2006      	movs	r0, #6
 80006b6:	f000 fbe5 	bl	8000e84 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48001000 	.word	0x48001000

080006cc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  ITM_SendChar(message);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd79 	bl	80001d0 <ITM_SendChar>
  ITM_SendChar('\n');
 80006de:	200a      	movs	r0, #10
 80006e0:	f7ff fd76 	bl	80001d0 <ITM_SendChar>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  osEventFlagsSet(EventGroup1, 0x50);
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2150      	movs	r1, #80	@ 0x50
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 f8f3 	bl	80048e8 <osEventFlagsSet>
  Task_action('!');
 8000702:	2021      	movs	r0, #33	@ 0x21
 8000704:	f7ff ffe2 	bl	80006cc <Task_action>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200004f4 	.word	0x200004f4

08000714 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
      osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <StartTask1+0x2c>)
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	2201      	movs	r2, #1
 8000726:	2151      	movs	r1, #81	@ 0x51
 8000728:	f004 f934 	bl	8004994 <osEventFlagsWait>
      Task_action('1');
 800072c:	2031      	movs	r0, #49	@ 0x31
 800072e:	f7ff ffcd 	bl	80006cc <Task_action>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <StartTask1+0x30>)
 8000738:	f000 fdc0 	bl	80012bc <HAL_GPIO_TogglePin>
      osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800073c:	bf00      	nop
 800073e:	e7ed      	b.n	800071c <StartTask1+0x8>
 8000740:	200004f4 	.word	0x200004f4
 8000744:	48001000 	.word	0x48001000

08000748 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
      osEventFlagsSet(EventGroup1, 0x01);
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <StartTask2+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f8c6 	bl	80048e8 <osEventFlagsSet>
      Task_action('2');
 800075c:	2032      	movs	r0, #50	@ 0x32
 800075e:	f7ff ffb5 	bl	80006cc <Task_action>
      osDelay(3000);
 8000762:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000766:	f004 f83f 	bl	80047e8 <osDelay>
      osEventFlagsSet(EventGroup1, 0x01);
 800076a:	bf00      	nop
 800076c:	e7f0      	b.n	8000750 <StartTask2+0x8>
 800076e:	bf00      	nop
 8000770:	200004f4 	.word	0x200004f4

08000774 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f004 f832 	bl	80047e8 <osDelay>
 8000784:	e7fa      	b.n	800077c <StartTask3+0x8>
	...

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800079a:	f000 fa7f 	bl	8000c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40001000 	.word	0x40001000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_MspInit+0x4c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <HAL_MspInit+0x4c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_MspInit+0x4c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fb29 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <HAL_I2C_MspInit+0xdc>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d128      	bne.n	800087c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a2e      	ldr	r2, [pc, #184]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000842:	23c0      	movs	r3, #192	@ 0xc0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000846:	2312      	movs	r3, #18
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000852:	2304      	movs	r3, #4
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <HAL_I2C_MspInit+0xe4>)
 800085e:	f000 fb9b 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800087a:	e02e      	b.n	80008da <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <HAL_I2C_MspInit+0xe8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d129      	bne.n	80008da <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008b0:	2304      	movs	r3, #4
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 fb6b 	bl	8000f98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 80008c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_I2C_MspInit+0xe0>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	@ 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	40005800 	.word	0x40005800

080008f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_SPI_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d128      	bne.n	8000968 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a10      	ldr	r2, [pc, #64]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000946:	23e0      	movs	r3, #224	@ 0xe0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000956:	2305      	movs	r3, #5
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000964:	f000 fb18 	bl	8000f98 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013000 	.word	0x40013000
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <HAL_UART_MspInit+0x8c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d130      	bne.n	80009fc <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a1a      	ldr	r2, [pc, #104]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_UART_MspInit+0x90>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ca:	230c      	movs	r3, #12
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009da:	2307      	movs	r3, #7
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fad6 	bl	8000f98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2105      	movs	r1, #5
 80009f0:	2026      	movs	r0, #38	@ 0x26
 80009f2:	f000 fa2b 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f6:	2026      	movs	r0, #38	@ 0x26
 80009f8:	f000 fa44 	bl	8000e84 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	@ 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_PCD_MspInit+0x80>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d129      	bne.n	8000a82 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a58:	230e      	movs	r3, #14
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f000 fa97 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_PCD_MspInit+0x84>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40005c00 	.word	0x40005c00
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa4:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a32      	ldr	r2, [pc, #200]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	61d3      	str	r3, [r2, #28]
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f860 	bl	8002b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad6:	f002 f815 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8000ada:	6378      	str	r0, [r7, #52]	@ 0x34
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ade:	f002 f811 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <HAL_InitTick+0xe4>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	3b01      	subs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <HAL_InitTick+0xec>)
 8000afa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b04:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b1e:	f002 fadc 	bl	80030da <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11b      	bne.n	8000b68 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b32:	f002 fb33 	bl	800319c <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d111      	bne.n	8000b68 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b44:	2036      	movs	r0, #54	@ 0x36
 8000b46:	f000 f99d 	bl	8000e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d808      	bhi.n	8000b62 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2036      	movs	r0, #54	@ 0x36
 8000b56:	f000 f979 	bl	8000e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0xf0>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e002      	b.n	8000b68 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3738      	adds	r7, #56	@ 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	200004f8 	.word	0x200004f8
 8000b80:	40001000 	.word	0x40001000
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b8c:	f002 f830 	bl	8002bf0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x8>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 fb92 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART2_IRQHandler+0x10>)
 8000bd6:	f002 fd7d 	bl	80036d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000188 	.word	0x20000188

08000be4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM6_DAC_IRQHandler+0x10>)
 8000bea:	f002 fb41 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200004f8 	.word	0x200004f8

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	@ (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f007 f855 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4e:	f7ff fae7 	bl	8000220 <main>

08000c52 <LoopForever>:

LoopForever:
    b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c60:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 8000c64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c68:	20002468 	.word	0x20002468

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_Init+0x28>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <HAL_Init+0x28>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f8d8 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f7ff ff04 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fd94 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40022000 	.word	0x40022000

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000544 	.word	0x20000544

08000cc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000544 	.word	0x20000544

08000cdc <__NVIC_SetPriorityGrouping>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e02e      	b.n	8000f10 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d008      	beq.n	8000ece <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e020      	b.n	8000f10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 020e 	bic.w	r2, r2, #14
 8000edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d005      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2204      	movs	r2, #4
 8000f36:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e027      	b.n	8000f8e <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020e 	bic.w	r2, r2, #14
 8000f4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	4798      	blx	r3
    }
  }
  return status;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e154      	b.n	8001252 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8146 	beq.w	800124c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d005      	beq.n	8000fd8 <HAL_GPIO_Init+0x40>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 0201 	and.w	r2, r3, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b03      	cmp	r3, #3
 8001044:	d017      	beq.n	8001076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d123      	bne.n	80010ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	6939      	ldr	r1, [r7, #16]
 80010c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0203 	and.w	r2, r3, #3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80a0 	beq.w	800124c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	4b58      	ldr	r3, [pc, #352]	@ (8001270 <HAL_GPIO_Init+0x2d8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a57      	ldr	r2, [pc, #348]	@ (8001270 <HAL_GPIO_Init+0x2d8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b55      	ldr	r3, [pc, #340]	@ (8001270 <HAL_GPIO_Init+0x2d8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001124:	4a53      	ldr	r2, [pc, #332]	@ (8001274 <HAL_GPIO_Init+0x2dc>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800114e:	d019      	beq.n	8001184 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <HAL_GPIO_Init+0x2e0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a48      	ldr	r2, [pc, #288]	@ (800127c <HAL_GPIO_Init+0x2e4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <HAL_GPIO_Init+0x2e8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1e0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <HAL_GPIO_Init+0x2ec>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1dc>
 8001170:	2304      	movs	r3, #4
 8001172:	e008      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001174:	2305      	movs	r3, #5
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001178:	2303      	movs	r3, #3
 800117a:	e004      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 800117c:	2302      	movs	r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001184:	2300      	movs	r3, #0
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4093      	lsls	r3, r2
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001196:	4937      	ldr	r1, [pc, #220]	@ (8001274 <HAL_GPIO_Init+0x2dc>)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a4:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011f2:	4a25      	ldr	r2, [pc, #148]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_GPIO_Init+0x2f0>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f aea3 	bne.w	8000fa8 <HAL_GPIO_Init+0x10>
  }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800
 8001280:	48000c00 	.word	0x48000c00
 8001284:	48001000 	.word	0x48001000
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43d9      	mvns	r1, r3
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	400b      	ands	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f9ec 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e08d      	b.n	800144e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fa5e 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	@ 0x24
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001370:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001380:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	e006      	b.n	80013a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d108      	bne.n	80013c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	e007      	b.n	80013d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69d9      	ldr	r1, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b20      	cmp	r3, #32
 800146a:	d138      	bne.n	80014de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001476:	2302      	movs	r3, #2
 8001478:	e032      	b.n	80014e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2224      	movs	r2, #36	@ 0x24
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014de:	2302      	movs	r3, #2
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d139      	bne.n	8001576 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800150c:	2302      	movs	r3, #2
 800150e:	e033      	b.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2224      	movs	r2, #36	@ 0x24
 800151c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800153e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001576:	2302      	movs	r3, #2
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0b9      	b.n	800170a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fa2e 	bl	8000a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 ffc8 	bl	8004552 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e03e      	b.n	8001646 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3311      	adds	r3, #17
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3310      	adds	r3, #16
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3313      	adds	r3, #19
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3320      	adds	r3, #32
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	3324      	adds	r3, #36	@ 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3bb      	bcc.n	80015c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e044      	b.n	80016e0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3b5      	bcc.n	8001656 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016f6:	f002 ff47 	bl	8004588 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800171a:	af00      	add	r7, sp, #0
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001724:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	f000 bff4 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 816d 	beq.w	8001a2a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001750:	4bb4      	ldr	r3, [pc, #720]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b04      	cmp	r3, #4
 800175a:	d00c      	beq.n	8001776 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d157      	bne.n	8001818 <HAL_RCC_OscConfig+0x104>
 8001768:	4bae      	ldr	r3, [pc, #696]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001774:	d150      	bne.n	8001818 <HAL_RCC_OscConfig+0x104>
 8001776:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800178a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b3f      	cmp	r3, #63	@ 0x3f
 8001796:	d802      	bhi.n	800179e <HAL_RCC_OscConfig+0x8a>
 8001798:	4ba2      	ldr	r3, [pc, #648]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0xb6>
 800179e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017c6:	4b97      	ldr	r3, [pc, #604]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017d6:	fa92 f2a2 	rbit	r2, r2
 80017da:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8114 	beq.w	8001a28 <HAL_RCC_OscConfig+0x314>
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 810b 	bne.w	8001a28 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f000 bf85 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001828:	d106      	bne.n	8001838 <HAL_RCC_OscConfig+0x124>
 800182a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e036      	b.n	80018a6 <HAL_RCC_OscConfig+0x192>
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x14e>
 8001848:	4b76      	ldr	r3, [pc, #472]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a75      	ldr	r2, [pc, #468]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b73      	ldr	r3, [pc, #460]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a72      	ldr	r2, [pc, #456]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e021      	b.n	80018a6 <HAL_RCC_OscConfig+0x192>
 8001862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x17a>
 8001874:	4b6b      	ldr	r3, [pc, #428]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a6a      	ldr	r2, [pc, #424]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800187a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b68      	ldr	r3, [pc, #416]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a67      	ldr	r2, [pc, #412]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x192>
 800188e:	4b65      	ldr	r3, [pc, #404]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a64      	ldr	r2, [pc, #400]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b62      	ldr	r3, [pc, #392]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a61      	ldr	r2, [pc, #388]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	f023 020f 	bic.w	r2, r3, #15
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	495a      	ldr	r1, [pc, #360]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d054      	beq.n	800197a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f9f8 	bl	8000cc4 <HAL_GetTick>
 80018d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7ff f9f3 	bl	8000cc4 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 bf19 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 80018f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001904:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001910:	d802      	bhi.n	8001918 <HAL_RCC_OscConfig+0x204>
 8001912:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	e015      	b.n	8001944 <HAL_RCC_OscConfig+0x230>
 8001918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800192c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001930:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001934:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001940:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001948:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800194c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001950:	fa92 f2a2 	rbit	r2, r2
 8001954:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001958:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f002 021f 	and.w	r2, r2, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0b0      	beq.n	80018da <HAL_RCC_OscConfig+0x1c6>
 8001978:	e057      	b.n	8001a2a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff f9a3 	bl	8000cc4 <HAL_GetTick>
 800197e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f99e 	bl	8000cc4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	@ 0x64
 8001992:	d902      	bls.n	800199a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	f000 bec4 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 800199a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ba:	d802      	bhi.n	80019c2 <HAL_RCC_OscConfig+0x2ae>
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x2da>
 80019c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_RCC_OscConfig+0x310>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80019f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80019fa:	fa92 f2a2 	rbit	r2, r2
 80019fe:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a02:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f042 0220 	orr.w	r2, r2, #32
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1b0      	bne.n	8001984 <HAL_RCC_OscConfig+0x270>
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_OscConfig+0x316>
 8001a24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 816c 	beq.w	8001d18 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a40:	4bcc      	ldr	r3, [pc, #816]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a4c:	4bc9      	ldr	r3, [pc, #804]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d16d      	bne.n	8001b34 <HAL_RCC_OscConfig+0x420>
 8001a58:	4bc6      	ldr	r3, [pc, #792]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d167      	bne.n	8001b34 <HAL_RCC_OscConfig+0x420>
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a76:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a82:	d802      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x376>
 8001a84:	4bbb      	ldr	r3, [pc, #748]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e013      	b.n	8001ab2 <HAL_RCC_OscConfig+0x39e>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001aa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001aae:	4bb1      	ldr	r3, [pc, #708]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ab8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ac4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <HAL_RCC_OscConfig+0x3e6>
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d002      	beq.n	8001afa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f000 be14 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b9e      	ldr	r3, [pc, #632]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	21f8      	movs	r1, #248	@ 0xf8
 8001b10:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b18:	fa91 f1a1 	rbit	r1, r1
 8001b1c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b20:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b24:	fab1 f181 	clz	r1, r1
 8001b28:	b2c9      	uxtb	r1, r1
 8001b2a:	408b      	lsls	r3, r1
 8001b2c:	4991      	ldr	r1, [pc, #580]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e0f1      	b.n	8001d18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8083 	beq.w	8001c4c <HAL_RCC_OscConfig+0x538>
 8001b46:	2301      	movs	r3, #1
 8001b48:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8a7 	bl	8000cc4 <HAL_GetTick>
 8001b76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f8a2 	bl	8000cc4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d902      	bls.n	8001b92 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f000 bdc8 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001ba4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_RCC_OscConfig+0x4a4>
 8001bb2:	4b70      	ldr	r3, [pc, #448]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x4cc>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bdc:	4b65      	ldr	r3, [pc, #404]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	2202      	movs	r2, #2
 8001be2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001be6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001bea:	fa92 f2a2 	rbit	r2, r2
 8001bee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001bf2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0b4      	beq.n	8001b7c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b58      	ldr	r3, [pc, #352]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	21f8      	movs	r1, #248	@ 0xf8
 8001c28:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c30:	fa91 f1a1 	rbit	r1, r1
 8001c34:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c38:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c3c:	fab1 f181 	clz	r1, r1
 8001c40:	b2c9      	uxtb	r1, r1
 8001c42:	408b      	lsls	r3, r1
 8001c44:	494b      	ldr	r1, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
 8001c4a:	e065      	b.n	8001d18 <HAL_RCC_OscConfig+0x604>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f824 	bl	8000cc4 <HAL_GetTick>
 8001c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff f81f 	bl	8000cc4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d902      	bls.n	8001c98 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f000 bd45 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cb6:	d802      	bhi.n	8001cbe <HAL_RCC_OscConfig+0x5aa>
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e013      	b.n	8001ce6 <HAL_RCC_OscConfig+0x5d2>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x660>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001cec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001cf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1b4      	bne.n	8001c82 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8115 	beq.w	8001f58 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d07e      	beq.n	8001e3c <HAL_RCC_OscConfig+0x728>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_OscConfig+0x664>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	461a      	mov	r2, r3
 8001d64:	2301      	movs	r3, #1
 8001d66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7fe ffac 	bl	8000cc4 <HAL_GetTick>
 8001d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d70:	e00f      	b.n	8001d92 <HAL_RCC_OscConfig+0x67e>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe ffa2 	bl	8000cc4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bcc8 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	4bb0      	ldr	r3, [pc, #704]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001df8:	2102      	movs	r1, #2
 8001dfa:	6019      	str	r1, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f1a3 	rbit	r1, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e12:	6019      	str	r1, [r3, #0]
  return result;
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0a0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x668>
 8001e3a:	e08d      	b.n	8001f58 <HAL_RCC_OscConfig+0x844>
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b90      	ldr	r3, [pc, #576]	@ (80020b4 <HAL_RCC_OscConfig+0x9a0>)
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff21 	bl	8000cc4 <HAL_GetTick>
 8001e82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7fe ff1c 	bl	8000cc4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d902      	bls.n	8001e9e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f000 bc42 	b.w	8002722 <HAL_RCC_OscConfig+0x100e>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eca:	2202      	movs	r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001eee:	2202      	movs	r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	4b69      	ldr	r3, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f16:	2102      	movs	r1, #2
 8001f18:	6019      	str	r1, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f1a3 	rbit	r1, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f30:	6019      	str	r1, [r3, #0]
  return result;
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d197      	bne.n	8001e88 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 819e 	beq.w	80022aa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f74:	4b4e      	ldr	r3, [pc, #312]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b4b      	ldr	r3, [pc, #300]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	61d3      	str	r3, [r2, #28]
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fa6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <HAL_RCC_OscConfig+0x9a4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_OscConfig+0x9a4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80020b8 <HAL_RCC_OscConfig+0x9a4>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fe7d 	bl	8000cc4 <HAL_GetTick>
 8001fca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	e009      	b.n	8001fe4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fe78 	bl	8000cc4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	@ 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e39e      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_OscConfig+0x9a4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ef      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x8fa>
 8002000:	4b2b      	ldr	r3, [pc, #172]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a2a      	ldr	r2, [pc, #168]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e035      	b.n	800207a <HAL_RCC_OscConfig+0x966>
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x924>
 800201e:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a23      	ldr	r2, [pc, #140]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e020      	b.n	800207a <HAL_RCC_OscConfig+0x966>
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x94e>
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x966>
 8002062:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a0f      	ldr	r2, [pc, #60]	@ (80020b0 <HAL_RCC_OscConfig+0x99c>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8087 	beq.w	800219a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7fe fe1a 	bl	8000cc4 <HAL_GetTick>
 8002090:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e012      	b.n	80020bc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fe15 	bl	8000cc4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e339      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	10908120 	.word	0x10908120
 80020b8:	40007000 	.word	0x40007000
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002102:	601a      	str	r2, [r3, #0]
  return result;
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800210c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0xa10>
 800211e:	4b98      	ldr	r3, [pc, #608]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0xa38>
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800212c:	2202      	movs	r2, #2
 800212e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002142:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	4b8d      	ldr	r3, [pc, #564]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002150:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002154:	2102      	movs	r1, #2
 8002156:	6011      	str	r1, [r2, #0]
 8002158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fa92 f1a2 	rbit	r1, r2
 8002166:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800216a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800216e:	6011      	str	r1, [r2, #0]
  return result;
 8002170:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002174:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f43f af7f 	beq.w	8002096 <HAL_RCC_OscConfig+0x982>
 8002198:	e07d      	b.n	8002296 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe fd93 	bl	8000cc4 <HAL_GetTick>
 800219e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe fd8e 	bl	8000cc4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e2b2      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021c4:	2202      	movs	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002202:	601a      	str	r2, [r3, #0]
  return result;
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800220c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0xb10>
 800221e:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	e013      	b.n	800224c <HAL_RCC_OscConfig+0xb38>
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002250:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002254:	2102      	movs	r1, #2
 8002256:	6011      	str	r1, [r2, #0]
 8002258:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800225c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fa92 f1a2 	rbit	r1, r2
 8002266:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800226a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800226e:	6011      	str	r1, [r2, #0]
  return result;
 8002270:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002274:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d186      	bne.n	80021a4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002296:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a37      	ldr	r2, [pc, #220]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8232 	beq.w	8002720 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f000 8201 	beq.w	80026cc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 8157 	bne.w	800258a <HAL_RCC_OscConfig+0xe76>
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002300:	601a      	str	r2, [r3, #0]
  return result;
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800230a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002316:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2300      	movs	r3, #0
 8002320:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fccf 	bl	8000cc4 <HAL_GetTick>
 8002326:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e009      	b.n	8002340 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe fcca 	bl	8000cc4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1f0      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002364:	601a      	str	r2, [r3, #0]
  return result;
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800236e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b3f      	cmp	r3, #63	@ 0x3f
 8002378:	d804      	bhi.n	8002384 <HAL_RCC_OscConfig+0xc70>
 800237a:	4b01      	ldr	r3, [pc, #4]	@ (8002380 <HAL_RCC_OscConfig+0xc6c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0xcc0>
 8002380:	40021000 	.word	0x40021000
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800238c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4bc3      	ldr	r3, [pc, #780]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023e0:	6011      	str	r1, [r2, #0]
 80023e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fa92 f1a2 	rbit	r1, r2
 80023f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023f8:	6011      	str	r1, [r2, #0]
  return result;
 80023fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d185      	bne.n	800232c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4baf      	ldr	r3, [pc, #700]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	430b      	orrs	r3, r1
 8002442:	49a7      	ldr	r1, [pc, #668]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002450:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800246c:	601a      	str	r2, [r3, #0]
  return result;
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002476:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002482:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	461a      	mov	r2, r3
 800248a:	2301      	movs	r3, #1
 800248c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fc19 	bl	8000cc4 <HAL_GetTick>
 8002492:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002496:	e009      	b.n	80024ac <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fc14 	bl	8000cc4 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e13a      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 80024ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024d0:	601a      	str	r2, [r3, #0]
  return result;
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80024e4:	d802      	bhi.n	80024ec <HAL_RCC_OscConfig+0xdd8>
 80024e6:	4b7e      	ldr	r3, [pc, #504]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e027      	b.n	800253c <HAL_RCC_OscConfig+0xe28>
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800251a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002540:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002544:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002548:	6011      	str	r1, [r2, #0]
 800254a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800254e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	fa92 f1a2 	rbit	r1, r2
 8002558:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002560:	6011      	str	r1, [r2, #0]
  return result;
 8002562:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002566:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f002 021f 	and.w	r2, r2, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d087      	beq.n	8002498 <HAL_RCC_OscConfig+0xd84>
 8002588:	e0ca      	b.n	8002720 <HAL_RCC_OscConfig+0x100c>
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002592:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	2300      	movs	r3, #0
 80025ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fb78 	bl	8000cc4 <HAL_GetTick>
 80025d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	e009      	b.n	80025ee <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe fb73 	bl	8000cc4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e099      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002612:	601a      	str	r2, [r3, #0]
  return result;
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800261c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b3f      	cmp	r3, #63	@ 0x3f
 8002626:	d802      	bhi.n	800262e <HAL_RCC_OscConfig+0xf1a>
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e027      	b.n	800267e <HAL_RCC_OscConfig+0xf6a>
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_OscConfig+0xfcc>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002686:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002690:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800269e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d187      	bne.n	80025da <HAL_RCC_OscConfig+0xec6>
 80026ca:	e029      	b.n	8002720 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d103      	bne.n	80026e4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e020      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
 80026e0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_RCC_OscConfig+0x1018>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	429a      	cmp	r2, r3
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002704:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002708:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b09e      	sub	sp, #120	@ 0x78
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e154      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b86      	ldr	r3, [pc, #536]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4984      	ldr	r1, [pc, #528]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e13c      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b7b      	ldr	r3, [pc, #492]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4978      	ldr	r1, [pc, #480]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80cd 	beq.w	800293e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d137      	bne.n	800281c <HAL_RCC_ClockConfig+0xec>
 80027ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c4:	d802      	bhi.n	80027cc <HAL_RCC_ClockConfig+0x9c>
 80027c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e00f      	b.n	80027ec <HAL_RCC_ClockConfig+0xbc>
 80027cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80027da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027de:	663b      	str	r3, [r7, #96]	@ 0x60
 80027e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027e8:	4b62      	ldr	r3, [pc, #392]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027f4:	fa92 f2a2 	rbit	r2, r2
 80027f8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d171      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0ea      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d137      	bne.n	8002894 <HAL_RCC_ClockConfig+0x164>
 8002824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002828:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b3f      	cmp	r3, #63	@ 0x3f
 800283c:	d802      	bhi.n	8002844 <HAL_RCC_ClockConfig+0x114>
 800283e:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_RCC_ClockConfig+0x134>
 8002844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	647b      	str	r3, [r7, #68]	@ 0x44
 8002852:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40
 8002858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002860:	4b44      	ldr	r3, [pc, #272]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002868:	63ba      	str	r2, [r7, #56]	@ 0x38
 800286a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d135      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0ae      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80028aa:	d802      	bhi.n	80028b2 <HAL_RCC_ClockConfig+0x182>
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e00d      	b.n	80028ce <HAL_RCC_ClockConfig+0x19e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028be:	2302      	movs	r3, #2
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2202      	movs	r2, #2
 80028d0:	61ba      	str	r2, [r7, #24]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	617a      	str	r2, [r7, #20]
  return result;
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f042 0220 	orr.w	r2, r2, #32
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f002 021f 	and.w	r2, r2, #31
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f202 	lsl.w	r2, r1, r2
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e07a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	491a      	ldr	r1, [pc, #104]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290e:	f7fe f9d9 	bl	8000cc4 <HAL_GetTick>
 8002912:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002914:	e00a      	b.n	800292c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe f9d5 	bl	8000cc4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e062      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_RCC_ClockConfig+0x244>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 020c 	and.w	r2, r3, #12
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	429a      	cmp	r2, r3
 800293c:	d1eb      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d215      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	4906      	ldr	r1, [pc, #24]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_RCC_ClockConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d006      	beq.n	8002978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e041      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2c2>
 800296e:	bf00      	nop
 8002970:	40022000 	.word	0x40022000
 8002974:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_RCC_ClockConfig+0x2cc>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	491a      	ldr	r1, [pc, #104]	@ (80029fc <HAL_RCC_ClockConfig+0x2cc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_RCC_ClockConfig+0x2cc>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4912      	ldr	r1, [pc, #72]	@ (80029fc <HAL_RCC_ClockConfig+0x2cc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029b6:	f000 f845 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029ba:	4601      	mov	r1, r0
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_RCC_ClockConfig+0x2cc>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c4:	22f0      	movs	r2, #240	@ 0xf0
 80029c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	fa92 f2a2 	rbit	r2, r2
 80029ce:	60fa      	str	r2, [r7, #12]
  return result;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	40d3      	lsrs	r3, r2
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x2d0>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	fa21 f303 	lsr.w	r3, r1, r3
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_RCC_ClockConfig+0x2d4>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029e6:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_RCC_ClockConfig+0x2d8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f852 	bl	8000a94 <HAL_InitTick>
  
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3778      	adds	r7, #120	@ 0x78
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08007ee0 	.word	0x08007ee0
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002a16:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	603b      	str	r3, [r7, #0]
  return result;
 8002a20:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x30>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x36>
 8002a72:	e026      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	e026      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a88:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e004      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
      break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac4:	613b      	str	r3, [r7, #16]
      break;
 8002ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac8:	693b      	ldr	r3, [r7, #16]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	08007ef8 	.word	0x08007ef8
 8002ae4:	08007f08 	.word	0x08007f08
 8002ae8:	003d0900 	.word	0x003d0900

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b0a:	f7ff ffef 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b18:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	603a      	str	r2, [r7, #0]
  return result;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08007ef0 	.word	0x08007ef0

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b4e:	f7ff ffcd 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b52:	4601      	mov	r1, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b5c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	fa92 f2a2 	rbit	r2, r2
 8002b68:	603a      	str	r2, [r7, #0]
  return result;
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	fab2 f282 	clz	r2, r2
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	40d3      	lsrs	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08007ef0 	.word	0x08007ef0

08002b8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <HAL_RCC_GetClockConfig+0x60>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0207 	and.w	r2, r3, #7
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b80      	cmp	r3, #128	@ 0x80
 8002bfe:	d104      	bne.n	8002c0a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c00:	f000 f80a 	bl	8002c18 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c06:	2280      	movs	r2, #128	@ 0x80
 8002c08:	701a      	strb	r2, [r3, #0]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	4002100a 	.word	0x4002100a

08002c18 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b092      	sub	sp, #72	@ 0x48
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80d2 	beq.w	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10e      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
 8002c64:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b44      	ldr	r3, [pc, #272]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a40      	ldr	r2, [pc, #256]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe f819 	bl	8000cc4 <HAL_GetTick>
 8002c92:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe f815 	bl	8000cc4 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	@ 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e167      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8082 	beq.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d07a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2301      	movs	r3, #1
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	2300      	movs	r3, #0
 8002d24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d26:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d049      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fd ffc5 	bl	8000cc4 <HAL_GetTick>
 8002d3a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fd ffc1 	bl	8000cc4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e111      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	2302      	movs	r3, #2
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d7e:	4b01      	ldr	r3, [pc, #4]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	e00d      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	10908100 	.word	0x10908100
 8002d90:	2302      	movs	r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	4b78      	ldr	r3, [pc, #480]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	2202      	movs	r2, #2
 8002da2:	613a      	str	r2, [r7, #16]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	fa92 f2a2 	rbit	r2, r2
 8002daa:	60fa      	str	r2, [r7, #12]
  return result;
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	fab2 f282 	clz	r2, r2
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	f002 021f 	and.w	r2, r2, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0b9      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dca:	4b6d      	ldr	r3, [pc, #436]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	496a      	ldr	r1, [pc, #424]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b66      	ldr	r3, [pc, #408]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	4a65      	ldr	r2, [pc, #404]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfc:	4b60      	ldr	r3, [pc, #384]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	f023 0203 	bic.w	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	495d      	ldr	r1, [pc, #372]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e1a:	4b59      	ldr	r3, [pc, #356]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4956      	ldr	r1, [pc, #344]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e38:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	494e      	ldr	r1, [pc, #312]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e56:	4b4a      	ldr	r3, [pc, #296]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f023 0210 	bic.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4947      	ldr	r1, [pc, #284]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e74:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	493f      	ldr	r1, [pc, #252]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e92:	4b3b      	ldr	r3, [pc, #236]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f023 0220 	bic.w	r2, r3, #32
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4938      	ldr	r1, [pc, #224]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb0:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4930      	ldr	r1, [pc, #192]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ece:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	4929      	ldr	r1, [pc, #164]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	4921      	ldr	r1, [pc, #132]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	491a      	ldr	r1, [pc, #104]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	4912      	ldr	r1, [pc, #72]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	490b      	ldr	r1, [pc, #44]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3748      	adds	r7, #72	@ 0x48
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e09d      	b.n	80030d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa6:	d009      	beq.n	8002fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
 8002fae:	e005      	b.n	8002fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fc8c 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ffc:	d902      	bls.n	8003004 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e002      	b.n	800300a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003008:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003012:	d007      	beq.n	8003024 <HAL_SPI_Init+0xa0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003066:	ea42 0103 	orr.w	r1, r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	f003 0204 	and.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030a0:	ea42 0103 	orr.w	r1, r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e049      	b.n	8003180 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f841 	bl	8003188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	4619      	mov	r1, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f000 f9d3 	bl	80034c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d001      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04a      	b.n	800324a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	@ (8003258 <HAL_TIM_Base_Start_IT+0xbc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x6c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031de:	d013      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x6c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <HAL_TIM_Base_Start_IT+0xc0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x6c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <HAL_TIM_Base_Start_IT+0xc4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x6c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_TIM_Base_Start_IT+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x6c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <HAL_TIM_Base_Start_IT+0xcc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d115      	bne.n	8003234 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <HAL_TIM_Base_Start_IT+0xd0>)
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d015      	beq.n	8003246 <HAL_TIM_Base_Start_IT+0xaa>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d011      	beq.n	8003246 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	e008      	b.n	8003246 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e000      	b.n	8003248 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40013400 	.word	0x40013400
 8003268:	40014000 	.word	0x40014000
 800326c:	00010007 	.word	0x00010007

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0202 	mvn.w	r2, #2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8e4 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8d6 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8e7 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8be 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8b0 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8c1 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0208 	mvn.w	r2, #8
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2204      	movs	r2, #4
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f898 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f88a 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f89b 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0210 	mvn.w	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2208      	movs	r2, #8
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f872 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f864 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f875 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f9d6 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f908 	bl	8003610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f900 	bl	8003624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f834 	bl	80034b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0220 	mvn.w	r2, #32
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8c8 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a42      	ldr	r2, [pc, #264]	@ (80035e0 <TIM_Base_SetConfig+0x11c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00f      	beq.n	80034fc <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e2:	d00b      	beq.n	80034fc <TIM_Base_SetConfig+0x38>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3f      	ldr	r2, [pc, #252]	@ (80035e4 <TIM_Base_SetConfig+0x120>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <TIM_Base_SetConfig+0x38>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3e      	ldr	r2, [pc, #248]	@ (80035e8 <TIM_Base_SetConfig+0x124>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0x38>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3d      	ldr	r2, [pc, #244]	@ (80035ec <TIM_Base_SetConfig+0x128>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d108      	bne.n	800350e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a33      	ldr	r2, [pc, #204]	@ (80035e0 <TIM_Base_SetConfig+0x11c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01b      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351c:	d017      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a30      	ldr	r2, [pc, #192]	@ (80035e4 <TIM_Base_SetConfig+0x120>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <TIM_Base_SetConfig+0x124>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2e      	ldr	r2, [pc, #184]	@ (80035ec <TIM_Base_SetConfig+0x128>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2d      	ldr	r2, [pc, #180]	@ (80035f0 <TIM_Base_SetConfig+0x12c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <TIM_Base_SetConfig+0x130>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2b      	ldr	r2, [pc, #172]	@ (80035f8 <TIM_Base_SetConfig+0x134>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <TIM_Base_SetConfig+0x11c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0xe8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <TIM_Base_SetConfig+0x128>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0xe8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <TIM_Base_SetConfig+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0xe8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <TIM_Base_SetConfig+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0xe8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <TIM_Base_SetConfig+0x134>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]
  }
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40013400 	.word	0x40013400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e040      	b.n	80036cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd f98c 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fd02 	bl	8004088 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fb2b 	bl	8003ce0 <UART_SetConfig>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e01b      	b.n	80036cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fd81 	bl	80041cc <UART_CheckIdleState>
 80036ca:	4603      	mov	r3, r0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0ba      	sub	sp, #232	@ 0xe8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003702:	4013      	ands	r3, r2
 8003704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d115      	bne.n	800373c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00f      	beq.n	800373c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 82ab 	beq.w	8003c88 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
      }
      return;
 800373a:	e2a5      	b.n	8003c88 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800373c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8117 	beq.w	8003974 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_UART_IRQHandler+0x298>)
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 810a 	beq.w	8003974 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <HAL_UART_IRQHandler+0xbc>
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d011      	beq.n	80037c0 <HAL_UART_IRQHandler+0xec>
 800379c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d011      	beq.n	80037f0 <HAL_UART_IRQHandler+0x11c>
 80037cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d017      	beq.n	800382c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2208      	movs	r2, #8
 800381a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003822:	f043 0208 	orr.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_UART_IRQHandler+0x18a>
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800384c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8211 	beq.w	8003c8c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003898:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b40      	cmp	r3, #64	@ 0x40
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d04f      	beq.n	8003956 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fd9d 	bl	80043f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d141      	bne.n	800394e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3308      	adds	r3, #8
 80038d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800390e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1d9      	bne.n	80038ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	2b00      	cmp	r3, #0
 800391c:	d013      	beq.n	8003946 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_UART_IRQHandler+0x29c>)
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd faf6 	bl	8000f1c <HAL_DMA_Abort_IT>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d017      	beq.n	8003966 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	e00f      	b.n	8003966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9b4 	bl	8003cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	e00b      	b.n	8003966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f9b0 	bl	8003cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e007      	b.n	8003966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9ac 	bl	8003cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003964:	e192      	b.n	8003c8c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003966:	bf00      	nop
    return;
 8003968:	e190      	b.n	8003c8c <HAL_UART_IRQHandler+0x5b8>
 800396a:	bf00      	nop
 800396c:	04000120 	.word	0x04000120
 8003970:	080044bf 	.word	0x080044bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003978:	2b01      	cmp	r3, #1
 800397a:	f040 814b 	bne.w	8003c14 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8144 	beq.w	8003c14 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800398c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 813d 	beq.w	8003c14 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b40      	cmp	r3, #64	@ 0x40
 80039ae:	f040 80b5 	bne.w	8003b1c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8164 	beq.w	8003c90 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039d2:	429a      	cmp	r2, r3
 80039d4:	f080 815c 	bcs.w	8003c90 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	f000 8086 	beq.w	8003afa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a1c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1da      	bne.n	80039ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e1      	bne.n	8003a38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e3      	bne.n	8003a74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ade:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e4      	bne.n	8003aba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f9d3 	bl	8000ea0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8d7 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b1a:	e0b9      	b.n	8003c90 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80ab 	beq.w	8003c94 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a6 	beq.w	8003c94 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e4      	bne.n	8003b48 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e3      	bne.n	8003b7e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0310 	bic.w	r3, r3, #16
 8003bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e4      	bne.n	8003bca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f85b 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c12:	e03f      	b.n	8003c94 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <HAL_UART_IRQHandler+0x56a>
 8003c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fc81 	bl	800453e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c3c:	e02d      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00e      	beq.n	8003c68 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01c      	beq.n	8003c98 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
    }
    return;
 8003c66:	e017      	b.n	8003c98 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fc32 	bl	80044ea <UART_EndTransmit_IT>
    return;
 8003c86:	e008      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c88:	bf00      	nop
 8003c8a:	e006      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c8c:	bf00      	nop
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c98:	bf00      	nop
  }

}
 8003c9a:	37e8      	adds	r7, #232	@ 0xe8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003d0e:	f023 030c 	bic.w	r3, r3, #12
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4aa7      	ldr	r2, [pc, #668]	@ (8003ff8 <UART_SetConfig+0x318>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d120      	bne.n	8003da2 <UART_SetConfig+0xc2>
 8003d60:	4ba6      	ldr	r3, [pc, #664]	@ (8003ffc <UART_SetConfig+0x31c>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d817      	bhi.n	8003d9c <UART_SetConfig+0xbc>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <UART_SetConfig+0x94>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d91 	.word	0x08003d91
 8003d7c:	08003d97 	.word	0x08003d97
 8003d80:	08003d8b 	.word	0x08003d8b
 8003d84:	2301      	movs	r3, #1
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e0b5      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e0b2      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003d90:	2304      	movs	r3, #4
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e0af      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003d96:	2308      	movs	r3, #8
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e0ac      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e0a9      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a96      	ldr	r2, [pc, #600]	@ (8004000 <UART_SetConfig+0x320>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d124      	bne.n	8003df6 <UART_SetConfig+0x116>
 8003dac:	4b93      	ldr	r3, [pc, #588]	@ (8003ffc <UART_SetConfig+0x31c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003db8:	d011      	beq.n	8003dde <UART_SetConfig+0xfe>
 8003dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dbe:	d817      	bhi.n	8003df0 <UART_SetConfig+0x110>
 8003dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dc4:	d011      	beq.n	8003dea <UART_SetConfig+0x10a>
 8003dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dca:	d811      	bhi.n	8003df0 <UART_SetConfig+0x110>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <UART_SetConfig+0xf8>
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd4:	d006      	beq.n	8003de4 <UART_SetConfig+0x104>
 8003dd6:	e00b      	b.n	8003df0 <UART_SetConfig+0x110>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e08b      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e088      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003de4:	2304      	movs	r3, #4
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e085      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003dea:	2308      	movs	r3, #8
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e082      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003df0:	2310      	movs	r3, #16
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e07f      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a82      	ldr	r2, [pc, #520]	@ (8004004 <UART_SetConfig+0x324>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d124      	bne.n	8003e4a <UART_SetConfig+0x16a>
 8003e00:	4b7e      	ldr	r3, [pc, #504]	@ (8003ffc <UART_SetConfig+0x31c>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e0c:	d011      	beq.n	8003e32 <UART_SetConfig+0x152>
 8003e0e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e12:	d817      	bhi.n	8003e44 <UART_SetConfig+0x164>
 8003e14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e18:	d011      	beq.n	8003e3e <UART_SetConfig+0x15e>
 8003e1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e1e:	d811      	bhi.n	8003e44 <UART_SetConfig+0x164>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <UART_SetConfig+0x14c>
 8003e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e28:	d006      	beq.n	8003e38 <UART_SetConfig+0x158>
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x164>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e061      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e32:	2302      	movs	r3, #2
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e05e      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e05b      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e058      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e44:	2310      	movs	r3, #16
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e055      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004008 <UART_SetConfig+0x328>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d124      	bne.n	8003e9e <UART_SetConfig+0x1be>
 8003e54:	4b69      	ldr	r3, [pc, #420]	@ (8003ffc <UART_SetConfig+0x31c>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e60:	d011      	beq.n	8003e86 <UART_SetConfig+0x1a6>
 8003e62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e66:	d817      	bhi.n	8003e98 <UART_SetConfig+0x1b8>
 8003e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e6c:	d011      	beq.n	8003e92 <UART_SetConfig+0x1b2>
 8003e6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e72:	d811      	bhi.n	8003e98 <UART_SetConfig+0x1b8>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <UART_SetConfig+0x1a0>
 8003e78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7c:	d006      	beq.n	8003e8c <UART_SetConfig+0x1ac>
 8003e7e:	e00b      	b.n	8003e98 <UART_SetConfig+0x1b8>
 8003e80:	2300      	movs	r3, #0
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e037      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e86:	2302      	movs	r3, #2
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e034      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e031      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e92:	2308      	movs	r3, #8
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e02e      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e02b      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5a      	ldr	r2, [pc, #360]	@ (800400c <UART_SetConfig+0x32c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d124      	bne.n	8003ef2 <UART_SetConfig+0x212>
 8003ea8:	4b54      	ldr	r3, [pc, #336]	@ (8003ffc <UART_SetConfig+0x31c>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003eb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003eb4:	d011      	beq.n	8003eda <UART_SetConfig+0x1fa>
 8003eb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003eba:	d817      	bhi.n	8003eec <UART_SetConfig+0x20c>
 8003ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ec0:	d011      	beq.n	8003ee6 <UART_SetConfig+0x206>
 8003ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ec6:	d811      	bhi.n	8003eec <UART_SetConfig+0x20c>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <UART_SetConfig+0x1f4>
 8003ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed0:	d006      	beq.n	8003ee0 <UART_SetConfig+0x200>
 8003ed2:	e00b      	b.n	8003eec <UART_SetConfig+0x20c>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e00d      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e00a      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e007      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e004      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e001      	b.n	8003ef6 <UART_SetConfig+0x216>
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efe:	d15b      	bne.n	8003fb8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003f00:	7ffb      	ldrb	r3, [r7, #31]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d827      	bhi.n	8003f56 <UART_SetConfig+0x276>
 8003f06:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <UART_SetConfig+0x22c>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7fe fde8 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8003f34:	61b8      	str	r0, [r7, #24]
        break;
 8003f36:	e013      	b.n	8003f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fe06 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	61b8      	str	r0, [r7, #24]
        break;
 8003f3e:	e00f      	b.n	8003f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <UART_SetConfig+0x330>)
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e00c      	b.n	8003f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe fd7d 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003f4a:	61b8      	str	r0, [r7, #24]
        break;
 8003f4c:	e008      	b.n	8003f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e004      	b.n	8003f60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8082 	beq.w	800406c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	005a      	lsls	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d916      	bls.n	8003fb2 <UART_SetConfig+0x2d2>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8a:	d212      	bcs.n	8003fb2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f023 030f 	bic.w	r3, r3, #15
 8003f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	89fa      	ldrh	r2, [r7, #14]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	e05c      	b.n	800406c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	77bb      	strb	r3, [r7, #30]
 8003fb6:	e059      	b.n	800406c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d835      	bhi.n	800402a <UART_SetConfig+0x34a>
 8003fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc4 <UART_SetConfig+0x2e4>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08004015 	.word	0x08004015
 8003fd0:	0800402b 	.word	0x0800402b
 8003fd4:	0800401b 	.word	0x0800401b
 8003fd8:	0800402b 	.word	0x0800402b
 8003fdc:	0800402b 	.word	0x0800402b
 8003fe0:	0800402b 	.word	0x0800402b
 8003fe4:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fd8c 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8003fec:	61b8      	str	r0, [r7, #24]
        break;
 8003fee:	e021      	b.n	8004034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe fdaa 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	61b8      	str	r0, [r7, #24]
        break;
 8003ff6:	e01d      	b.n	8004034 <UART_SetConfig+0x354>
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40004400 	.word	0x40004400
 8004004:	40004800 	.word	0x40004800
 8004008:	40004c00 	.word	0x40004c00
 800400c:	40005000 	.word	0x40005000
 8004010:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <UART_SetConfig+0x3a4>)
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe fd13 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 800401e:	61b8      	str	r0, [r7, #24]
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77bb      	strb	r3, [r7, #30]
        break;
 8004032:	bf00      	nop
    }

    if (pclk != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	085a      	lsrs	r2, r3, #1
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d909      	bls.n	8004068 <UART_SetConfig+0x388>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405a:	d205      	bcs.n	8004068 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e001      	b.n	800406c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004078:	7fbb      	ldrb	r3, [r7, #30]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	007a1200 	.word	0x007a1200

08004088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004186:	d10a      	bne.n	800419e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b098      	sub	sp, #96	@ 0x60
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041dc:	f7fc fd72 	bl	8000cc4 <HAL_GetTick>
 80041e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d12e      	bne.n	800424e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f8:	2200      	movs	r2, #0
 80041fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f88c 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d021      	beq.n	800424e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800422e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e6      	bne.n	800420a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e062      	b.n	8004314 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d149      	bne.n	80042f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f856 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03c      	beq.n	80042f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	623b      	str	r3, [r7, #32]
   return(result);
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	633b      	str	r3, [r7, #48]	@ 0x30
 8004296:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800429a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e011      	b.n	8004314 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3758      	adds	r7, #88	@ 0x58
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432c:	e04f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d04b      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fc fcc5 	bl	8000cc4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <UART_WaitOnFlagUntilTimeout+0x30>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e04e      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d037      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b80      	cmp	r3, #128	@ 0x80
 8004362:	d034      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	d031      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d110      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2208      	movs	r2, #8
 800437e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f838 	bl	80043f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2208      	movs	r2, #8
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e029      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a8:	d111      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f81e 	bl	80043f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e00f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0a0      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b095      	sub	sp, #84	@ 0x54
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441c:	643b      	str	r3, [r7, #64]	@ 0x40
 800441e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	2b01      	cmp	r3, #1
 800446a:	d118      	bne.n	800449e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	60bb      	str	r3, [r7, #8]
   return(result);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 0310 	bic.w	r3, r3, #16
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	613b      	str	r3, [r7, #16]
   return(result);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e6      	bne.n	800446c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044b2:	bf00      	nop
 80044b4:	3754      	adds	r7, #84	@ 0x54
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fbe9 	bl	8003cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	613b      	str	r3, [r7, #16]
   return(result);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e6      	bne.n	80044f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fbb5 	bl	8003ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800455a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800455e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	b29b      	uxth	r3, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	b29b      	uxth	r3, r3
 8004570:	4013      	ands	r3, r2
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80045d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d6:	f3ef 8310 	mrs	r3, PRIMASK
 80045da:	607b      	str	r3, [r7, #4]
  return(result);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <osKernelInitialize+0x32>
 80045e2:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <osKernelInitialize+0x64>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d109      	bne.n	80045fe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045ea:	f3ef 8311 	mrs	r3, BASEPRI
 80045ee:	603b      	str	r3, [r7, #0]
  return(result);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045f6:	f06f 0305 	mvn.w	r3, #5
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00c      	b.n	8004618 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <osKernelInitialize+0x64>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <osKernelInitialize+0x64>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004618:	68fb      	ldr	r3, [r7, #12]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000548 	.word	0x20000548

0800462c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004632:	f3ef 8305 	mrs	r3, IPSR
 8004636:	60bb      	str	r3, [r7, #8]
  return(result);
 8004638:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	607b      	str	r3, [r7, #4]
  return(result);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <osKernelStart+0x32>
 800464a:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <osKernelStart+0x64>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d109      	bne.n	8004666 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004652:	f3ef 8311 	mrs	r3, BASEPRI
 8004656:	603b      	str	r3, [r7, #0]
  return(result);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osKernelStart+0x3a>
    stat = osErrorISR;
 800465e:	f06f 0305 	mvn.w	r3, #5
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e00e      	b.n	8004684 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004666:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <osKernelStart+0x64>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <osKernelStart+0x64>)
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004674:	f001 fd5a 	bl	800612c <vTaskStartScheduler>
      stat = osOK;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e002      	b.n	8004684 <osKernelStart+0x58>
    } else {
      stat = osError;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004684:	68fb      	ldr	r3, [r7, #12]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000548 	.word	0x20000548

08004694 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b092      	sub	sp, #72	@ 0x48
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a4:	f3ef 8305 	mrs	r3, IPSR
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 8094 	bne.w	80047da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8310 	mrs	r3, PRIMASK
 80046b6:	623b      	str	r3, [r7, #32]
  return(result);
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 808d 	bne.w	80047da <osThreadNew+0x146>
 80046c0:	4b48      	ldr	r3, [pc, #288]	@ (80047e4 <osThreadNew+0x150>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d106      	bne.n	80046d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046c8:	f3ef 8311 	mrs	r3, BASEPRI
 80046cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8082 	bne.w	80047da <osThreadNew+0x146>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d07e      	beq.n	80047da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046dc:	2380      	movs	r3, #128	@ 0x80
 80046de:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046e0:	2318      	movs	r3, #24
 80046e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80046e4:	2300      	movs	r3, #0
 80046e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80046e8:	f107 031b 	add.w	r3, r7, #27
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d045      	beq.n	8004786 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <osThreadNew+0x74>
        name = attr->name;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <osThreadNew+0x9a>
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	2b38      	cmp	r3, #56	@ 0x38
 8004720:	d805      	bhi.n	800472e <osThreadNew+0x9a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <osThreadNew+0x9e>
        return (NULL);
 800472e:	2300      	movs	r3, #0
 8004730:	e054      	b.n	80047dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00e      	beq.n	8004768 <osThreadNew+0xd4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004750:	d90a      	bls.n	8004768 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <osThreadNew+0xd4>
        mem = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004766:	e010      	b.n	800478a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10c      	bne.n	800478a <osThreadNew+0xf6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <osThreadNew+0xf6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <osThreadNew+0xf6>
          mem = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004784:	e001      	b.n	800478a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	2b01      	cmp	r3, #1
 800478e:	d110      	bne.n	80047b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004798:	9202      	str	r2, [sp, #8]
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f001 fad6 	bl	8005d58 <xTaskCreateStatic>
 80047ac:	4603      	mov	r3, r0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e013      	b.n	80047da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d110      	bne.n	80047da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f001 fb23 	bl	8005e16 <xTaskCreate>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <osThreadNew+0x146>
          hTask = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	@ 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000548 	.word	0x20000548

080047e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f0:	f3ef 8305 	mrs	r3, IPSR
 80047f4:	613b      	str	r3, [r7, #16]
  return(result);
 80047f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004800:	60fb      	str	r3, [r7, #12]
  return(result);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <osDelay+0x34>
 8004808:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <osDelay+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d109      	bne.n	8004824 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004810:	f3ef 8311 	mrs	r3, BASEPRI
 8004814:	60bb      	str	r3, [r7, #8]
  return(result);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <osDelay+0x3c>
    stat = osErrorISR;
 800481c:	f06f 0305 	mvn.w	r3, #5
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e007      	b.n	8004834 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <osDelay+0x4c>
      vTaskDelay(ticks);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fc46 	bl	80060c0 <vTaskDelay>
    }
  }

  return (stat);
 8004834:	697b      	ldr	r3, [r7, #20]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000548 	.word	0x20000548

08004844 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004850:	f3ef 8305 	mrs	r3, IPSR
 8004854:	617b      	str	r3, [r7, #20]
  return(result);
 8004856:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004858:	2b00      	cmp	r3, #0
 800485a:	d13d      	bne.n	80048d8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8310 	mrs	r3, PRIMASK
 8004860:	613b      	str	r3, [r7, #16]
  return(result);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d137      	bne.n	80048d8 <osEventFlagsNew+0x94>
 8004868:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <osEventFlagsNew+0xa0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d105      	bne.n	800487c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004870:	f3ef 8311 	mrs	r3, BASEPRI
 8004874:	60fb      	str	r3, [r7, #12]
  return(result);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d12d      	bne.n	80048d8 <osEventFlagsNew+0x94>
    mem = -1;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d015      	beq.n	80048b4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <osEventFlagsNew+0x5a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b1f      	cmp	r3, #31
 8004896:	d902      	bls.n	800489e <osEventFlagsNew+0x5a>
        mem = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e00c      	b.n	80048b8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d108      	bne.n	80048b8 <osEventFlagsNew+0x74>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <osEventFlagsNew+0x74>
          mem = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e001      	b.n	80048b8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d106      	bne.n	80048cc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f9ac 	bl	8004c20 <xEventGroupCreateStatic>
 80048c8:	61f8      	str	r0, [r7, #28]
 80048ca:	e005      	b.n	80048d8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80048d2:	f000 f9de 	bl	8004c92 <xEventGroupCreate>
 80048d6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80048d8:	69fb      	ldr	r3, [r7, #28]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000548 	.word	0x20000548

080048e8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <osEventFlagsSet+0x1c>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004902:	d303      	bcc.n	800490c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004904:	f06f 0303 	mvn.w	r3, #3
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e03a      	b.n	8004982 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490c:	f3ef 8305 	mrs	r3, IPSR
 8004910:	617b      	str	r3, [r7, #20]
  return(result);
 8004912:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004918:	f3ef 8310 	mrs	r3, PRIMASK
 800491c:	613b      	str	r3, [r7, #16]
  return(result);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <osEventFlagsSet+0x50>
 8004924:	4b19      	ldr	r3, [pc, #100]	@ (800498c <osEventFlagsSet+0xa4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d123      	bne.n	8004974 <osEventFlagsSet+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800492c:	f3ef 8311 	mrs	r3, BASEPRI
 8004930:	60fb      	str	r3, [r7, #12]
  return(result);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	461a      	mov	r2, r3
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	69b8      	ldr	r0, [r7, #24]
 8004946:	f000 fb4d 	bl	8004fe4 <xEventGroupSetBitsFromISR>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 8004950:	f06f 0302 	mvn.w	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004956:	e013      	b.n	8004980 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00e      	beq.n	8004980 <osEventFlagsSet+0x98>
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <osEventFlagsSet+0xa8>)
 8004964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004972:	e005      	b.n	8004980 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	69b8      	ldr	r0, [r7, #24]
 8004978:	f000 fa78 	bl	8004e6c <xEventGroupSetBits>
 800497c:	61f8      	str	r0, [r7, #28]
 800497e:	e000      	b.n	8004982 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004980:	bf00      	nop
  }

  return (rflags);
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000548 	.word	0x20000548
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	@ 0x38
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <osEventFlagsWait+0x20>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b2:	d303      	bcc.n	80049bc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80049b4:	f06f 0303 	mvn.w	r3, #3
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ba:	e059      	b.n	8004a70 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049bc:	f3ef 8305 	mrs	r3, IPSR
 80049c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80049c2:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10f      	bne.n	80049e8 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c8:	f3ef 8310 	mrs	r3, PRIMASK
 80049cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <osEventFlagsWait+0x54>
 80049d4:	4b29      	ldr	r3, [pc, #164]	@ (8004a7c <osEventFlagsWait+0xe8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d109      	bne.n	80049f0 <osEventFlagsWait+0x5c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049dc:	f3ef 8311 	mrs	r3, BASEPRI
 80049e0:	617b      	str	r3, [r7, #20]
  return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 80049e8:	f06f 0305 	mvn.w	r3, #5
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ee:	e03f      	b.n	8004a70 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fe:	e001      	b.n	8004a04 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a12:	e001      	b.n	8004a18 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	6a38      	ldr	r0, [r7, #32]
 8004a24:	f000 f950 	bl	8004cc8 <xEventGroupWaitBits>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d019      	beq.n	8004a70 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 8004a42:	f06f 0301 	mvn.w	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	e012      	b.n	8004a70 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004a4a:	f06f 0302 	mvn.w	r3, #2
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a50:	e00e      	b.n	8004a70 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 8004a62:	f06f 0301 	mvn.w	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a68:	e002      	b.n	8004a70 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004a6a:	f06f 0302 	mvn.w	r3, #2
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3730      	adds	r7, #48	@ 0x30
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000548 	.word	0x20000548

08004a80 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	@ 0x30
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a90:	f3ef 8305 	mrs	r3, IPSR
 8004a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8086 	bne.w	8004baa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	617b      	str	r3, [r7, #20]
  return(result);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d17f      	bne.n	8004baa <osSemaphoreNew+0x12a>
 8004aaa:	4b42      	ldr	r3, [pc, #264]	@ (8004bb4 <osSemaphoreNew+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d105      	bne.n	8004abe <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d175      	bne.n	8004baa <osSemaphoreNew+0x12a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d072      	beq.n	8004baa <osSemaphoreNew+0x12a>
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d86e      	bhi.n	8004baa <osSemaphoreNew+0x12a>
    mem = -1;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d015      	beq.n	8004b04 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <osSemaphoreNew+0x6e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004ae6:	d902      	bls.n	8004aee <osSemaphoreNew+0x6e>
        mem = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	e00c      	b.n	8004b08 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <osSemaphoreNew+0x88>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <osSemaphoreNew+0x88>
          mem = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e001      	b.n	8004b08 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d04c      	beq.n	8004baa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d128      	bne.n	8004b68 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10a      	bne.n	8004b32 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2203      	movs	r2, #3
 8004b22:	9200      	str	r2, [sp, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f000 fb8d 	bl	8005248 <xQueueGenericCreateStatic>
 8004b2e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b30:	e005      	b.n	8004b3e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004b32:	2203      	movs	r2, #3
 8004b34:	2100      	movs	r1, #0
 8004b36:	2001      	movs	r0, #1
 8004b38:	f000 fc02 	bl	8005340 <xQueueGenericCreate>
 8004b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <osSemaphoreNew+0x10a>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01f      	beq.n	8004b8a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2100      	movs	r1, #0
 8004b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b52:	f000 fcc5 	bl	80054e0 <xQueueGenericSend>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d016      	beq.n	8004b8a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004b5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b5e:	f000 ff3f 	bl	80059e0 <vQueueDelete>
            hSemaphore = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b66:	e010      	b.n	8004b8a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fc44 	bl	8005404 <xQueueCreateCountingSemaphoreStatic>
 8004b7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b7e:	e004      	b.n	8004b8a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fc77 	bl	8005476 <xQueueCreateCountingSemaphore>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e001      	b.n	8004ba2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ba6:	f001 f84f 	bl	8005c48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	@ 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000548 	.word	0x20000548

08004bb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a07      	ldr	r2, [pc, #28]	@ (8004be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004bc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <vApplicationGetIdleTaskMemory+0x30>)
 8004bce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2280      	movs	r2, #128	@ 0x80
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000054c 	.word	0x2000054c
 8004be8:	200005f4 	.word	0x200005f4

08004bec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a07      	ldr	r2, [pc, #28]	@ (8004c18 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a06      	ldr	r2, [pc, #24]	@ (8004c1c <vApplicationGetTimerTaskMemory+0x30>)
 8004c02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c0a:	601a      	str	r2, [r3, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	200007f4 	.word	0x200007f4
 8004c1c:	2000089c 	.word	0x2000089c

08004c20 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004c46:	2320      	movs	r3, #32
 8004c48:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d00b      	beq.n	8004c68 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60fb      	str	r3, [r7, #12]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xEventGroupCreateStatic+0x44>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f9c5 	bl	800500c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2201      	movs	r2, #1
 8004c86:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004c88:	697b      	ldr	r3, [r7, #20]
	}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004c98:	2020      	movs	r0, #32
 8004c9a:	f002 fde7 	bl	800786c <pvPortMalloc>
 8004c9e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f9ab 	bl	800500c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004cbc:	687b      	ldr	r3, [r7, #4]
	}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b090      	sub	sp, #64	@ 0x40
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	623b      	str	r3, [r7, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d06:	d30b      	bcc.n	8004d20 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	61fb      	str	r3, [r7, #28]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <xEventGroupWaitBits+0x76>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	61bb      	str	r3, [r7, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d3e:	f001 ff07 	bl	8006b50 <xTaskGetSchedulerState>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <xEventGroupWaitBits+0x86>
 8004d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <xEventGroupWaitBits+0x8a>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xEventGroupWaitBits+0x8c>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	617b      	str	r3, [r7, #20]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004d70:	f001 fa4c 	bl	800620c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d80:	f000 f90d 	bl	8004f9e <prvTestWaitCondition>
 8004d84:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d028      	beq.n	8004dec <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e020      	b.n	8004dec <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db8:	e018      	b.n	8004dec <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd8:	1d18      	adds	r0, r3, #4
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de2:	4619      	mov	r1, r3
 8004de4:	f001 fc1a 	bl	800661c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004dec:	f001 fa1c 	bl	8006228 <xTaskResumeAll>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d031      	beq.n	8004e5c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <xEventGroupWaitBits+0x1a0>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004e0e:	f001 ff2d 	bl	8006c6c <uxTaskResetEventItemValue>
 8004e12:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11a      	bne.n	8004e54 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004e1e:	f002 fc03 	bl	8007628 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004e2e:	f000 f8b6 	bl	8004f9e <prvTestWaitCondition>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	401a      	ands	r2, r3
 8004e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004e50:	f002 fc1c 	bl	800768c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3740      	adds	r7, #64	@ 0x40
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	@ 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004e76:	2300      	movs	r3, #0
 8004e78:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <xEventGroupSetBits+0x34>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	613b      	str	r3, [r7, #16]
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	e7fd      	b.n	8004e9c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ea6:	d30b      	bcc.n	8004ec0 <xEventGroupSetBits+0x54>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	3308      	adds	r3, #8
 8004eca:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004ecc:	f001 f99e 	bl	800620c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004ee2:	e03c      	b.n	8004f5e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004efa:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f02:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f1e:	e008      	b.n	8004f32 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d101      	bne.n	8004f32 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	4619      	mov	r1, r3
 8004f54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f56:	f001 fc2f 	bl	80067b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1be      	bne.n	8004ee4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	401a      	ands	r2, r3
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004f74:	f001 f958 	bl	8006228 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3738      	adds	r7, #56	@ 0x38
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff6b 	bl	8004e6c <xEventGroupSetBits>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e007      	b.n	8004fd4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d101      	bne.n	8004fd4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	4804      	ldr	r0, [pc, #16]	@ (8005008 <xEventGroupSetBitsFromISR+0x24>)
 8004ff8:	f002 f9c4 	bl	8007384 <xTimerPendFunctionCallFromISR>
 8004ffc:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08004f85 	.word	0x08004f85

0800500c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f103 0208 	add.w	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f103 0208 	add.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d103      	bne.n	80050ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e00c      	b.n	80050e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3308      	adds	r3, #8
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e002      	b.n	80050dc <vListInsert+0x2e>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d2f6      	bcs.n	80050d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6852      	ldr	r2, [r2, #4]
 8005140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d103      	bne.n	8005154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <xQueueGenericReset+0x2c>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60bb      	str	r3, [r7, #8]
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051a0:	f002 fa42 	bl	8007628 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d0:	3b01      	subs	r3, #1
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	441a      	add	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	22ff      	movs	r2, #255	@ 0xff
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d114      	bne.n	8005220 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01a      	beq.n	8005234 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3310      	adds	r3, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fa74 	bl	80066f0 <xTaskRemoveFromEventList>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <xQueueGenericReset+0xd0>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e009      	b.n	8005234 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3310      	adds	r3, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fef1 	bl	800500c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3324      	adds	r3, #36	@ 0x24
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff feec 	bl	800500c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005234:	f002 fa2a 	bl	800768c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005238:	2301      	movs	r3, #1
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	@ 0x38
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <xQueueGenericCreateStatic+0x56>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xQueueGenericCreateStatic+0x5a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericCreateStatic+0x5c>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <xQueueGenericCreateStatic+0x84>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <xQueueGenericCreateStatic+0x88>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <xQueueGenericCreateStatic+0x8a>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	61fb      	str	r3, [r7, #28]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052ee:	2350      	movs	r3, #80	@ 0x50
 80052f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b50      	cmp	r3, #80	@ 0x50
 80052f6:	d00b      	beq.n	8005310 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61bb      	str	r3, [r7, #24]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005322:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f844 	bl	80053be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005338:	4618      	mov	r0, r3
 800533a:	3730      	adds	r7, #48	@ 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <xQueueGenericCreate+0x2c>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	613b      	str	r3, [r7, #16]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	e004      	b.n	8005382 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3350      	adds	r3, #80	@ 0x50
 8005386:	4618      	mov	r0, r3
 8005388:	f002 fa70 	bl	800786c <pvPortMalloc>
 800538c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	3350      	adds	r3, #80	@ 0x50
 8005398:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053a2:	79fa      	ldrb	r2, [r7, #7]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f805 	bl	80053be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053b4:	69bb      	ldr	r3, [r7, #24]
	}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e002      	b.n	80053e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ec:	2101      	movs	r1, #1
 80053ee:	69b8      	ldr	r0, [r7, #24]
 80053f0:	f7ff fec0 	bl	8005174 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	@ 0x28
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	61bb      	str	r3, [r7, #24]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d90b      	bls.n	800544e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	617b      	str	r3, [r7, #20]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800544e:	2302      	movs	r3, #2
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	2100      	movs	r1, #0
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff fef5 	bl	8005248 <xQueueGenericCreateStatic>
 800545e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800546c:	69fb      	ldr	r3, [r7, #28]
	}
 800546e:	4618      	mov	r0, r3
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	613b      	str	r3, [r7, #16]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90b      	bls.n	80054be <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60fb      	str	r3, [r7, #12]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054be:	2202      	movs	r2, #2
 80054c0:	2100      	movs	r1, #0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff3c 	bl	8005340 <xQueueGenericCreate>
 80054c8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054d6:	697b      	ldr	r3, [r7, #20]
	}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	@ 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <xQueueGenericSend+0x34>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <xQueueGenericSend+0x42>
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <xQueueGenericSend+0x46>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <xQueueGenericSend+0x48>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <xQueueGenericSend+0x64>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d103      	bne.n	8005552 <xQueueGenericSend+0x72>
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <xQueueGenericSend+0x76>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <xQueueGenericSend+0x78>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <xQueueGenericSend+0x94>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	623b      	str	r3, [r7, #32]
}
 800556e:	bf00      	nop
 8005570:	bf00      	nop
 8005572:	e7fd      	b.n	8005570 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005574:	f001 faec 	bl	8006b50 <xTaskGetSchedulerState>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <xQueueGenericSend+0xa4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <xQueueGenericSend+0xa8>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <xQueueGenericSend+0xaa>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61fb      	str	r3, [r7, #28]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055a6:	f002 f83f 	bl	8007628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <xQueueGenericSend+0xdc>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d129      	bne.n	8005610 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055c2:	f000 fa31 	bl	8005a28 <prvCopyDataToQueue>
 80055c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	3324      	adds	r3, #36	@ 0x24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 f88b 	bl	80066f0 <xTaskRemoveFromEventList>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d013      	beq.n	8005608 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055e0:	4b3f      	ldr	r3, [pc, #252]	@ (80056e0 <xQueueGenericSend+0x200>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	e00a      	b.n	8005608 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055f8:	4b39      	ldr	r3, [pc, #228]	@ (80056e0 <xQueueGenericSend+0x200>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005608:	f002 f840 	bl	800768c <vPortExitCritical>
				return pdPASS;
 800560c:	2301      	movs	r3, #1
 800560e:	e063      	b.n	80056d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005616:	f002 f839 	bl	800768c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800561a:	2300      	movs	r3, #0
 800561c:	e05c      	b.n	80056d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800561e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005624:	f107 0314 	add.w	r3, r7, #20
 8005628:	4618      	mov	r0, r3
 800562a:	f001 f929 	bl	8006880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005632:	f002 f82b 	bl	800768c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005636:	f000 fde9 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800563a:	f001 fff5 	bl	8007628 <vPortEnterCritical>
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005644:	b25b      	sxtb	r3, r3
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d103      	bne.n	8005654 <xQueueGenericSend+0x174>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800565a:	b25b      	sxtb	r3, r3
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d103      	bne.n	800566a <xQueueGenericSend+0x18a>
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800566a:	f002 f80f 	bl	800768c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800566e:	1d3a      	adds	r2, r7, #4
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f918 	bl	80068ac <xTaskCheckForTimeOut>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d124      	bne.n	80056cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005684:	f000 fac8 	bl	8005c18 <prvIsQueueFull>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	3310      	adds	r3, #16
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 ff9a 	bl	80065d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800569c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800569e:	f000 fa53 	bl	8005b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056a2:	f000 fdc1 	bl	8006228 <xTaskResumeAll>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f af7c 	bne.w	80055a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <xQueueGenericSend+0x200>)
 80056b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	e772      	b.n	80055a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056c2:	f000 fa41 	bl	8005b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056c6:	f000 fdaf 	bl	8006228 <xTaskResumeAll>
 80056ca:	e76c      	b.n	80055a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ce:	f000 fa3b 	bl	8005b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056d2:	f000 fda9 	bl	8006228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056d6:	2300      	movs	r3, #0
		}
	}
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3738      	adds	r7, #56	@ 0x38
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08e      	sub	sp, #56	@ 0x38
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <xQueueGenericSendFromISR+0x3e>
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <xQueueGenericSendFromISR+0x42>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xQueueGenericSendFromISR+0x44>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	623b      	str	r3, [r7, #32]
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d103      	bne.n	8005752 <xQueueGenericSendFromISR+0x6e>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <xQueueGenericSendFromISR+0x72>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueGenericSendFromISR+0x74>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61fb      	str	r3, [r7, #28]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005774:	f002 f838 	bl	80077e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005778:	f3ef 8211 	mrs	r2, BASEPRI
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	61ba      	str	r2, [r7, #24]
 800578e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005790:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005792:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <xQueueGenericSendFromISR+0xc2>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d12c      	bne.n	8005800 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057b6:	f000 f937 	bl	8005a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d112      	bne.n	80057ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	3324      	adds	r3, #36	@ 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 ff8d 	bl	80066f0 <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00e      	beq.n	80057fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e007      	b.n	80057fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057ee:	3301      	adds	r3, #1
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	b25a      	sxtb	r2, r3
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057fa:	2301      	movs	r3, #1
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80057fe:	e001      	b.n	8005804 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005800:	2300      	movs	r3, #0
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
 8005804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005806:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800580e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005812:	4618      	mov	r0, r3
 8005814:	3738      	adds	r7, #56	@ 0x38
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	@ 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005828:	2300      	movs	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <xQueueReceive+0x32>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	623b      	str	r3, [r7, #32]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <xQueueReceive+0x40>
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <xQueueReceive+0x44>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <xQueueReceive+0x46>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <xQueueReceive+0x62>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61fb      	str	r3, [r7, #28]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800587e:	f001 f967 	bl	8006b50 <xTaskGetSchedulerState>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <xQueueReceive+0x72>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <xQueueReceive+0x76>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueReceive+0x78>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <xQueueReceive+0x94>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	61bb      	str	r3, [r7, #24]
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058b0:	f001 feba 	bl	8007628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01f      	beq.n	8005900 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c4:	f000 f91a 	bl	8005afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	3310      	adds	r3, #16
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 ff07 	bl	80066f0 <xTaskRemoveFromEventList>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058e8:	4b3c      	ldr	r3, [pc, #240]	@ (80059dc <xQueueReceive+0x1c0>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058f8:	f001 fec8 	bl	800768c <vPortExitCritical>
				return pdPASS;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e069      	b.n	80059d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005906:	f001 fec1 	bl	800768c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800590a:	2300      	movs	r3, #0
 800590c:	e062      	b.n	80059d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005914:	f107 0310 	add.w	r3, r7, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ffb1 	bl	8006880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005922:	f001 feb3 	bl	800768c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005926:	f000 fc71 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592a:	f001 fe7d 	bl	8007628 <vPortEnterCritical>
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005934:	b25b      	sxtb	r3, r3
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d103      	bne.n	8005944 <xQueueReceive+0x128>
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800594a:	b25b      	sxtb	r3, r3
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d103      	bne.n	800595a <xQueueReceive+0x13e>
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800595a:	f001 fe97 	bl	800768c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800595e:	1d3a      	adds	r2, r7, #4
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f000 ffa0 	bl	80068ac <xTaskCheckForTimeOut>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d123      	bne.n	80059ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005974:	f000 f93a 	bl	8005bec <prvIsQueueEmpty>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	3324      	adds	r3, #36	@ 0x24
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fe22 	bl	80065d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800598c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800598e:	f000 f8db 	bl	8005b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005992:	f000 fc49 	bl	8006228 <xTaskResumeAll>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d189      	bne.n	80058b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800599c:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <xQueueReceive+0x1c0>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	e780      	b.n	80058b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b0:	f000 f8ca 	bl	8005b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059b4:	f000 fc38 	bl	8006228 <xTaskResumeAll>
 80059b8:	e77a      	b.n	80058b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059bc:	f000 f8c4 	bl	8005b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c0:	f000 fc32 	bl	8006228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c6:	f000 f911 	bl	8005bec <prvIsQueueEmpty>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f43f af6f 	beq.w	80058b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3730      	adds	r7, #48	@ 0x30
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <vQueueDelete+0x2a>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	60bb      	str	r3, [r7, #8]
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	e7fd      	b.n	8005a06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f946 	bl	8005c9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 ffee 	bl	80079fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d14d      	bne.n	8005aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 f89a 	bl	8006b8c <xTaskPriorityDisinherit>
 8005a58:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	605a      	str	r2, [r3, #4]
 8005a60:	e043      	b.n	8005aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d119      	bne.n	8005a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6898      	ldr	r0, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	461a      	mov	r2, r3
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	f002 f966 	bl	8007d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d32b      	bcc.n	8005aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	e026      	b.n	8005aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68d8      	ldr	r0, [r3, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	f002 f94c 	bl	8007d44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d207      	bcs.n	8005ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	441a      	add	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d105      	bne.n	8005aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005af2:	697b      	ldr	r3, [r7, #20]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d018      	beq.n	8005b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d303      	bcc.n	8005b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	f002 f902 	bl	8007d44 <memcpy>
	}
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b50:	f001 fd6a 	bl	8007628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b5c:	e011      	b.n	8005b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3324      	adds	r3, #36	@ 0x24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fdc0 	bl	80066f0 <xTaskRemoveFromEventList>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b76:	f000 fefd 	bl	8006974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dce9      	bgt.n	8005b5e <prvUnlockQueue+0x16>
 8005b8a:	e000      	b.n	8005b8e <prvUnlockQueue+0x46>
					break;
 8005b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	22ff      	movs	r2, #255	@ 0xff
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b96:	f001 fd79 	bl	800768c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b9a:	f001 fd45 	bl	8007628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba6:	e011      	b.n	8005bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fd9b 	bl	80066f0 <xTaskRemoveFromEventList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc0:	f000 fed8 	bl	8006974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dce9      	bgt.n	8005ba8 <prvUnlockQueue+0x60>
 8005bd4:	e000      	b.n	8005bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	22ff      	movs	r2, #255	@ 0xff
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005be0:	f001 fd54 	bl	800768c <vPortExitCritical>
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf4:	f001 fd18 	bl	8007628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e001      	b.n	8005c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f001 fd3f 	bl	800768c <vPortExitCritical>

	return xReturn;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c20:	f001 fd02 	bl	8007628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d102      	bne.n	8005c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e001      	b.n	8005c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c3a:	f001 fd27 	bl	800768c <vPortExitCritical>

	return xReturn;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e014      	b.n	8005c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c58:	4a0f      	ldr	r2, [pc, #60]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c64:	490c      	ldr	r1, [pc, #48]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <vQueueAddToRegistry+0x50>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c7a:	e006      	b.n	8005c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	d9e7      	bls.n	8005c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000c9c 	.word	0x20000c9c

08005c9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e016      	b.n	8005cd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <vQueueUnregisterQueue+0x50>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d10b      	bne.n	8005cd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cba:	4a0c      	ldr	r2, [pc, #48]	@ (8005cec <vQueueUnregisterQueue+0x50>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005cc4:	4a09      	ldr	r2, [pc, #36]	@ (8005cec <vQueueUnregisterQueue+0x50>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
				break;
 8005cd0:	e006      	b.n	8005ce0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	d9e5      	bls.n	8005caa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000c9c 	.word	0x20000c9c

08005cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d00:	f001 fc92 	bl	8007628 <vPortEnterCritical>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d103      	bne.n	8005d1a <vQueueWaitForMessageRestricted+0x2a>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d20:	b25b      	sxtb	r3, r3
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d103      	bne.n	8005d30 <vQueueWaitForMessageRestricted+0x40>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d30:	f001 fcac 	bl	800768c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3324      	adds	r3, #36	@ 0x24
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fca7 	bl	8006698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f7ff fefc 	bl	8005b48 <prvUnlockQueue>
	}
 8005d50:	bf00      	nop
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08e      	sub	sp, #56	@ 0x38
 8005d5c:	af04      	add	r7, sp, #16
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	623b      	str	r3, [r7, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61fb      	str	r3, [r7, #28]
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005da2:	23a8      	movs	r3, #168	@ 0xa8
 8005da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2ba8      	cmp	r3, #168	@ 0xa8
 8005daa:	d00b      	beq.n	8005dc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	61bb      	str	r3, [r7, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01e      	beq.n	8005e08 <xTaskCreateStatic+0xb0>
 8005dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dd8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005de2:	2300      	movs	r3, #0
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f850 	bl	8005ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e02:	f000 f8ed 	bl	8005fe0 <prvAddNewTaskToReadyList>
 8005e06:	e001      	b.n	8005e0c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e0c:	697b      	ldr	r3, [r7, #20]
	}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3728      	adds	r7, #40	@ 0x28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b08c      	sub	sp, #48	@ 0x30
 8005e1a:	af04      	add	r7, sp, #16
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fd1e 	bl	800786c <pvPortMalloc>
 8005e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00e      	beq.n	8005e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e38:	20a8      	movs	r0, #168	@ 0xa8
 8005e3a:	f001 fd17 	bl	800786c <pvPortMalloc>
 8005e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e4c:	e005      	b.n	8005e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e4e:	6978      	ldr	r0, [r7, #20]
 8005e50:	f001 fdd4 	bl	80079fc <vPortFree>
 8005e54:	e001      	b.n	8005e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f80e 	bl	8005ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e84:	69f8      	ldr	r0, [r7, #28]
 8005e86:	f000 f8ab 	bl	8005fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e002      	b.n	8005e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e96:	69bb      	ldr	r3, [r7, #24]
	}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	21a5      	movs	r1, #165	@ 0xa5
 8005eba:	f001 feb7 	bl	8007c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	617b      	str	r3, [r7, #20]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	e012      	b.n	8005f26 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	7819      	ldrb	r1, [r3, #0]
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3334      	adds	r3, #52	@ 0x34
 8005f10:	460a      	mov	r2, r1
 8005f12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b0f      	cmp	r3, #15
 8005f2a:	d9e9      	bls.n	8005f00 <prvInitialiseNewTask+0x60>
 8005f2c:	e000      	b.n	8005f30 <prvInitialiseNewTask+0x90>
		{
			break;
 8005f2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	2b37      	cmp	r3, #55	@ 0x37
 8005f3c:	d901      	bls.n	8005f42 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f3e:	2337      	movs	r3, #55	@ 0x37
 8005f40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2200      	movs	r2, #0
 8005f52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff f877 	bl	800504c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	3318      	adds	r3, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f872 	bl	800504c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	3354      	adds	r3, #84	@ 0x54
 8005f92:	224c      	movs	r2, #76	@ 0x4c
 8005f94:	2100      	movs	r1, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 fe48 	bl	8007c2c <memset>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd4 <prvInitialiseNewTask+0x134>)
 8005fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd8 <prvInitialiseNewTask+0x138>)
 8005fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	4a0c      	ldr	r2, [pc, #48]	@ (8005fdc <prvInitialiseNewTask+0x13c>)
 8005fac:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	68f9      	ldr	r1, [r7, #12]
 8005fb2:	69b8      	ldr	r0, [r7, #24]
 8005fb4:	f001 fa06 	bl	80073c4 <pxPortInitialiseStack>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20002328 	.word	0x20002328
 8005fd8:	20002390 	.word	0x20002390
 8005fdc:	200023f8 	.word	0x200023f8

08005fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fe8:	f001 fb1e 	bl	8007628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fec:	4b2d      	ldr	r3, [pc, #180]	@ (80060a4 <prvAddNewTaskToReadyList+0xc4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80060a4 <prvAddNewTaskToReadyList+0xc4>)
 8005ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80060a8 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80060a8 <prvAddNewTaskToReadyList+0xc8>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <prvAddNewTaskToReadyList+0xc4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d110      	bne.n	800602e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800600c:	f000 fcd6 	bl	80069bc <prvInitialiseTaskLists>
 8006010:	e00d      	b.n	800602e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006012:	4b26      	ldr	r3, [pc, #152]	@ (80060ac <prvAddNewTaskToReadyList+0xcc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <prvAddNewTaskToReadyList+0xc8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	429a      	cmp	r2, r3
 8006026:	d802      	bhi.n	800602e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006028:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <prvAddNewTaskToReadyList+0xc8>)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800602e:	4b20      	ldr	r3, [pc, #128]	@ (80060b0 <prvAddNewTaskToReadyList+0xd0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a1e      	ldr	r2, [pc, #120]	@ (80060b0 <prvAddNewTaskToReadyList+0xd0>)
 8006036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006038:	4b1d      	ldr	r3, [pc, #116]	@ (80060b0 <prvAddNewTaskToReadyList+0xd0>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006044:	4b1b      	ldr	r3, [pc, #108]	@ (80060b4 <prvAddNewTaskToReadyList+0xd4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d903      	bls.n	8006054 <prvAddNewTaskToReadyList+0x74>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <prvAddNewTaskToReadyList+0xd4>)
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <prvAddNewTaskToReadyList+0xd8>)
 8006062:	441a      	add	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f7fe fffb 	bl	8005066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006070:	f001 fb0c 	bl	800768c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006074:	4b0d      	ldr	r3, [pc, #52]	@ (80060ac <prvAddNewTaskToReadyList+0xcc>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00e      	beq.n	800609a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <prvAddNewTaskToReadyList+0xc8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	429a      	cmp	r2, r3
 8006088:	d207      	bcs.n	800609a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <prvAddNewTaskToReadyList+0xdc>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200011b0 	.word	0x200011b0
 80060a8:	20000cdc 	.word	0x20000cdc
 80060ac:	200011bc 	.word	0x200011bc
 80060b0:	200011cc 	.word	0x200011cc
 80060b4:	200011b8 	.word	0x200011b8
 80060b8:	20000ce0 	.word	0x20000ce0
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <vTaskDelay+0x64>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <vTaskDelay+0x32>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	60bb      	str	r3, [r7, #8]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060f2:	f000 f88b 	bl	800620c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f6:	2100      	movs	r1, #0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fdcf 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060fe:	f000 f893 	bl	8006228 <xTaskResumeAll>
 8006102:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800610a:	4b07      	ldr	r3, [pc, #28]	@ (8006128 <vTaskDelay+0x68>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200011d8 	.word	0x200011d8
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800613a:	463a      	mov	r2, r7
 800613c:	1d39      	adds	r1, r7, #4
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fd38 	bl	8004bb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	9202      	str	r2, [sp, #8]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	460a      	mov	r2, r1
 800615a:	4924      	ldr	r1, [pc, #144]	@ (80061ec <vTaskStartScheduler+0xc0>)
 800615c:	4824      	ldr	r0, [pc, #144]	@ (80061f0 <vTaskStartScheduler+0xc4>)
 800615e:	f7ff fdfb 	bl	8005d58 <xTaskCreateStatic>
 8006162:	4603      	mov	r3, r0
 8006164:	4a23      	ldr	r2, [pc, #140]	@ (80061f4 <vTaskStartScheduler+0xc8>)
 8006166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006168:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <vTaskStartScheduler+0xc8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e001      	b.n	800617a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d102      	bne.n	8006186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006180:	f000 fde0 	bl	8006d44 <xTimerCreateTimerTask>
 8006184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d11b      	bne.n	80061c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	613b      	str	r3, [r7, #16]
}
 800619e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061a0:	4b15      	ldr	r3, [pc, #84]	@ (80061f8 <vTaskStartScheduler+0xcc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3354      	adds	r3, #84	@ 0x54
 80061a6:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <vTaskStartScheduler+0xd0>)
 80061a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061aa:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <vTaskStartScheduler+0xd4>)
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061b2:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <vTaskStartScheduler+0xd8>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061b8:	4b13      	ldr	r3, [pc, #76]	@ (8006208 <vTaskStartScheduler+0xdc>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061be:	f001 f98f 	bl	80074e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061c2:	e00f      	b.n	80061e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d10b      	bne.n	80061e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <vTaskStartScheduler+0xb4>
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	08007e4c 	.word	0x08007e4c
 80061f0:	0800698d 	.word	0x0800698d
 80061f4:	200011d4 	.word	0x200011d4
 80061f8:	20000cdc 	.word	0x20000cdc
 80061fc:	20000010 	.word	0x20000010
 8006200:	200011d0 	.word	0x200011d0
 8006204:	200011bc 	.word	0x200011bc
 8006208:	200011b4 	.word	0x200011b4

0800620c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006210:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <vTaskSuspendAll+0x18>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a03      	ldr	r2, [pc, #12]	@ (8006224 <vTaskSuspendAll+0x18>)
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	200011d8 	.word	0x200011d8

08006228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006236:	4b42      	ldr	r3, [pc, #264]	@ (8006340 <xTaskResumeAll+0x118>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10b      	bne.n	8006256 <xTaskResumeAll+0x2e>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	603b      	str	r3, [r7, #0]
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	e7fd      	b.n	8006252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006256:	f001 f9e7 	bl	8007628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800625a:	4b39      	ldr	r3, [pc, #228]	@ (8006340 <xTaskResumeAll+0x118>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3b01      	subs	r3, #1
 8006260:	4a37      	ldr	r2, [pc, #220]	@ (8006340 <xTaskResumeAll+0x118>)
 8006262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006264:	4b36      	ldr	r3, [pc, #216]	@ (8006340 <xTaskResumeAll+0x118>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d162      	bne.n	8006332 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800626c:	4b35      	ldr	r3, [pc, #212]	@ (8006344 <xTaskResumeAll+0x11c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d05e      	beq.n	8006332 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006274:	e02f      	b.n	80062d6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006276:	4b34      	ldr	r3, [pc, #208]	@ (8006348 <xTaskResumeAll+0x120>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3318      	adds	r3, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe ff4c 	bl	8005120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3304      	adds	r3, #4
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe ff47 	bl	8005120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006296:	4b2d      	ldr	r3, [pc, #180]	@ (800634c <xTaskResumeAll+0x124>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d903      	bls.n	80062a6 <xTaskResumeAll+0x7e>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a2:	4a2a      	ldr	r2, [pc, #168]	@ (800634c <xTaskResumeAll+0x124>)
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a27      	ldr	r2, [pc, #156]	@ (8006350 <xTaskResumeAll+0x128>)
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fe fed2 	bl	8005066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c6:	4b23      	ldr	r3, [pc, #140]	@ (8006354 <xTaskResumeAll+0x12c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062d0:	4b21      	ldr	r3, [pc, #132]	@ (8006358 <xTaskResumeAll+0x130>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <xTaskResumeAll+0x120>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1cb      	bne.n	8006276 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062e4:	f000 fc0e 	bl	8006b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062e8:	4b1c      	ldr	r3, [pc, #112]	@ (800635c <xTaskResumeAll+0x134>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062f4:	f000 f846 	bl	8006384 <xTaskIncrementTick>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80062fe:	4b16      	ldr	r3, [pc, #88]	@ (8006358 <xTaskResumeAll+0x130>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3b01      	subs	r3, #1
 8006308:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f1      	bne.n	80062f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006310:	4b12      	ldr	r3, [pc, #72]	@ (800635c <xTaskResumeAll+0x134>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006316:	4b10      	ldr	r3, [pc, #64]	@ (8006358 <xTaskResumeAll+0x130>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800631e:	2301      	movs	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006322:	4b0f      	ldr	r3, [pc, #60]	@ (8006360 <xTaskResumeAll+0x138>)
 8006324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006332:	f001 f9ab 	bl	800768c <vPortExitCritical>

	return xAlreadyYielded;
 8006336:	68bb      	ldr	r3, [r7, #8]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200011d8 	.word	0x200011d8
 8006344:	200011b0 	.word	0x200011b0
 8006348:	20001170 	.word	0x20001170
 800634c:	200011b8 	.word	0x200011b8
 8006350:	20000ce0 	.word	0x20000ce0
 8006354:	20000cdc 	.word	0x20000cdc
 8006358:	200011c4 	.word	0x200011c4
 800635c:	200011c0 	.word	0x200011c0
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800636a:	4b05      	ldr	r3, [pc, #20]	@ (8006380 <xTaskGetTickCount+0x1c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	200011b4 	.word	0x200011b4

08006384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638e:	4b52      	ldr	r3, [pc, #328]	@ (80064d8 <xTaskIncrementTick+0x154>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 808f 	bne.w	80064b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006398:	4b50      	ldr	r3, [pc, #320]	@ (80064dc <xTaskIncrementTick+0x158>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063a0:	4a4e      	ldr	r2, [pc, #312]	@ (80064dc <xTaskIncrementTick+0x158>)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d121      	bne.n	80063f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063ac:	4b4c      	ldr	r3, [pc, #304]	@ (80064e0 <xTaskIncrementTick+0x15c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	603b      	str	r3, [r7, #0]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xTaskIncrementTick+0x46>
 80063ce:	4b44      	ldr	r3, [pc, #272]	@ (80064e0 <xTaskIncrementTick+0x15c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	4b43      	ldr	r3, [pc, #268]	@ (80064e4 <xTaskIncrementTick+0x160>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a41      	ldr	r2, [pc, #260]	@ (80064e0 <xTaskIncrementTick+0x15c>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4a41      	ldr	r2, [pc, #260]	@ (80064e4 <xTaskIncrementTick+0x160>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b41      	ldr	r3, [pc, #260]	@ (80064e8 <xTaskIncrementTick+0x164>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	4a3f      	ldr	r2, [pc, #252]	@ (80064e8 <xTaskIncrementTick+0x164>)
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	f000 fb8a 	bl	8006b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063f0:	4b3e      	ldr	r3, [pc, #248]	@ (80064ec <xTaskIncrementTick+0x168>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d34e      	bcc.n	8006498 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fa:	4b39      	ldr	r3, [pc, #228]	@ (80064e0 <xTaskIncrementTick+0x15c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xTaskIncrementTick+0x84>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xTaskIncrementTick+0x86>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640e:	4b37      	ldr	r3, [pc, #220]	@ (80064ec <xTaskIncrementTick+0x168>)
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	601a      	str	r2, [r3, #0]
					break;
 8006416:	e03f      	b.n	8006498 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006418:	4b31      	ldr	r3, [pc, #196]	@ (80064e0 <xTaskIncrementTick+0x15c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d203      	bcs.n	8006438 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006430:	4a2e      	ldr	r2, [pc, #184]	@ (80064ec <xTaskIncrementTick+0x168>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
						break;
 8006436:	e02f      	b.n	8006498 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fe6f 	bl	8005120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3318      	adds	r3, #24
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fe66 	bl	8005120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	4b25      	ldr	r3, [pc, #148]	@ (80064f0 <xTaskIncrementTick+0x16c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d903      	bls.n	8006468 <xTaskIncrementTick+0xe4>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	4a22      	ldr	r2, [pc, #136]	@ (80064f0 <xTaskIncrementTick+0x16c>)
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <xTaskIncrementTick+0x170>)
 8006476:	441a      	add	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe fdf1 	bl	8005066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <xTaskIncrementTick+0x174>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d3b3      	bcc.n	80063fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006492:	2301      	movs	r3, #1
 8006494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006496:	e7b0      	b.n	80063fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006498:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <xTaskIncrementTick+0x174>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649e:	4915      	ldr	r1, [pc, #84]	@ (80064f4 <xTaskIncrementTick+0x170>)
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d907      	bls.n	80064c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e004      	b.n	80064c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064b6:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <xTaskIncrementTick+0x178>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3301      	adds	r3, #1
 80064bc:	4a0f      	ldr	r2, [pc, #60]	@ (80064fc <xTaskIncrementTick+0x178>)
 80064be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006500 <xTaskIncrementTick+0x17c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064cc:	697b      	ldr	r3, [r7, #20]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200011d8 	.word	0x200011d8
 80064dc:	200011b4 	.word	0x200011b4
 80064e0:	20001168 	.word	0x20001168
 80064e4:	2000116c 	.word	0x2000116c
 80064e8:	200011c8 	.word	0x200011c8
 80064ec:	200011d0 	.word	0x200011d0
 80064f0:	200011b8 	.word	0x200011b8
 80064f4:	20000ce0 	.word	0x20000ce0
 80064f8:	20000cdc 	.word	0x20000cdc
 80064fc:	200011c0 	.word	0x200011c0
 8006500:	200011c4 	.word	0x200011c4

08006504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800650a:	4b2b      	ldr	r3, [pc, #172]	@ (80065b8 <vTaskSwitchContext+0xb4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006512:	4b2a      	ldr	r3, [pc, #168]	@ (80065bc <vTaskSwitchContext+0xb8>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006518:	e047      	b.n	80065aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800651a:	4b28      	ldr	r3, [pc, #160]	@ (80065bc <vTaskSwitchContext+0xb8>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006520:	4b27      	ldr	r3, [pc, #156]	@ (80065c0 <vTaskSwitchContext+0xbc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e011      	b.n	800654c <vTaskSwitchContext+0x48>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <vTaskSwitchContext+0x42>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <vTaskSwitchContext+0x3e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b01      	subs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	491d      	ldr	r1, [pc, #116]	@ (80065c4 <vTaskSwitchContext+0xc0>)
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e3      	beq.n	8006528 <vTaskSwitchContext+0x24>
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a16      	ldr	r2, [pc, #88]	@ (80065c4 <vTaskSwitchContext+0xc0>)
 800656c:	4413      	add	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3308      	adds	r3, #8
 8006582:	429a      	cmp	r2, r3
 8006584:	d104      	bne.n	8006590 <vTaskSwitchContext+0x8c>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <vTaskSwitchContext+0xc4>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4a09      	ldr	r2, [pc, #36]	@ (80065c0 <vTaskSwitchContext+0xbc>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a0:	4b09      	ldr	r3, [pc, #36]	@ (80065c8 <vTaskSwitchContext+0xc4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3354      	adds	r3, #84	@ 0x54
 80065a6:	4a09      	ldr	r2, [pc, #36]	@ (80065cc <vTaskSwitchContext+0xc8>)
 80065a8:	6013      	str	r3, [r2, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	200011d8 	.word	0x200011d8
 80065bc:	200011c4 	.word	0x200011c4
 80065c0:	200011b8 	.word	0x200011b8
 80065c4:	20000ce0 	.word	0x20000ce0
 80065c8:	20000cdc 	.word	0x20000cdc
 80065cc:	20000010 	.word	0x20000010

080065d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f8:	4b07      	ldr	r3, [pc, #28]	@ (8006618 <vTaskPlaceOnEventList+0x48>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3318      	adds	r3, #24
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fe fd54 	bl	80050ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006606:	2101      	movs	r1, #1
 8006608:	6838      	ldr	r0, [r7, #0]
 800660a:	f000 fb47 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000cdc 	.word	0x20000cdc

0800661c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	617b      	str	r3, [r7, #20]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006646:	4b12      	ldr	r3, [pc, #72]	@ (8006690 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	613b      	str	r3, [r7, #16]
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	e7fd      	b.n	8006662 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006670:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006672:	4b08      	ldr	r3, [pc, #32]	@ (8006694 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3318      	adds	r3, #24
 8006678:	4619      	mov	r1, r3
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7fe fcf3 	bl	8005066 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006680:	2101      	movs	r1, #1
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb0a 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	200011d8 	.word	0x200011d8
 8006694:	20000cdc 	.word	0x20000cdc

08006698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	617b      	str	r3, [r7, #20]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066c2:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <vTaskPlaceOnEventListRestricted+0x54>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3318      	adds	r3, #24
 80066c8:	4619      	mov	r1, r3
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7fe fccb 	bl	8005066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68b8      	ldr	r0, [r7, #8]
 80066e0:	f000 fadc 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
	}
 80066e4:	bf00      	nop
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000cdc 	.word	0x20000cdc

080066f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60fb      	str	r3, [r7, #12]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3318      	adds	r3, #24
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fcfc 	bl	8005120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006728:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <xTaskRemoveFromEventList+0xb0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11d      	bne.n	800676c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fcf3 	bl	8005120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673e:	4b19      	ldr	r3, [pc, #100]	@ (80067a4 <xTaskRemoveFromEventList+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d903      	bls.n	800674e <xTaskRemoveFromEventList+0x5e>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <xTaskRemoveFromEventList+0xb4>)
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4a13      	ldr	r2, [pc, #76]	@ (80067a8 <xTaskRemoveFromEventList+0xb8>)
 800675c:	441a      	add	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3304      	adds	r3, #4
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7fe fc7e 	bl	8005066 <vListInsertEnd>
 800676a:	e005      	b.n	8006778 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3318      	adds	r3, #24
 8006770:	4619      	mov	r1, r3
 8006772:	480e      	ldr	r0, [pc, #56]	@ (80067ac <xTaskRemoveFromEventList+0xbc>)
 8006774:	f7fe fc77 	bl	8005066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <xTaskRemoveFromEventList+0xc0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	429a      	cmp	r2, r3
 8006784:	d905      	bls.n	8006792 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800678a:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <xTaskRemoveFromEventList+0xc4>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e001      	b.n	8006796 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006796:	697b      	ldr	r3, [r7, #20]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200011d8 	.word	0x200011d8
 80067a4:	200011b8 	.word	0x200011b8
 80067a8:	20000ce0 	.word	0x20000ce0
 80067ac:	20001170 	.word	0x20001170
 80067b0:	20000cdc 	.word	0x20000cdc
 80067b4:	200011c4 	.word	0x200011c4

080067b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	613b      	str	r3, [r7, #16]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fe fc85 	bl	8005120 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fc80 	bl	8005120 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006824:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d903      	bls.n	8006834 <vTaskRemoveFromUnorderedEventList+0x7c>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	4a0f      	ldr	r2, [pc, #60]	@ (8006870 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4a0c      	ldr	r2, [pc, #48]	@ (8006874 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006842:	441a      	add	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f7fe fc0b 	bl	8005066 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006854:	4b08      	ldr	r3, [pc, #32]	@ (8006878 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d902      	bls.n	8006864 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800685e:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
	}
}
 8006864:	bf00      	nop
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200011d8 	.word	0x200011d8
 8006870:	200011b8 	.word	0x200011b8
 8006874:	20000ce0 	.word	0x20000ce0
 8006878:	20000cdc 	.word	0x20000cdc
 800687c:	200011c4 	.word	0x200011c4

08006880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <vTaskInternalSetTimeOutState+0x24>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <vTaskInternalSetTimeOutState+0x28>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	605a      	str	r2, [r3, #4]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	200011c8 	.word	0x200011c8
 80068a8:	200011b4 	.word	0x200011b4

080068ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	613b      	str	r3, [r7, #16]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60fb      	str	r3, [r7, #12]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068f2:	f000 fe99 	bl	8007628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068f6:	4b1d      	ldr	r3, [pc, #116]	@ (800696c <xTaskCheckForTimeOut+0xc0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d102      	bne.n	8006916 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e023      	b.n	800695e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b15      	ldr	r3, [pc, #84]	@ (8006970 <xTaskCheckForTimeOut+0xc4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d007      	beq.n	8006932 <xTaskCheckForTimeOut+0x86>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	e015      	b.n	800695e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	429a      	cmp	r2, r3
 800693a:	d20b      	bcs.n	8006954 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff99 	bl	8006880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	e004      	b.n	800695e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800695e:	f000 fe95 	bl	800768c <vPortExitCritical>

	return xReturn;
 8006962:	69fb      	ldr	r3, [r7, #28]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200011b4 	.word	0x200011b4
 8006970:	200011c8 	.word	0x200011c8

08006974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006978:	4b03      	ldr	r3, [pc, #12]	@ (8006988 <vTaskMissedYield+0x14>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
}
 800697e:	bf00      	nop
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	200011c4 	.word	0x200011c4

0800698c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006994:	f000 f852 	bl	8006a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <prvIdleTask+0x28>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d9f9      	bls.n	8006994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <prvIdleTask+0x2c>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069b0:	e7f0      	b.n	8006994 <prvIdleTask+0x8>
 80069b2:	bf00      	nop
 80069b4:	20000ce0 	.word	0x20000ce0
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c2:	2300      	movs	r3, #0
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	e00c      	b.n	80069e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4a12      	ldr	r2, [pc, #72]	@ (8006a1c <prvInitialiseTaskLists+0x60>)
 80069d4:	4413      	add	r3, r2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fb18 	bl	800500c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3301      	adds	r3, #1
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b37      	cmp	r3, #55	@ 0x37
 80069e6:	d9ef      	bls.n	80069c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069e8:	480d      	ldr	r0, [pc, #52]	@ (8006a20 <prvInitialiseTaskLists+0x64>)
 80069ea:	f7fe fb0f 	bl	800500c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069ee:	480d      	ldr	r0, [pc, #52]	@ (8006a24 <prvInitialiseTaskLists+0x68>)
 80069f0:	f7fe fb0c 	bl	800500c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069f4:	480c      	ldr	r0, [pc, #48]	@ (8006a28 <prvInitialiseTaskLists+0x6c>)
 80069f6:	f7fe fb09 	bl	800500c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069fa:	480c      	ldr	r0, [pc, #48]	@ (8006a2c <prvInitialiseTaskLists+0x70>)
 80069fc:	f7fe fb06 	bl	800500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a00:	480b      	ldr	r0, [pc, #44]	@ (8006a30 <prvInitialiseTaskLists+0x74>)
 8006a02:	f7fe fb03 	bl	800500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <prvInitialiseTaskLists+0x78>)
 8006a08:	4a05      	ldr	r2, [pc, #20]	@ (8006a20 <prvInitialiseTaskLists+0x64>)
 8006a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <prvInitialiseTaskLists+0x7c>)
 8006a0e:	4a05      	ldr	r2, [pc, #20]	@ (8006a24 <prvInitialiseTaskLists+0x68>)
 8006a10:	601a      	str	r2, [r3, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000ce0 	.word	0x20000ce0
 8006a20:	20001140 	.word	0x20001140
 8006a24:	20001154 	.word	0x20001154
 8006a28:	20001170 	.word	0x20001170
 8006a2c:	20001184 	.word	0x20001184
 8006a30:	2000119c 	.word	0x2000119c
 8006a34:	20001168 	.word	0x20001168
 8006a38:	2000116c 	.word	0x2000116c

08006a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a42:	e019      	b.n	8006a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a44:	f000 fdf0 	bl	8007628 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a48:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <prvCheckTasksWaitingTermination+0x50>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fb63 	bl	8005120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <prvCheckTasksWaitingTermination+0x54>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4a0b      	ldr	r2, [pc, #44]	@ (8006a90 <prvCheckTasksWaitingTermination+0x54>)
 8006a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a64:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <prvCheckTasksWaitingTermination+0x58>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a94 <prvCheckTasksWaitingTermination+0x58>)
 8006a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a6e:	f000 fe0d 	bl	800768c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f810 	bl	8006a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <prvCheckTasksWaitingTermination+0x58>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e1      	bne.n	8006a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20001184 	.word	0x20001184
 8006a90:	200011b0 	.word	0x200011b0
 8006a94:	20001198 	.word	0x20001198

08006a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3354      	adds	r3, #84	@ 0x54
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f8c9 	bl	8007c3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d108      	bne.n	8006ac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 ff9f 	bl	80079fc <vPortFree>
				vPortFree( pxTCB );
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 ff9c 	bl	80079fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ac4:	e019      	b.n	8006afa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d103      	bne.n	8006ad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 ff93 	bl	80079fc <vPortFree>
	}
 8006ad6:	e010      	b.n	8006afa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d00b      	beq.n	8006afa <prvDeleteTCB+0x62>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60fb      	str	r3, [r7, #12]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <prvDeleteTCB+0x5e>
	}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <prvResetNextTaskUnblockTime+0x44>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <prvResetNextTaskUnblockTime+0x14>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <prvResetNextTaskUnblockTime+0x16>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <prvResetNextTaskUnblockTime+0x48>)
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b26:	e008      	b.n	8006b3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b28:	4b07      	ldr	r3, [pc, #28]	@ (8006b48 <prvResetNextTaskUnblockTime+0x44>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4a05      	ldr	r2, [pc, #20]	@ (8006b4c <prvResetNextTaskUnblockTime+0x48>)
 8006b38:	6013      	str	r3, [r2, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	20001168 	.word	0x20001168
 8006b4c:	200011d0 	.word	0x200011d0

08006b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b56:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <xTaskGetSchedulerState+0x34>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	e008      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b64:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <xTaskGetSchedulerState+0x38>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	e001      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b76:	687b      	ldr	r3, [r7, #4]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	200011bc 	.word	0x200011bc
 8006b88:	200011d8 	.word	0x200011d8

08006b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d058      	beq.n	8006c54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <xTaskPriorityDisinherit+0xd4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d00b      	beq.n	8006bc4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60fb      	str	r3, [r7, #12]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	60bb      	str	r3, [r7, #8]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be8:	1e5a      	subs	r2, r3, #1
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d02c      	beq.n	8006c54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d128      	bne.n	8006c54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fa8a 	bl	8005120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c24:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <xTaskPriorityDisinherit+0xd8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d903      	bls.n	8006c34 <xTaskPriorityDisinherit+0xa8>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	4a0c      	ldr	r2, [pc, #48]	@ (8006c64 <xTaskPriorityDisinherit+0xd8>)
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4a09      	ldr	r2, [pc, #36]	@ (8006c68 <xTaskPriorityDisinherit+0xdc>)
 8006c42:	441a      	add	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f7fe fa0b 	bl	8005066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c50:	2301      	movs	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c54:	697b      	ldr	r3, [r7, #20]
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000cdc 	.word	0x20000cdc
 8006c64:	200011b8 	.word	0x200011b8
 8006c68:	20000ce0 	.word	0x20000ce0

08006c6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006c72:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <uxTaskResetEventItemValue+0x2c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <uxTaskResetEventItemValue+0x2c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <uxTaskResetEventItemValue+0x2c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006c88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006c8a:	687b      	ldr	r3, [r7, #4]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000cdc 	.word	0x20000cdc

08006c9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ca6:	4b21      	ldr	r3, [pc, #132]	@ (8006d2c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cac:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fa34 	bl	8005120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d10a      	bne.n	8006cd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4819      	ldr	r0, [pc, #100]	@ (8006d34 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cd0:	f7fe f9c9 	bl	8005066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cd4:	e026      	b.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cde:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d209      	bcs.n	8006d02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f7fe f9d7 	bl	80050ae <vListInsert>
}
 8006d00:	e010      	b.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d02:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f7fe f9cd 	bl	80050ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d14:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d202      	bcs.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d1e:	4a08      	ldr	r2, [pc, #32]	@ (8006d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6013      	str	r3, [r2, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200011b4 	.word	0x200011b4
 8006d30:	20000cdc 	.word	0x20000cdc
 8006d34:	2000119c 	.word	0x2000119c
 8006d38:	2000116c 	.word	0x2000116c
 8006d3c:	20001168 	.word	0x20001168
 8006d40:	200011d0 	.word	0x200011d0

08006d44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d4e:	f000 fad9 	bl	8007304 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d52:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <xTimerCreateTimerTask+0x84>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d021      	beq.n	8006d9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d62:	1d3a      	adds	r2, r7, #4
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd ff3d 	bl	8004bec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	460a      	mov	r2, r1
 8006d84:	4911      	ldr	r1, [pc, #68]	@ (8006dcc <xTimerCreateTimerTask+0x88>)
 8006d86:	4812      	ldr	r0, [pc, #72]	@ (8006dd0 <xTimerCreateTimerTask+0x8c>)
 8006d88:	f7fe ffe6 	bl	8005d58 <xTaskCreateStatic>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	4a11      	ldr	r2, [pc, #68]	@ (8006dd4 <xTimerCreateTimerTask+0x90>)
 8006d90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d92:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <xTimerCreateTimerTask+0x90>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dbc:	697b      	ldr	r3, [r7, #20]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	2000120c 	.word	0x2000120c
 8006dcc:	08007e54 	.word	0x08007e54
 8006dd0:	08006ef9 	.word	0x08006ef9
 8006dd4:	20001210 	.word	0x20001210

08006dd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	@ 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <xTimerGenericCommand+0x30>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e08:	4b19      	ldr	r3, [pc, #100]	@ (8006e70 <xTimerGenericCommand+0x98>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02a      	beq.n	8006e66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	dc18      	bgt.n	8006e54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e22:	f7ff fe95 	bl	8006b50 <xTaskGetSchedulerState>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d109      	bne.n	8006e40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e2c:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <xTimerGenericCommand+0x98>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	f107 0110 	add.w	r1, r7, #16
 8006e34:	2300      	movs	r3, #0
 8006e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e38:	f7fe fb52 	bl	80054e0 <xQueueGenericSend>
 8006e3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e3e:	e012      	b.n	8006e66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <xTimerGenericCommand+0x98>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	f107 0110 	add.w	r1, r7, #16
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7fe fb48 	bl	80054e0 <xQueueGenericSend>
 8006e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e52:	e008      	b.n	8006e66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <xTimerGenericCommand+0x98>)
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	f107 0110 	add.w	r1, r7, #16
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	f7fe fc40 	bl	80056e4 <xQueueGenericSendFromISR>
 8006e64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	@ 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	2000120c 	.word	0x2000120c

08006e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <prvProcessExpiredTimer+0x80>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe f947 	bl	8005120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d123      	bne.n	8006ee2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	18d1      	adds	r1, r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	6978      	ldr	r0, [r7, #20]
 8006ea8:	f000 f8cc 	bl	8007044 <prvInsertTimerInActiveList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d017      	beq.n	8006ee2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	2100      	movs	r1, #0
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f7ff ff8b 	bl	8006dd8 <xTimerGenericCommand>
 8006ec2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60fb      	str	r3, [r7, #12]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	6978      	ldr	r0, [r7, #20]
 8006ee8:	4798      	blx	r3
}
 8006eea:	bf00      	nop
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20001204 	.word	0x20001204

08006ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f859 	bl	8006fbc <prvGetNextExpireTime>
 8006f0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f805 	bl	8006f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f16:	f000 f8d7 	bl	80070c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f1a:	bf00      	nop
 8006f1c:	e7f0      	b.n	8006f00 <prvTimerTask+0x8>
	...

08006f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f2a:	f7ff f96f 	bl	800620c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f866 	bl	8007004 <prvSampleTimeNow>
 8006f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d130      	bne.n	8006fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d806      	bhi.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f4e:	f7ff f96b 	bl	8006228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff8d 	bl	8006e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f5a:	e024      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f62:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <prvProcessTimerOrBlockTask+0x90>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <prvProcessTimerOrBlockTask+0x94>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7fe feb5 	bl	8005cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f86:	f7ff f94f 	bl	8006228 <xTaskResumeAll>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <prvProcessTimerOrBlockTask+0x98>)
 8006f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	f3bf 8f6f 	isb	sy
}
 8006fa0:	e001      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fa2:	f7ff f941 	bl	8006228 <xTaskResumeAll>
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20001208 	.word	0x20001208
 8006fb4:	2000120c 	.word	0x2000120c
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <prvGetNextExpireTime+0x44>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe2:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <prvGetNextExpireTime+0x44>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e001      	b.n	8006ff2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20001204 	.word	0x20001204

08007004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800700c:	f7ff f9aa 	bl	8006364 <xTaskGetTickCount>
 8007010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007012:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <prvSampleTimeNow+0x3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d205      	bcs.n	8007028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800701c:	f000 f910 	bl	8007240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e002      	b.n	800702e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800702e:	4a04      	ldr	r2, [pc, #16]	@ (8007040 <prvSampleTimeNow+0x3c>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20001214 	.word	0x20001214

08007044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d812      	bhi.n	8007090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e01b      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b10      	ldr	r3, [pc, #64]	@ (80070c0 <prvInsertTimerInActiveList+0x7c>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe f810 	bl	80050ae <vListInsert>
 800708e:	e012      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d206      	bcs.n	80070a6 <prvInsertTimerInActiveList+0x62>
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e007      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a6:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <prvInsertTimerInActiveList+0x80>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7fd fffc 	bl	80050ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20001208 	.word	0x20001208
 80070c4:	20001204 	.word	0x20001204

080070c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	@ 0x38
 80070cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ce:	e0a5      	b.n	800721c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da19      	bge.n	800710a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	3304      	adds	r3, #4
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61fb      	str	r3, [r7, #28]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007100:	6850      	ldr	r0, [r2, #4]
 8007102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007104:	6892      	ldr	r2, [r2, #8]
 8007106:	4611      	mov	r1, r2
 8007108:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f2c0 8085 	blt.w	800721c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd fffc 	bl	8005120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007128:	463b      	mov	r3, r7
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff6a 	bl	8007004 <prvSampleTimeNow>
 8007130:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b09      	cmp	r3, #9
 8007136:	d86c      	bhi.n	8007212 <prvProcessReceivedCommands+0x14a>
 8007138:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <prvProcessReceivedCommands+0x78>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007169 	.word	0x08007169
 8007144:	08007169 	.word	0x08007169
 8007148:	08007169 	.word	0x08007169
 800714c:	08007213 	.word	0x08007213
 8007150:	080071c7 	.word	0x080071c7
 8007154:	08007201 	.word	0x08007201
 8007158:	08007169 	.word	0x08007169
 800715c:	08007169 	.word	0x08007169
 8007160:	08007213 	.word	0x08007213
 8007164:	080071c7 	.word	0x080071c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	18d1      	adds	r1, r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007176:	f7ff ff65 	bl	8007044 <prvInsertTimerInActiveList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d04a      	beq.n	8007216 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007186:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d142      	bne.n	8007216 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	441a      	add	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	2300      	movs	r3, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a2:	f7ff fe19 	bl	8006dd8 <xTimerGenericCommand>
 80071a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d133      	bne.n	8007216 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61bb      	str	r3, [r7, #24]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <prvProcessReceivedCommands+0x124>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	617b      	str	r3, [r7, #20]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	18d1      	adds	r1, r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fa:	f7ff ff23 	bl	8007044 <prvInsertTimerInActiveList>
					break;
 80071fe:	e00d      	b.n	800721c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d107      	bne.n	800721a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800720a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800720c:	f000 fbf6 	bl	80079fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007210:	e003      	b.n	800721a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007212:	bf00      	nop
 8007214:	e002      	b.n	800721c <prvProcessReceivedCommands+0x154>
					break;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <prvProcessReceivedCommands+0x154>
					break;
 800721a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <prvProcessReceivedCommands+0x174>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	1d39      	adds	r1, r7, #4
 8007222:	2200      	movs	r2, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe faf9 	bl	800581c <xQueueReceive>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f af4f 	bne.w	80070d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	3730      	adds	r7, #48	@ 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	2000120c 	.word	0x2000120c

08007240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007246:	e046      	b.n	80072d6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007248:	4b2c      	ldr	r3, [pc, #176]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007252:	4b2a      	ldr	r3, [pc, #168]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3304      	adds	r3, #4
 8007260:	4618      	mov	r0, r3
 8007262:	f7fd ff5d 	bl	8005120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d12f      	bne.n	80072d6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	429a      	cmp	r2, r3
 8007286:	d90e      	bls.n	80072a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007294:	4b19      	ldr	r3, [pc, #100]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd ff05 	bl	80050ae <vListInsert>
 80072a4:	e017      	b.n	80072d6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	2100      	movs	r1, #0
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fd91 	bl	8006dd8 <xTimerGenericCommand>
 80072b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <prvSwitchTimerLists+0x96>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	603b      	str	r3, [r7, #0]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1b3      	bne.n	8007248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072e0:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072e6:	4b06      	ldr	r3, [pc, #24]	@ (8007300 <prvSwitchTimerLists+0xc0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a04      	ldr	r2, [pc, #16]	@ (80072fc <prvSwitchTimerLists+0xbc>)
 80072ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ee:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <prvSwitchTimerLists+0xc0>)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6013      	str	r3, [r2, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20001204 	.word	0x20001204
 8007300:	20001208 	.word	0x20001208

08007304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800730a:	f000 f98d 	bl	8007628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800730e:	4b15      	ldr	r3, [pc, #84]	@ (8007364 <prvCheckForValidListAndQueue+0x60>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d120      	bne.n	8007358 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007316:	4814      	ldr	r0, [pc, #80]	@ (8007368 <prvCheckForValidListAndQueue+0x64>)
 8007318:	f7fd fe78 	bl	800500c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800731c:	4813      	ldr	r0, [pc, #76]	@ (800736c <prvCheckForValidListAndQueue+0x68>)
 800731e:	f7fd fe75 	bl	800500c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007322:	4b13      	ldr	r3, [pc, #76]	@ (8007370 <prvCheckForValidListAndQueue+0x6c>)
 8007324:	4a10      	ldr	r2, [pc, #64]	@ (8007368 <prvCheckForValidListAndQueue+0x64>)
 8007326:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007328:	4b12      	ldr	r3, [pc, #72]	@ (8007374 <prvCheckForValidListAndQueue+0x70>)
 800732a:	4a10      	ldr	r2, [pc, #64]	@ (800736c <prvCheckForValidListAndQueue+0x68>)
 800732c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800732e:	2300      	movs	r3, #0
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <prvCheckForValidListAndQueue+0x74>)
 8007334:	4a11      	ldr	r2, [pc, #68]	@ (800737c <prvCheckForValidListAndQueue+0x78>)
 8007336:	2110      	movs	r1, #16
 8007338:	200a      	movs	r0, #10
 800733a:	f7fd ff85 	bl	8005248 <xQueueGenericCreateStatic>
 800733e:	4603      	mov	r3, r0
 8007340:	4a08      	ldr	r2, [pc, #32]	@ (8007364 <prvCheckForValidListAndQueue+0x60>)
 8007342:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007344:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <prvCheckForValidListAndQueue+0x60>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <prvCheckForValidListAndQueue+0x60>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	490b      	ldr	r1, [pc, #44]	@ (8007380 <prvCheckForValidListAndQueue+0x7c>)
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fc78 	bl	8005c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007358:	f000 f998 	bl	800768c <vPortExitCritical>
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	2000120c 	.word	0x2000120c
 8007368:	200011dc 	.word	0x200011dc
 800736c:	200011f0 	.word	0x200011f0
 8007370:	20001204 	.word	0x20001204
 8007374:	20001208 	.word	0x20001208
 8007378:	200012b8 	.word	0x200012b8
 800737c:	20001218 	.word	0x20001218
 8007380:	08007e5c 	.word	0x08007e5c

08007384 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	@ 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007392:	f06f 0301 	mvn.w	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073a4:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <xTimerPendFunctionCallFromISR+0x3c>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	f107 0114 	add.w	r1, r7, #20
 80073ac:	2300      	movs	r3, #0
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	f7fe f998 	bl	80056e4 <xQueueGenericSendFromISR>
 80073b4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	@ 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2000120c 	.word	0x2000120c

080073c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3b04      	subs	r3, #4
 80073d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b04      	subs	r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007428 <pxPortInitialiseStack+0x64>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b14      	subs	r3, #20
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f06f 0202 	mvn.w	r2, #2
 8007412:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3b20      	subs	r3, #32
 8007418:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	0800742d 	.word	0x0800742d

0800742c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007436:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <prvTaskExitError+0x58>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d00b      	beq.n	8007458 <prvTaskExitError+0x2c>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	60fb      	str	r3, [r7, #12]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <prvTaskExitError+0x28>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	60bb      	str	r3, [r7, #8]
}
 800746a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800746c:	bf00      	nop
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0fc      	beq.n	800746e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	2000000c 	.word	0x2000000c
	...

08007490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007490:	4b07      	ldr	r3, [pc, #28]	@ (80074b0 <pxCurrentTCBConst2>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f380 8809 	msr	PSP, r0
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	4770      	bx	lr
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst2>:
 80074b0:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074b8:	4808      	ldr	r0, [pc, #32]	@ (80074dc <prvPortStartFirstTask+0x24>)
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f380 8808 	msr	MSP, r0
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8814 	msr	CONTROL, r0
 80074ca:	b662      	cpsie	i
 80074cc:	b661      	cpsie	f
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	df00      	svc	0
 80074d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074da:	bf00      	nop
 80074dc:	e000ed08 	.word	0xe000ed08

080074e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074e6:	4b47      	ldr	r3, [pc, #284]	@ (8007604 <xPortStartScheduler+0x124>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a47      	ldr	r2, [pc, #284]	@ (8007608 <xPortStartScheduler+0x128>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10b      	bne.n	8007508 <xPortStartScheduler+0x28>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007508:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <xPortStartScheduler+0x124>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3f      	ldr	r2, [pc, #252]	@ (800760c <xPortStartScheduler+0x12c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d10b      	bne.n	800752a <xPortStartScheduler+0x4a>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	613b      	str	r3, [r7, #16]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800752a:	4b39      	ldr	r3, [pc, #228]	@ (8007610 <xPortStartScheduler+0x130>)
 800752c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	22ff      	movs	r2, #255	@ 0xff
 800753a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800754c:	b2da      	uxtb	r2, r3
 800754e:	4b31      	ldr	r3, [pc, #196]	@ (8007614 <xPortStartScheduler+0x134>)
 8007550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007552:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <xPortStartScheduler+0x138>)
 8007554:	2207      	movs	r2, #7
 8007556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007558:	e009      	b.n	800756e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800755a:	4b2f      	ldr	r3, [pc, #188]	@ (8007618 <xPortStartScheduler+0x138>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3b01      	subs	r3, #1
 8007560:	4a2d      	ldr	r2, [pc, #180]	@ (8007618 <xPortStartScheduler+0x138>)
 8007562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	b2db      	uxtb	r3, r3
 800756c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007576:	2b80      	cmp	r3, #128	@ 0x80
 8007578:	d0ef      	beq.n	800755a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800757a:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <xPortStartScheduler+0x138>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1c3 0307 	rsb	r3, r3, #7
 8007582:	2b04      	cmp	r3, #4
 8007584:	d00b      	beq.n	800759e <xPortStartScheduler+0xbe>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60bb      	str	r3, [r7, #8]
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	e7fd      	b.n	800759a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800759e:	4b1e      	ldr	r3, [pc, #120]	@ (8007618 <xPortStartScheduler+0x138>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007618 <xPortStartScheduler+0x138>)
 80075a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007618 <xPortStartScheduler+0x138>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075b0:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <xPortStartScheduler+0x138>)
 80075b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075bc:	4b17      	ldr	r3, [pc, #92]	@ (800761c <xPortStartScheduler+0x13c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a16      	ldr	r2, [pc, #88]	@ (800761c <xPortStartScheduler+0x13c>)
 80075c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075c8:	4b14      	ldr	r3, [pc, #80]	@ (800761c <xPortStartScheduler+0x13c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a13      	ldr	r2, [pc, #76]	@ (800761c <xPortStartScheduler+0x13c>)
 80075ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075d4:	f000 f8da 	bl	800778c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <xPortStartScheduler+0x140>)
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075de:	f000 f8f9 	bl	80077d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075e2:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <xPortStartScheduler+0x144>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007624 <xPortStartScheduler+0x144>)
 80075e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075ee:	f7ff ff63 	bl	80074b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075f2:	f7fe ff87 	bl	8006504 <vTaskSwitchContext>
	prvTaskExitError();
 80075f6:	f7ff ff19 	bl	800742c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	e000ed00 	.word	0xe000ed00
 8007608:	410fc271 	.word	0x410fc271
 800760c:	410fc270 	.word	0x410fc270
 8007610:	e000e400 	.word	0xe000e400
 8007614:	20001308 	.word	0x20001308
 8007618:	2000130c 	.word	0x2000130c
 800761c:	e000ed20 	.word	0xe000ed20
 8007620:	2000000c 	.word	0x2000000c
 8007624:	e000ef34 	.word	0xe000ef34

08007628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
}
 8007640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007642:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <vPortEnterCritical+0x5c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	4a0e      	ldr	r2, [pc, #56]	@ (8007684 <vPortEnterCritical+0x5c>)
 800764a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800764c:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <vPortEnterCritical+0x5c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d110      	bne.n	8007676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007654:	4b0c      	ldr	r3, [pc, #48]	@ (8007688 <vPortEnterCritical+0x60>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <vPortEnterCritical+0x4e>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	603b      	str	r3, [r7, #0]
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	e7fd      	b.n	8007672 <vPortEnterCritical+0x4a>
	}
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	2000000c 	.word	0x2000000c
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007692:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <vPortExitCritical+0x50>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <vPortExitCritical+0x26>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	607b      	str	r3, [r7, #4]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4a08      	ldr	r2, [pc, #32]	@ (80076dc <vPortExitCritical+0x50>)
 80076ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076bc:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <vPortExitCritical+0x50>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <vPortExitCritical+0x44>
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f383 8811 	msr	BASEPRI, r3
}
 80076ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	2000000c 	.word	0x2000000c

080076e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076e0:	f3ef 8009 	mrs	r0, PSP
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	4b15      	ldr	r3, [pc, #84]	@ (8007740 <pxCurrentTCBConst>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f01e 0f10 	tst.w	lr, #16
 80076f0:	bf08      	it	eq
 80076f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	6010      	str	r0, [r2, #0]
 80076fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007704:	f380 8811 	msr	BASEPRI, r0
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f7fe fef8 	bl	8006504 <vTaskSwitchContext>
 8007714:	f04f 0000 	mov.w	r0, #0
 8007718:	f380 8811 	msr	BASEPRI, r0
 800771c:	bc09      	pop	{r0, r3}
 800771e:	6819      	ldr	r1, [r3, #0]
 8007720:	6808      	ldr	r0, [r1, #0]
 8007722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007726:	f01e 0f10 	tst.w	lr, #16
 800772a:	bf08      	it	eq
 800772c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007730:	f380 8809 	msr	PSP, r0
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst>:
 8007740:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007762:	f7fe fe0f 	bl	8006384 <xTaskIncrementTick>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800776c:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <SysTick_Handler+0x40>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f383 8811 	msr	BASEPRI, r3
}
 800777e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007790:	4b0b      	ldr	r3, [pc, #44]	@ (80077c0 <vPortSetupTimerInterrupt+0x34>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007796:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <vPortSetupTimerInterrupt+0x38>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800779c:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <vPortSetupTimerInterrupt+0x3c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	@ (80077cc <vPortSetupTimerInterrupt+0x40>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	099b      	lsrs	r3, r3, #6
 80077a8:	4a09      	ldr	r2, [pc, #36]	@ (80077d0 <vPortSetupTimerInterrupt+0x44>)
 80077aa:	3b01      	subs	r3, #1
 80077ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ae:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <vPortSetupTimerInterrupt+0x34>)
 80077b0:	2207      	movs	r2, #7
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	e000e010 	.word	0xe000e010
 80077c4:	e000e018 	.word	0xe000e018
 80077c8:	20000000 	.word	0x20000000
 80077cc:	10624dd3 	.word	0x10624dd3
 80077d0:	e000e014 	.word	0xe000e014

080077d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077e4 <vPortEnableVFP+0x10>
 80077d8:	6801      	ldr	r1, [r0, #0]
 80077da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077de:	6001      	str	r1, [r0, #0]
 80077e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077e2:	bf00      	nop
 80077e4:	e000ed88 	.word	0xe000ed88

080077e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ee:	f3ef 8305 	mrs	r3, IPSR
 80077f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d915      	bls.n	8007826 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077fa:	4a18      	ldr	r2, [pc, #96]	@ (800785c <vPortValidateInterruptPriority+0x74>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007804:	4b16      	ldr	r3, [pc, #88]	@ (8007860 <vPortValidateInterruptPriority+0x78>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	7afa      	ldrb	r2, [r7, #11]
 800780a:	429a      	cmp	r2, r3
 800780c:	d20b      	bcs.n	8007826 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007826:	4b0f      	ldr	r3, [pc, #60]	@ (8007864 <vPortValidateInterruptPriority+0x7c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800782e:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <vPortValidateInterruptPriority+0x80>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d90b      	bls.n	800784e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	603b      	str	r3, [r7, #0]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortValidateInterruptPriority+0x62>
	}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	e000e3f0 	.word	0xe000e3f0
 8007860:	20001308 	.word	0x20001308
 8007864:	e000ed0c 	.word	0xe000ed0c
 8007868:	2000130c 	.word	0x2000130c

0800786c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	@ 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007878:	f7fe fcc8 	bl	800620c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800787c:	4b5a      	ldr	r3, [pc, #360]	@ (80079e8 <pvPortMalloc+0x17c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007884:	f000 f916 	bl	8007ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007888:	4b58      	ldr	r3, [pc, #352]	@ (80079ec <pvPortMalloc+0x180>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4013      	ands	r3, r2
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 8090 	bne.w	80079b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01e      	beq.n	80078da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800789c:	2208      	movs	r2, #8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d015      	beq.n	80078da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f023 0307 	bic.w	r3, r3, #7
 80078b4:	3308      	adds	r3, #8
 80078b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <pvPortMalloc+0x6e>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	617b      	str	r3, [r7, #20]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d06a      	beq.n	80079b6 <pvPortMalloc+0x14a>
 80078e0:	4b43      	ldr	r3, [pc, #268]	@ (80079f0 <pvPortMalloc+0x184>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d865      	bhi.n	80079b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078ea:	4b42      	ldr	r3, [pc, #264]	@ (80079f4 <pvPortMalloc+0x188>)
 80078ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ee:	4b41      	ldr	r3, [pc, #260]	@ (80079f4 <pvPortMalloc+0x188>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078f4:	e004      	b.n	8007900 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d903      	bls.n	8007912 <pvPortMalloc+0xa6>
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f1      	bne.n	80078f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007912:	4b35      	ldr	r3, [pc, #212]	@ (80079e8 <pvPortMalloc+0x17c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007918:	429a      	cmp	r2, r3
 800791a:	d04c      	beq.n	80079b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2208      	movs	r2, #8
 8007922:	4413      	add	r3, r2
 8007924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	2308      	movs	r3, #8
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	429a      	cmp	r2, r3
 800793c:	d920      	bls.n	8007980 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800793e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <pvPortMalloc+0xfc>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800797a:	69b8      	ldr	r0, [r7, #24]
 800797c:	f000 f8fc 	bl	8007b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007980:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <pvPortMalloc+0x184>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	4a19      	ldr	r2, [pc, #100]	@ (80079f0 <pvPortMalloc+0x184>)
 800798c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800798e:	4b18      	ldr	r3, [pc, #96]	@ (80079f0 <pvPortMalloc+0x184>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <pvPortMalloc+0x18c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d203      	bcs.n	80079a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800799a:	4b15      	ldr	r3, [pc, #84]	@ (80079f0 <pvPortMalloc+0x184>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a16      	ldr	r2, [pc, #88]	@ (80079f8 <pvPortMalloc+0x18c>)
 80079a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	4b11      	ldr	r3, [pc, #68]	@ (80079ec <pvPortMalloc+0x180>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079b6:	f7fe fc37 	bl	8006228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <pvPortMalloc+0x170>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	60fb      	str	r3, [r7, #12]
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <pvPortMalloc+0x16c>
	return pvReturn;
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3728      	adds	r7, #40	@ 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20002318 	.word	0x20002318
 80079ec:	20002324 	.word	0x20002324
 80079f0:	2000231c 	.word	0x2000231c
 80079f4:	20002310 	.word	0x20002310
 80079f8:	20002320 	.word	0x20002320

080079fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d04a      	beq.n	8007aa4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a0e:	2308      	movs	r3, #8
 8007a10:	425b      	negs	r3, r3
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4413      	add	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	4b22      	ldr	r3, [pc, #136]	@ (8007aac <vPortFree+0xb0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <vPortFree+0x46>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60fb      	str	r3, [r7, #12]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <vPortFree+0x66>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	60bb      	str	r3, [r7, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	e7fd      	b.n	8007a5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b11      	ldr	r3, [pc, #68]	@ (8007aac <vPortFree+0xb0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <vPortFree+0xb0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a88:	f7fe fbc0 	bl	800620c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <vPortFree+0xb4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	4a06      	ldr	r2, [pc, #24]	@ (8007ab0 <vPortFree+0xb4>)
 8007a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f000 f86c 	bl	8007b78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007aa0:	f7fe fbc2 	bl	8006228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20002324 	.word	0x20002324
 8007ab0:	2000231c 	.word	0x2000231c

08007ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ac0:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <prvHeapInit+0xac>)
 8007ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00c      	beq.n	8007ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3307      	adds	r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0307 	bic.w	r3, r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b60 <prvHeapInit+0xac>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aec:	4a1d      	ldr	r2, [pc, #116]	@ (8007b64 <prvHeapInit+0xb0>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b64 <prvHeapInit+0xb0>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b00:	2208      	movs	r2, #8
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a15      	ldr	r2, [pc, #84]	@ (8007b68 <prvHeapInit+0xb4>)
 8007b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b16:	4b14      	ldr	r3, [pc, #80]	@ (8007b68 <prvHeapInit+0xb4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b1e:	4b12      	ldr	r3, [pc, #72]	@ (8007b68 <prvHeapInit+0xb4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b34:	4b0c      	ldr	r3, [pc, #48]	@ (8007b68 <prvHeapInit+0xb4>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	@ (8007b6c <prvHeapInit+0xb8>)
 8007b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4a09      	ldr	r2, [pc, #36]	@ (8007b70 <prvHeapInit+0xbc>)
 8007b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b4c:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <prvHeapInit+0xc0>)
 8007b4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	20001310 	.word	0x20001310
 8007b64:	20002310 	.word	0x20002310
 8007b68:	20002318 	.word	0x20002318
 8007b6c:	20002320 	.word	0x20002320
 8007b70:	2000231c 	.word	0x2000231c
 8007b74:	20002324 	.word	0x20002324

08007b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b80:	4b28      	ldr	r3, [pc, #160]	@ (8007c24 <prvInsertBlockIntoFreeList+0xac>)
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e002      	b.n	8007b8c <prvInsertBlockIntoFreeList+0x14>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d8f7      	bhi.n	8007b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d108      	bne.n	8007bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d118      	bne.n	8007c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	@ (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d00d      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e008      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e003      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d002      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20002310 	.word	0x20002310
 8007c28:	20002318 	.word	0x20002318

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <_reclaim_reent>:
 8007c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf4 <_reclaim_reent+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4283      	cmp	r3, r0
 8007c42:	b570      	push	{r4, r5, r6, lr}
 8007c44:	4604      	mov	r4, r0
 8007c46:	d053      	beq.n	8007cf0 <_reclaim_reent+0xb4>
 8007c48:	69c3      	ldr	r3, [r0, #28]
 8007c4a:	b31b      	cbz	r3, 8007c94 <_reclaim_reent+0x58>
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	b163      	cbz	r3, 8007c6a <_reclaim_reent+0x2e>
 8007c50:	2500      	movs	r5, #0
 8007c52:	69e3      	ldr	r3, [r4, #28]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	5959      	ldr	r1, [r3, r5]
 8007c58:	b9b1      	cbnz	r1, 8007c88 <_reclaim_reent+0x4c>
 8007c5a:	3504      	adds	r5, #4
 8007c5c:	2d80      	cmp	r5, #128	@ 0x80
 8007c5e:	d1f8      	bne.n	8007c52 <_reclaim_reent+0x16>
 8007c60:	69e3      	ldr	r3, [r4, #28]
 8007c62:	4620      	mov	r0, r4
 8007c64:	68d9      	ldr	r1, [r3, #12]
 8007c66:	f000 f87b 	bl	8007d60 <_free_r>
 8007c6a:	69e3      	ldr	r3, [r4, #28]
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	b111      	cbz	r1, 8007c76 <_reclaim_reent+0x3a>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f875 	bl	8007d60 <_free_r>
 8007c76:	69e3      	ldr	r3, [r4, #28]
 8007c78:	689d      	ldr	r5, [r3, #8]
 8007c7a:	b15d      	cbz	r5, 8007c94 <_reclaim_reent+0x58>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4620      	mov	r0, r4
 8007c80:	682d      	ldr	r5, [r5, #0]
 8007c82:	f000 f86d 	bl	8007d60 <_free_r>
 8007c86:	e7f8      	b.n	8007c7a <_reclaim_reent+0x3e>
 8007c88:	680e      	ldr	r6, [r1, #0]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f868 	bl	8007d60 <_free_r>
 8007c90:	4631      	mov	r1, r6
 8007c92:	e7e1      	b.n	8007c58 <_reclaim_reent+0x1c>
 8007c94:	6961      	ldr	r1, [r4, #20]
 8007c96:	b111      	cbz	r1, 8007c9e <_reclaim_reent+0x62>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f861 	bl	8007d60 <_free_r>
 8007c9e:	69e1      	ldr	r1, [r4, #28]
 8007ca0:	b111      	cbz	r1, 8007ca8 <_reclaim_reent+0x6c>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f85c 	bl	8007d60 <_free_r>
 8007ca8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007caa:	b111      	cbz	r1, 8007cb2 <_reclaim_reent+0x76>
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 f857 	bl	8007d60 <_free_r>
 8007cb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cb4:	b111      	cbz	r1, 8007cbc <_reclaim_reent+0x80>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f852 	bl	8007d60 <_free_r>
 8007cbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007cbe:	b111      	cbz	r1, 8007cc6 <_reclaim_reent+0x8a>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 f84d 	bl	8007d60 <_free_r>
 8007cc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cc8:	b111      	cbz	r1, 8007cd0 <_reclaim_reent+0x94>
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f848 	bl	8007d60 <_free_r>
 8007cd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cd2:	b111      	cbz	r1, 8007cda <_reclaim_reent+0x9e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f843 	bl	8007d60 <_free_r>
 8007cda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cdc:	b111      	cbz	r1, 8007ce4 <_reclaim_reent+0xa8>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 f83e 	bl	8007d60 <_free_r>
 8007ce4:	6a23      	ldr	r3, [r4, #32]
 8007ce6:	b11b      	cbz	r3, 8007cf0 <_reclaim_reent+0xb4>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cee:	4718      	bx	r3
 8007cf0:	bd70      	pop	{r4, r5, r6, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000010 	.word	0x20000010

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	@ (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f000 f87e 	bl	8007e0c <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08007f18 	.word	0x08007f18
 8007d34:	08007f18 	.word	0x08007f18
 8007d38:	08007f18 	.word	0x08007f18
 8007d3c:	08007f1c 	.word	0x08007f1c

08007d40 <__retarget_lock_acquire_recursive>:
 8007d40:	4770      	bx	lr

08007d42 <__retarget_lock_release_recursive>:
 8007d42:	4770      	bx	lr

08007d44 <memcpy>:
 8007d44:	440a      	add	r2, r1
 8007d46:	4291      	cmp	r1, r2
 8007d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d4c:	d100      	bne.n	8007d50 <memcpy+0xc>
 8007d4e:	4770      	bx	lr
 8007d50:	b510      	push	{r4, lr}
 8007d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	d1f9      	bne.n	8007d52 <memcpy+0xe>
 8007d5e:	bd10      	pop	{r4, pc}

08007d60 <_free_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4605      	mov	r5, r0
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d041      	beq.n	8007dec <_free_r+0x8c>
 8007d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d6c:	1f0c      	subs	r4, r1, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bfb8      	it	lt
 8007d72:	18e4      	addlt	r4, r4, r3
 8007d74:	f000 f83e 	bl	8007df4 <__malloc_lock>
 8007d78:	4a1d      	ldr	r2, [pc, #116]	@ (8007df0 <_free_r+0x90>)
 8007d7a:	6813      	ldr	r3, [r2, #0]
 8007d7c:	b933      	cbnz	r3, 8007d8c <_free_r+0x2c>
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	6014      	str	r4, [r2, #0]
 8007d82:	4628      	mov	r0, r5
 8007d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d88:	f000 b83a 	b.w	8007e00 <__malloc_unlock>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d908      	bls.n	8007da2 <_free_r+0x42>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	1821      	adds	r1, r4, r0
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf01      	itttt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	1809      	addeq	r1, r1, r0
 8007d9e:	6021      	streq	r1, [r4, #0]
 8007da0:	e7ed      	b.n	8007d7e <_free_r+0x1e>
 8007da2:	461a      	mov	r2, r3
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b10b      	cbz	r3, 8007dac <_free_r+0x4c>
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d9fa      	bls.n	8007da2 <_free_r+0x42>
 8007dac:	6811      	ldr	r1, [r2, #0]
 8007dae:	1850      	adds	r0, r2, r1
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d10b      	bne.n	8007dcc <_free_r+0x6c>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	4401      	add	r1, r0
 8007db8:	1850      	adds	r0, r2, r1
 8007dba:	4283      	cmp	r3, r0
 8007dbc:	6011      	str	r1, [r2, #0]
 8007dbe:	d1e0      	bne.n	8007d82 <_free_r+0x22>
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	6053      	str	r3, [r2, #4]
 8007dc6:	4408      	add	r0, r1
 8007dc8:	6010      	str	r0, [r2, #0]
 8007dca:	e7da      	b.n	8007d82 <_free_r+0x22>
 8007dcc:	d902      	bls.n	8007dd4 <_free_r+0x74>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	e7d6      	b.n	8007d82 <_free_r+0x22>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	1821      	adds	r1, r4, r0
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf04      	itt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	6063      	str	r3, [r4, #4]
 8007de2:	bf04      	itt	eq
 8007de4:	1809      	addeq	r1, r1, r0
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	6054      	str	r4, [r2, #4]
 8007dea:	e7ca      	b.n	8007d82 <_free_r+0x22>
 8007dec:	bd38      	pop	{r3, r4, r5, pc}
 8007dee:	bf00      	nop
 8007df0:	20002464 	.word	0x20002464

08007df4 <__malloc_lock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	@ (8007dfc <__malloc_lock+0x8>)
 8007df6:	f7ff bfa3 	b.w	8007d40 <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20002460 	.word	0x20002460

08007e00 <__malloc_unlock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	@ (8007e08 <__malloc_unlock+0x8>)
 8007e02:	f7ff bf9e 	b.w	8007d42 <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	20002460 	.word	0x20002460

08007e0c <_init>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	bf00      	nop
 8007e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e12:	bc08      	pop	{r3}
 8007e14:	469e      	mov	lr, r3
 8007e16:	4770      	bx	lr

08007e18 <_fini>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	bf00      	nop
 8007e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	469e      	mov	lr, r3
 8007e22:	4770      	bx	lr
