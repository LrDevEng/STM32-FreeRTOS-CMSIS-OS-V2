
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007ab4  08007ab4  00008ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bac  08007bac  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007bac  08007bac  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007bac  08007bac  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bac  08007bac  00008bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bb0  08007bb0  00008bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007bb4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00002408  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002468  20002468  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022b51  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043dd  00000000  00000000  0002bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a4  00000000  00000000  00031b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b0  00000000  00000000  000330fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222c6  00000000  00000000  000371ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c797d  00000000  00000000  00059472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120def  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078e8  00000000  00000000  00120e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0012871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a9c 	.word	0x08007a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007a9c 	.word	0x08007a9c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd5a 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f848 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9be 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f92a 	bl	800048c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f996 	bl	8000568 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8e6 	bl	800040c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f962 	bl	8000508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9e4 	bl	8004610 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <main+0x70>)
 800024a:	2101      	movs	r1, #1
 800024c:	2008      	movs	r0, #8
 800024e:	f004 fb87 	bl	8004960 <osMessageQueueNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <main+0x74>)
 8000256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 8000258:	4a0f      	ldr	r2, [pc, #60]	@ (8000298 <main+0x78>)
 800025a:	2100      	movs	r1, #0
 800025c:	480f      	ldr	r0, [pc, #60]	@ (800029c <main+0x7c>)
 800025e:	f004 fa3f 	bl	80046e0 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <main+0x80>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of Receiver1 */
  Receiver1Handle = osThreadNew(StartReceiver1, NULL, &Receiver1_attributes);
 8000268:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <main+0x84>)
 800026a:	2100      	movs	r1, #0
 800026c:	480e      	ldr	r0, [pc, #56]	@ (80002a8 <main+0x88>)
 800026e:	f004 fa37 	bl	80046e0 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <main+0x8c>)
 8000276:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, NULL, &Sender2_attributes);
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <main+0x90>)
 800027a:	2100      	movs	r1, #0
 800027c:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <main+0x94>)
 800027e:	f004 fa2f 	bl	80046e0 <osThreadNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0c      	ldr	r2, [pc, #48]	@ (80002b8 <main+0x98>)
 8000286:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000288:	f004 f9f6 	bl	8004678 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0x6c>
 8000290:	08007b5c 	.word	0x08007b5c
 8000294:	200004f0 	.word	0x200004f0
 8000298:	08007af0 	.word	0x08007af0
 800029c:	080006dd 	.word	0x080006dd
 80002a0:	200004e4 	.word	0x200004e4
 80002a4:	08007b14 	.word	0x08007b14
 80002a8:	0800072d 	.word	0x0800072d
 80002ac:	200004e8 	.word	0x200004e8
 80002b0:	08007b38 	.word	0x08007b38
 80002b4:	0800079d 	.word	0x0800079d
 80002b8:	200004ec 	.word	0x200004ec

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	@ 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f007 faf6 	bl	80078bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	223c      	movs	r2, #60	@ 0x3c
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f007 fae8 	bl	80078bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002ec:	2303      	movs	r3, #3
 80002ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800030c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000310:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fa22 	bl	8001760 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000322:	f000 fa79 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fa1a 	bl	800277c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800034e:	f000 fa63 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <SystemClock_Config+0xcc>)
 8000354:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800035e:	2300      	movs	r3, #0
 8000360:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000362:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000366:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fc82 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000376:	f000 fa4f 	bl	8000818 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800037a:	f002 fb6d 	bl	8002a58 <HAL_RCC_EnableCSS>
}
 800037e:	bf00      	nop
 8000380:	3778      	adds	r7, #120	@ 0x78
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	00020062 	.word	0x00020062

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <MX_I2C1_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	@ (8000408 <MX_I2C1_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	480e      	ldr	r0, [pc, #56]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c8:	f000 ffd1 	bl	800136e <HAL_I2C_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 fa21 	bl	8000818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4809      	ldr	r0, [pc, #36]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003da:	f001 f863 	bl	80014a4 <HAL_I2CEx_ConfigAnalogFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 fa18 	bl	8000818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003ec:	f001 f8a5 	bl	800153a <HAL_I2CEx_ConfigDigitalFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 fa0f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000007c 	.word	0x2000007c
 8000404:	40005400 	.word	0x40005400
 8000408:	00201d2b 	.word	0x00201d2b

0800040c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	@ (8000484 <MX_I2C2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 8000416:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	@ (8000488 <MX_I2C2_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <MX_I2C2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <MX_I2C2_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_I2C2_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000448:	f000 ff91 	bl	800136e <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f9e1 	bl	8000818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	@ (8000480 <MX_I2C2_Init+0x74>)
 800045a:	f001 f823 	bl	80014a4 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f9d8 	bl	8000818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_I2C2_Init+0x74>)
 800046c:	f001 f865 	bl	800153a <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f9cf 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000d0 	.word	0x200000d0
 8000484:	40005800 	.word	0x40005800
 8000488:	00201d2b 	.word	0x00201d2b

0800048c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_SPI1_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	@ (8000504 <MX_SPI1_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_SPI1_Init+0x74>)
 8000498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800049c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004da:	2207      	movs	r2, #7
 80004dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ec:	f002 fd70 	bl	8002fd0 <HAL_SPI_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f98f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000124 	.word	0x20000124
 8000504:	40013000 	.word	0x40013000

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800050e:	4a15      	ldr	r2, [pc, #84]	@ (8000564 <MX_USART2_UART_Init+0x5c>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800054c:	f003 f89a 	bl	8003684 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000556:	f000 f95f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000188 	.word	0x20000188
 8000564:	40004400 	.word	0x40004400

08000568 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <MX_USB_PCD_Init+0x40>)
 8000570:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000574:	2208      	movs	r2, #8
 8000576:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800057a:	2202      	movs	r2, #2
 800057c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000580:	2202      	movs	r2, #2
 8000582:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000586:	2200      	movs	r2, #0
 8000588:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800058c:	2200      	movs	r2, #0
 800058e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000592:	f001 f81e 	bl	80015d2 <HAL_PCD_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800059c:	f000 f93c 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000210 	.word	0x20000210
 80005a8:	40005c00 	.word	0x40005c00

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c2:	4b3c      	ldr	r3, [pc, #240]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a3b      	ldr	r2, [pc, #236]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b39      	ldr	r3, [pc, #228]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b36      	ldr	r3, [pc, #216]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a35      	ldr	r2, [pc, #212]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b2a      	ldr	r3, [pc, #168]	@ (80006b4 <MX_GPIO_Init+0x108>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a23      	ldr	r2, [pc, #140]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000640:	481d      	ldr	r0, [pc, #116]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 8000642:	f000 fe59 	bl	80012f8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000646:	2336      	movs	r3, #54	@ 0x36
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 800065c:	f000 fcd2 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000660:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000664:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	480f      	ldr	r0, [pc, #60]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 800067a:	f000 fcc3 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f000 fcb5 	bl	8001004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 fc0a 	bl	8000eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f000 fc23 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	@ 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48001000 	.word	0x48001000

080006bc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd81 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 80006ce:	200a      	movs	r0, #10
 80006d0:	f7ff fd7e 	bl	80001d0 <ITM_SendChar>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t msg = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
      osDelay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ec:	f004 f90a 	bl	8004904 <osDelay>
      Task_action('s');
 80006f0:	2073      	movs	r0, #115	@ 0x73
 80006f2:	f7ff ffe3 	bl	80006bc <Task_action>
      osMessageQueuePut(Queue1Handle, &msg, 0, 200);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <StartSender1+0x44>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f107 010f 	add.w	r1, r7, #15
 80006fe:	23c8      	movs	r3, #200	@ 0xc8
 8000700:	2200      	movs	r2, #0
 8000702:	f004 f9b3 	bl	8004a6c <osMessageQueuePut>
      osThreadResume(Sender2Handle);
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <StartSender1+0x48>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f8c6 	bl	800489c <osThreadResume>
      osThreadSuspend(Sender1Handle);
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <StartSender1+0x4c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f004 f88d 	bl	8004834 <osThreadSuspend>
      osDelay(1000);
 800071a:	bf00      	nop
 800071c:	e7e4      	b.n	80006e8 <StartSender1+0xc>
 800071e:	bf00      	nop
 8000720:	200004f0 	.word	0x200004f0
 8000724:	200004ec 	.word	0x200004ec
 8000728:	200004e4 	.word	0x200004e4

0800072c <StartReceiver1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver1 */
void StartReceiver1(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiver1 */
  uint8_t msg = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
      Task_action('r');
 8000738:	2072      	movs	r0, #114	@ 0x72
 800073a:	f7ff ffbf 	bl	80006bc <Task_action>
      r1_State = osMessageQueueGet(Queue1Handle, &msg, NULL, osWaitForever);
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <StartReceiver1+0x64>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f107 010f 	add.w	r1, r7, #15
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2200      	movs	r2, #0
 800074c:	f004 fa02 	bl	8004b54 <osMessageQueueGet>
 8000750:	4603      	mov	r3, r0
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <StartReceiver1+0x68>)
 8000754:	6013      	str	r3, [r2, #0]

      if(r1_State == osOK)
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <StartReceiver1+0x68>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1ec      	bne.n	8000738 <StartReceiver1+0xc>
      {
	  Task_action(msg+48);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3330      	adds	r3, #48	@ 0x30
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffa9 	bl	80006bc <Task_action>
	  if(msg == 1)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d105      	bne.n	800077c <StartReceiver1+0x50>
	  {
	      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <StartReceiver1+0x6c>)
 8000778:	f000 fdbe 	bl	80012f8 <HAL_GPIO_WritePin>
	  }
	  if(msg == 2)
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d1da      	bne.n	8000738 <StartReceiver1+0xc>
	  {
	      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <StartReceiver1+0x6c>)
 800078a:	f000 fdb5 	bl	80012f8 <HAL_GPIO_WritePin>
      Task_action('r');
 800078e:	e7d3      	b.n	8000738 <StartReceiver1+0xc>
 8000790:	200004f0 	.word	0x200004f0
 8000794:	200004f4 	.word	0x200004f4
 8000798:	48001000 	.word	0x48001000

0800079c <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
  uint8_t msg = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	73fb      	strb	r3, [r7, #15]
  osThreadSuspend(Sender2Handle);
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <StartSender2+0x4c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 f841 	bl	8004834 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
      osDelay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b6:	f004 f8a5 	bl	8004904 <osDelay>
      Task_action('c');
 80007ba:	2063      	movs	r0, #99	@ 0x63
 80007bc:	f7ff ff7e 	bl	80006bc <Task_action>
      osMessageQueuePut(Queue1Handle, &msg, 0, 200);
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <StartSender2+0x50>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	f107 010f 	add.w	r1, r7, #15
 80007c8:	23c8      	movs	r3, #200	@ 0xc8
 80007ca:	2200      	movs	r2, #0
 80007cc:	f004 f94e 	bl	8004a6c <osMessageQueuePut>
      osThreadResume(Sender1Handle);
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <StartSender2+0x54>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 f861 	bl	800489c <osThreadResume>
      osThreadSuspend(Sender2Handle);
 80007da:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <StartSender2+0x4c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 f828 	bl	8004834 <osThreadSuspend>
      osDelay(1000);
 80007e4:	bf00      	nop
 80007e6:	e7e4      	b.n	80007b2 <StartSender2+0x16>
 80007e8:	200004ec 	.word	0x200004ec
 80007ec:	200004f0 	.word	0x200004f0
 80007f0:	200004e4 	.word	0x200004e4

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000806:	f000 fa7f 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40001000 	.word	0x40001000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_MspInit+0x4c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <HAL_MspInit+0x4c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_MspInit+0x4c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_MspInit+0x4c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_MspInit+0x4c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fb29 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a2f      	ldr	r2, [pc, #188]	@ (8000950 <HAL_I2C_MspInit+0xdc>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a2e      	ldr	r2, [pc, #184]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008ae:	23c0      	movs	r3, #192	@ 0xc0
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	2304      	movs	r3, #4
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4823      	ldr	r0, [pc, #140]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008ca:	f000 fb9b 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008e6:	e02e      	b.n	8000946 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <HAL_I2C_MspInit+0xe8>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d129      	bne.n	8000946 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a17      	ldr	r2, [pc, #92]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000910:	2312      	movs	r3, #18
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800091c:	2304      	movs	r3, #4
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f000 fb6b 	bl	8001004 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 8000934:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	@ 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40005400 	.word	0x40005400
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	40005800 	.word	0x40005800

08000960 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a17      	ldr	r2, [pc, #92]	@ (80009dc <HAL_SPI_MspInit+0x7c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d128      	bne.n	80009d4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a16      	ldr	r2, [pc, #88]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 8000988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_SPI_MspInit+0x80>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009b2:	23e0      	movs	r3, #224	@ 0xe0
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c2:	2305      	movs	r3, #5
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f000 fb18 	bl	8001004 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40013000 	.word	0x40013000
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d130      	bne.n	8000a68 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_UART_MspInit+0x90>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a46:	2307      	movs	r3, #7
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a54:	f000 fad6 	bl	8001004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	2026      	movs	r0, #38	@ 0x26
 8000a5e:	f000 fa2b 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a62:	2026      	movs	r0, #38	@ 0x26
 8000a64:	f000 fa44 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	@ 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <HAL_PCD_MspInit+0x80>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d129      	bne.n	8000aee <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ab2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ac4:	230e      	movs	r3, #14
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f000 fa97 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_PCD_MspInit+0x84>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	@ 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40005c00 	.word	0x40005c00
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b10:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <HAL_InitTick+0xe0>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a32      	ldr	r2, [pc, #200]	@ (8000be0 <HAL_InitTick+0xe0>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b30      	ldr	r3, [pc, #192]	@ (8000be0 <HAL_InitTick+0xe0>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f850 	bl	8002bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b42:	f002 f805 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8000b46:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b48:	e004      	b.n	8000b54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4a:	f002 f801 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b56:	4a23      	ldr	r2, [pc, #140]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	0c9b      	lsrs	r3, r3, #18
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <HAL_InitTick+0xec>)
 8000b66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b8a:	f002 facc 	bl	8003126 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d11b      	bne.n	8000bd4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b9c:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b9e:	f002 fb23 	bl	80031e8 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d111      	bne.n	8000bd4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb0:	2036      	movs	r0, #54	@ 0x36
 8000bb2:	f000 f99d 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d808      	bhi.n	8000bce <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2036      	movs	r0, #54	@ 0x36
 8000bc2:	f000 f979 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e002      	b.n	8000bd4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3738      	adds	r7, #56	@ 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	200004f8 	.word	0x200004f8
 8000bec:	40001000 	.word	0x40001000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000bf8:	f002 f820 	bl	8002c3c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x8>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fb78 	bl	8001328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <USART2_IRQHandler+0x10>)
 8000c42:	f002 fd6d 	bl	8003720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000188 	.word	0x20000188

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f002 fb31 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004f8 	.word	0x200004f8

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f006 fe67 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fab1 	bl	8000220 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cc0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ccc:	08007bb4 	.word	0x08007bb4
  ldr r2, =_sbss
 8000cd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cd4:	20002468 	.word	0x20002468

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x28>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x28>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8d8 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f7ff ff04 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fd94 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000544 	.word	0x20000544

08000d30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000544 	.word	0x20000544

08000d48 <__NVIC_SetPriorityGrouping>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e02e      	b.n	8000f7c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d008      	beq.n	8000f3a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e020      	b.n	8000f7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 020e 	bic.w	r2, r2, #14
 8000f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d005      	beq.n	8000faa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e027      	b.n	8000ffa <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 020e 	bic.w	r2, r2, #14
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	4798      	blx	r3
    }
  }
  return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e154      	b.n	80012be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8146 	beq.w	80012b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0203 	and.w	r2, r3, #3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a0 	beq.w	80012b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b58      	ldr	r3, [pc, #352]	@ (80012dc <HAL_GPIO_Init+0x2d8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a57      	ldr	r2, [pc, #348]	@ (80012dc <HAL_GPIO_Init+0x2d8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b55      	ldr	r3, [pc, #340]	@ (80012dc <HAL_GPIO_Init+0x2d8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a53      	ldr	r2, [pc, #332]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ba:	d019      	beq.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x2e0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d013      	beq.n	80011ec <HAL_GPIO_Init+0x1e8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a48      	ldr	r2, [pc, #288]	@ (80012e8 <HAL_GPIO_Init+0x2e4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a47      	ldr	r2, [pc, #284]	@ (80012ec <HAL_GPIO_Init+0x2e8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a46      	ldr	r2, [pc, #280]	@ (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1dc>
 80011dc:	2304      	movs	r3, #4
 80011de:	e008      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2305      	movs	r3, #5
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011f0:	2300      	movs	r3, #0
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001202:	4937      	ldr	r1, [pc, #220]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001210:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123a:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800125e:	4a25      	ldr	r2, [pc, #148]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001288:	4a1a      	ldr	r2, [pc, #104]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f aea3 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f806 	bl	8001358 <HAL_GPIO_EXTI_Callback>
  }
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e08d      	b.n	800149c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fa6d 	bl	8000874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2224      	movs	r2, #36	@ 0x24
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	e006      	b.n	80013f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d108      	bne.n	8001410 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e007      	b.n	8001420 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800141e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800142e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001432:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001442:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69d9      	ldr	r1, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d138      	bne.n	800152c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e032      	b.n	800152e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	@ 0x24
 80014d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800152c:	2302      	movs	r3, #2
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b20      	cmp	r3, #32
 800154e:	d139      	bne.n	80015c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800155a:	2302      	movs	r3, #2
 800155c:	e033      	b.n	80015c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2224      	movs	r2, #36	@ 0x24
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800158c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b9      	b.n	8001758 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d106      	bne.n	80015fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fa3d 	bl	8000a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f002 ffc7 	bl	800459e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e03e      	b.n	8001694 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	3311      	adds	r3, #17
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3310      	adds	r3, #16
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3313      	adds	r3, #19
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3320      	adds	r3, #32
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3324      	adds	r3, #36	@ 0x24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3bb      	bcc.n	8001616 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e044      	b.n	800172e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3b5      	bcc.n	80016a4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001744:	f002 ff46 	bl	80045d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001766:	af00      	add	r7, sp, #0
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001770:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	f000 bff4 	b.w	800276e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 816d 	beq.w	8001a76 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800179c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d157      	bne.n	8001864 <HAL_RCC_OscConfig+0x104>
 80017b4:	4bae      	ldr	r3, [pc, #696]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c0:	d150      	bne.n	8001864 <HAL_RCC_OscConfig+0x104>
 80017c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017e2:	d802      	bhi.n	80017ea <HAL_RCC_OscConfig+0x8a>
 80017e4:	4ba2      	ldr	r3, [pc, #648]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0xb6>
 80017ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ee:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001802:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001806:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001812:	4b97      	ldr	r3, [pc, #604]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800181a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800181e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001822:	fa92 f2a2 	rbit	r2, r2
 8001826:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800182a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800182e:	fab2 f282 	clz	r2, r2
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f042 0220 	orr.w	r2, r2, #32
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8114 	beq.w	8001a74 <HAL_RCC_OscConfig+0x314>
 800184c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 810b 	bne.w	8001a74 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	f000 bf85 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x124>
 8001876:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e036      	b.n	80018f2 <HAL_RCC_OscConfig+0x192>
 8001884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x14e>
 8001894:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a75      	ldr	r2, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b73      	ldr	r3, [pc, #460]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a72      	ldr	r2, [pc, #456]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e021      	b.n	80018f2 <HAL_RCC_OscConfig+0x192>
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x17a>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x192>
 80018da:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a64      	ldr	r2, [pc, #400]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b62      	ldr	r3, [pc, #392]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a61      	ldr	r2, [pc, #388]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f023 020f 	bic.w	r2, r3, #15
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	495a      	ldr	r1, [pc, #360]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001908:	4313      	orrs	r3, r2
 800190a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d054      	beq.n	80019c6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fa08 	bl	8000d30 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff fa03 	bl	8000d30 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 bf19 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 800193c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001940:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001950:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b3f      	cmp	r3, #63	@ 0x3f
 800195c:	d802      	bhi.n	8001964 <HAL_RCC_OscConfig+0x204>
 800195e:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e015      	b.n	8001990 <HAL_RCC_OscConfig+0x230>
 8001964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001968:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001978:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800197c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001980:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800198c:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001994:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001998:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800199c:	fa92 f2a2 	rbit	r2, r2
 80019a0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80019a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0b0      	beq.n	8001926 <HAL_RCC_OscConfig+0x1c6>
 80019c4:	e057      	b.n	8001a76 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f9b3 	bl	8000d30 <HAL_GetTick>
 80019ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f9ae 	bl	8000d30 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	@ 0x64
 80019de:	d902      	bls.n	80019e6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f000 bec4 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 80019e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a06:	d802      	bhi.n	8001a0e <HAL_RCC_OscConfig+0x2ae>
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e015      	b.n	8001a3a <HAL_RCC_OscConfig+0x2da>
 8001a0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a12:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a26:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_RCC_OscConfig+0x310>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a3e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a42:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f042 0220 	orr.w	r2, r2, #32
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1b0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x270>
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_OscConfig+0x316>
 8001a70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 816c 	beq.w	8001d64 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8c:	4bcc      	ldr	r3, [pc, #816]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a98:	4bc9      	ldr	r3, [pc, #804]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d16d      	bne.n	8001b80 <HAL_RCC_OscConfig+0x420>
 8001aa4:	4bc6      	ldr	r3, [pc, #792]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d167      	bne.n	8001b80 <HAL_RCC_OscConfig+0x420>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ace:	d802      	bhi.n	8001ad6 <HAL_RCC_OscConfig+0x376>
 8001ad0:	4bbb      	ldr	r3, [pc, #748]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e013      	b.n	8001afe <HAL_RCC_OscConfig+0x39e>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001aee:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001afa:	4bb1      	ldr	r3, [pc, #708]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	2202      	movs	r2, #2
 8001b00:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b04:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b08:	fa92 f2a2 	rbit	r2, r2
 8001b0c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b10:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3e6>
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d002      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f000 be14 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b9e      	ldr	r3, [pc, #632]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	21f8      	movs	r1, #248	@ 0xf8
 8001b5c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b64:	fa91 f1a1 	rbit	r1, r1
 8001b68:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b6c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b70:	fab1 f181 	clz	r1, r1
 8001b74:	b2c9      	uxtb	r1, r1
 8001b76:	408b      	lsls	r3, r1
 8001b78:	4991      	ldr	r1, [pc, #580]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e0f1      	b.n	8001d64 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8083 	beq.w	8001c98 <HAL_RCC_OscConfig+0x538>
 8001b92:	2301      	movs	r3, #1
 8001b94:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001ba4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2301      	movs	r3, #1
 8001bbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f8b7 	bl	8000d30 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f8b2 	bl	8000d30 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d902      	bls.n	8001bde <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f000 bdc8 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bf0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bfc:	d802      	bhi.n	8001c04 <HAL_RCC_OscConfig+0x4a4>
 8001bfe:	4b70      	ldr	r3, [pc, #448]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e013      	b.n	8001c2c <HAL_RCC_OscConfig+0x4cc>
 8001c04:	2302      	movs	r3, #2
 8001c06:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c28:	4b65      	ldr	r3, [pc, #404]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c32:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c36:	fa92 f2a2 	rbit	r2, r2
 8001c3a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0b4      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b58      	ldr	r3, [pc, #352]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	21f8      	movs	r1, #248	@ 0xf8
 8001c74:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c7c:	fa91 f1a1 	rbit	r1, r1
 8001c80:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c84:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c88:	fab1 f181 	clz	r1, r1
 8001c8c:	b2c9      	uxtb	r1, r1
 8001c8e:	408b      	lsls	r3, r1
 8001c90:	494b      	ldr	r1, [pc, #300]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e065      	b.n	8001d64 <HAL_RCC_OscConfig+0x604>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cb8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f834 	bl	8000d30 <HAL_GetTick>
 8001cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f82f 	bl	8000d30 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f000 bd45 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d02:	d802      	bhi.n	8001d0a <HAL_RCC_OscConfig+0x5aa>
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e013      	b.n	8001d32 <HAL_RCC_OscConfig+0x5d2>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCC_OscConfig+0x660>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	2202      	movs	r2, #2
 8001d34:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d38:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d44:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1b4      	bne.n	8001cce <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8115 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d07e      	beq.n	8001e88 <HAL_RCC_OscConfig+0x728>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_OscConfig+0x664>)
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7fe ffbc 	bl	8000d30 <HAL_GetTick>
 8001db8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbc:	e00f      	b.n	8001dde <HAL_RCC_OscConfig+0x67e>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe ffb2 	bl	8000d30 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bcc8 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e38:	4bb0      	ldr	r3, [pc, #704]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e44:	2102      	movs	r1, #2
 8001e46:	6019      	str	r1, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f1a3 	rbit	r1, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5e:	6019      	str	r1, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0a0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x668>
 8001e86:	e08d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x844>
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b90      	ldr	r3, [pc, #576]	@ (8002100 <HAL_RCC_OscConfig+0x9a0>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe ff31 	bl	8000d30 <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ff2c 	bl	8000d30 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 bc42 	b.w	800276e <HAL_RCC_OscConfig+0x100e>
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	4b69      	ldr	r3, [pc, #420]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f62:	2102      	movs	r1, #2
 8001f64:	6019      	str	r1, [r3, #0]
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f1a3 	rbit	r1, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f7c:	6019      	str	r1, [r3, #0]
  return result;
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d197      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 819e 	beq.w	80022f6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	61d3      	str	r3, [r2, #28]
 8001fd8:	4b48      	ldr	r3, [pc, #288]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ff2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b42      	ldr	r3, [pc, #264]	@ (8002104 <HAL_RCC_OscConfig+0x9a4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11a      	bne.n	800203c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b3f      	ldr	r3, [pc, #252]	@ (8002104 <HAL_RCC_OscConfig+0x9a4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3e      	ldr	r2, [pc, #248]	@ (8002104 <HAL_RCC_OscConfig+0x9a4>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe fe8d 	bl	8000d30 <HAL_GetTick>
 8002016:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	e009      	b.n	8002030 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe fe88 	bl	8000d30 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	@ 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e39e      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_RCC_OscConfig+0x9a4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x8fa>
 800204c:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e035      	b.n	80020c6 <HAL_RCC_OscConfig+0x966>
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x924>
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a20      	ldr	r2, [pc, #128]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	e020      	b.n	80020c6 <HAL_RCC_OscConfig+0x966>
 8002084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0x94e>
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a15      	ldr	r2, [pc, #84]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e00b      	b.n	80020c6 <HAL_RCC_OscConfig+0x966>
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <HAL_RCC_OscConfig+0x99c>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7fe fe2a 	bl	8000d30 <HAL_GetTick>
 80020dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e012      	b.n	8002108 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fe25 	bl	8000d30 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e339      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	10908120 	.word	0x10908120
 8002104:	40007000 	.word	0x40007000
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002110:	2202      	movs	r2, #2
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0xa10>
 800216a:	4b98      	ldr	r3, [pc, #608]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e013      	b.n	8002198 <HAL_RCC_OscConfig+0xa38>
 8002170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002174:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b8d      	ldr	r3, [pc, #564]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800219c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021a0:	2102      	movs	r1, #2
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	fa92 f1a2 	rbit	r1, r2
 80021b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021ba:	6011      	str	r1, [r2, #0]
  return result;
 80021bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f43f af7f 	beq.w	80020e2 <HAL_RCC_OscConfig+0x982>
 80021e4:	e07d      	b.n	80022e2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe fda3 	bl	8000d30 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7fe fd9e 	bl	8000d30 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e2b2      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002258:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_RCC_OscConfig+0xb10>
 800226a:	4b58      	ldr	r3, [pc, #352]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	e013      	b.n	8002298 <HAL_RCC_OscConfig+0xb38>
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	4b4d      	ldr	r3, [pc, #308]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800229c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022a0:	2102      	movs	r1, #2
 80022a2:	6011      	str	r1, [r2, #0]
 80022a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fa92 f1a2 	rbit	r1, r2
 80022b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022ba:	6011      	str	r1, [r2, #0]
  return result;
 80022bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d186      	bne.n	80021f0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b38      	ldr	r3, [pc, #224]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a37      	ldr	r2, [pc, #220]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8232 	beq.w	800276c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	f000 8201 	beq.w	8002718 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b02      	cmp	r3, #2
 8002324:	f040 8157 	bne.w	80025d6 <HAL_RCC_OscConfig+0xe76>
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800234c:	601a      	str	r2, [r3, #0]
  return result;
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002356:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002362:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	461a      	mov	r2, r3
 800236a:	2300      	movs	r3, #0
 800236c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe fcdf 	bl	8000d30 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	e009      	b.n	800238c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fcda 	bl	8000d30 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1f0      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 800238c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002390:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002394:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023b0:	601a      	str	r2, [r3, #0]
  return result;
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023c4:	d804      	bhi.n	80023d0 <HAL_RCC_OscConfig+0xc70>
 80023c6:	4b01      	ldr	r3, [pc, #4]	@ (80023cc <HAL_RCC_OscConfig+0xc6c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e029      	b.n	8002420 <HAL_RCC_OscConfig+0xcc0>
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002416:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	4bc3      	ldr	r3, [pc, #780]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002424:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002428:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800242c:	6011      	str	r1, [r2, #0]
 800242e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002432:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	fa92 f1a2 	rbit	r1, r2
 800243c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002440:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002444:	6011      	str	r1, [r2, #0]
  return result;
 8002446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d185      	bne.n	8002378 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4baf      	ldr	r3, [pc, #700]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	430b      	orrs	r3, r1
 800248e:	49a7      	ldr	r1, [pc, #668]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800249c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024b8:	601a      	str	r2, [r3, #0]
  return result;
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fc29 	bl	8000d30 <HAL_GetTick>
 80024de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e2:	e009      	b.n	80024f8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fc24 	bl	8000d30 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e13a      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800251c:	601a      	str	r2, [r3, #0]
  return result;
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002526:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002530:	d802      	bhi.n	8002538 <HAL_RCC_OscConfig+0xdd8>
 8002532:	4b7e      	ldr	r3, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e027      	b.n	8002588 <HAL_RCC_OscConfig+0xe28>
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002566:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b69      	ldr	r3, [pc, #420]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800258c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002590:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002594:	6011      	str	r1, [r2, #0]
 8002596:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800259a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	fa92 f1a2 	rbit	r1, r2
 80025a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025ac:	6011      	str	r1, [r2, #0]
  return result;
 80025ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f042 0220 	orr.w	r2, r2, #32
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f002 021f 	and.w	r2, r2, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d087      	beq.n	80024e4 <HAL_RCC_OscConfig+0xd84>
 80025d4:	e0ca      	b.n	800276c <HAL_RCC_OscConfig+0x100c>
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002604:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002610:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	2300      	movs	r3, #0
 800261a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fb88 	bl	8000d30 <HAL_GetTick>
 8002620:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	e009      	b.n	800263a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fb83 	bl	8000d30 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e099      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002642:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b3f      	cmp	r3, #63	@ 0x3f
 8002672:	d802      	bhi.n	800267a <HAL_RCC_OscConfig+0xf1a>
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	e027      	b.n	80026ca <HAL_RCC_OscConfig+0xf6a>
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002682:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_RCC_OscConfig+0xfcc>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ce:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026d6:	6011      	str	r1, [r2, #0]
 80026d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	fa92 f1a2 	rbit	r1, r2
 80026e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026ee:	6011      	str	r1, [r2, #0]
  return result;
 80026f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 021f 	and.w	r2, r2, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d187      	bne.n	8002626 <HAL_RCC_OscConfig+0xec6>
 8002716:	e029      	b.n	800276c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d103      	bne.n	8002730 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e020      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
 800272c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <HAL_RCC_OscConfig+0x1018>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002738:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800273c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d10b      	bne.n	8002768 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002750:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002754:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b09e      	sub	sp, #120	@ 0x78
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e154      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b89      	ldr	r3, [pc, #548]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b86      	ldr	r3, [pc, #536]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4984      	ldr	r1, [pc, #528]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b82      	ldr	r3, [pc, #520]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e13c      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b7b      	ldr	r3, [pc, #492]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4978      	ldr	r1, [pc, #480]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80cd 	beq.w	800298a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d137      	bne.n	8002868 <HAL_RCC_ClockConfig+0xec>
 80027f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002810:	d802      	bhi.n	8002818 <HAL_RCC_ClockConfig+0x9c>
 8002812:	4b6b      	ldr	r3, [pc, #428]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e00f      	b.n	8002838 <HAL_RCC_ClockConfig+0xbc>
 8002818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800281c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	667b      	str	r3, [r7, #100]	@ 0x64
 8002826:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800282a:	663b      	str	r3, [r7, #96]	@ 0x60
 800282c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002834:	4b62      	ldr	r3, [pc, #392]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800283c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800283e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002846:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d171      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0ea      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d137      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x164>
 8002870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800287e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b3f      	cmp	r3, #63	@ 0x3f
 8002888:	d802      	bhi.n	8002890 <HAL_RCC_ClockConfig+0x114>
 800288a:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_ClockConfig+0x134>
 8002890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	647b      	str	r3, [r7, #68]	@ 0x44
 800289e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ac:	4b44      	ldr	r3, [pc, #272]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f002 021f 	and.w	r2, r2, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d135      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0ae      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028f6:	d802      	bhi.n	80028fe <HAL_RCC_ClockConfig+0x182>
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	e00d      	b.n	800291a <HAL_RCC_ClockConfig+0x19e>
 80028fe:	2302      	movs	r3, #2
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	2202      	movs	r2, #2
 800291c:	61ba      	str	r2, [r7, #24]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	617a      	str	r2, [r7, #20]
  return result;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e07a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 0203 	bic.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	491a      	ldr	r1, [pc, #104]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295a:	f7fe f9e9 	bl	8000d30 <HAL_GetTick>
 800295e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002960:	e00a      	b.n	8002978 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002962:	f7fe f9e5 	bl	8000d30 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e062      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 020c 	and.w	r2, r3, #12
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	429a      	cmp	r2, r3
 8002988:	d1eb      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d215      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4906      	ldr	r1, [pc, #24]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d006      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2c2>
 80029ba:	bf00      	nop
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_RCC_ClockConfig+0x2cc>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	491a      	ldr	r1, [pc, #104]	@ (8002a48 <HAL_RCC_ClockConfig+0x2cc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <HAL_RCC_ClockConfig+0x2cc>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4912      	ldr	r1, [pc, #72]	@ (8002a48 <HAL_RCC_ClockConfig+0x2cc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a02:	f000 f845 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a06:	4601      	mov	r1, r0
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_RCC_ClockConfig+0x2cc>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a10:	22f0      	movs	r2, #240	@ 0xf0
 8002a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	40d3      	lsrs	r3, r2
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x2d0>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_RCC_ClockConfig+0x2d4>)
 8002a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <HAL_RCC_ClockConfig+0x2d8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f862 	bl	8000b00 <HAL_InitTick>
  
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3778      	adds	r7, #120	@ 0x78
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08007b74 	.word	0x08007b74
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002a62:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	603b      	str	r3, [r7, #0]
  return result;
 8002a6c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8002abe:	e026      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	613b      	str	r3, [r7, #16]
      break;
 8002ac4:	e026      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aec:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e004      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e002      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b10:	613b      	str	r3, [r7, #16]
      break;
 8002b12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b14:	693b      	ldr	r3, [r7, #16]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	08007b8c 	.word	0x08007b8c
 8002b30:	08007b9c 	.word	0x08007b9c
 8002b34:	003d0900 	.word	0x003d0900

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b56:	f7ff ffef 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	603a      	str	r2, [r7, #0]
  return result;
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	40d3      	lsrs	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08007b84 	.word	0x08007b84

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b9a:	f7ff ffcd 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ba8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	603a      	str	r2, [r7, #0]
  return result;
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	fab2 f282 	clz	r2, r2
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	40d3      	lsrs	r3, r2
 8002bc0:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08007b84 	.word	0x08007b84

08002bd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	220f      	movs	r2, #15
 8002be6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002be8:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HAL_RCC_GetClockConfig+0x5c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0203 	and.w	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_RCC_GetClockConfig+0x60>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0207 	and.w	r2, r3, #7
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d104      	bne.n	8002c56 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c4c:	f000 f80a 	bl	8002c64 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	701a      	strb	r2, [r3, #0]
  }
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	4002100a 	.word	0x4002100a

08002c64 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b092      	sub	sp, #72	@ 0x48
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80d2 	beq.w	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c98:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4a49      	ldr	r2, [pc, #292]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	61d3      	str	r3, [r2, #28]
 8002cb0:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a40      	ldr	r2, [pc, #256]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe f829 	bl	8000d30 <HAL_GetTick>
 8002cde:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fe f825 	bl	8000d30 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	@ 0x64
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e167      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d00:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8082 	beq.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d07a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d72:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d049      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fd ffd5 	bl	8000d30 <HAL_GetTick>
 8002d86:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fd ffd1 	bl	8000d30 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e111      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002da0:	2302      	movs	r3, #2
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
  return result;
 8002db8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002dca:	4b01      	ldr	r3, [pc, #4]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	e00d      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	10908100 	.word	0x10908100
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	4b78      	ldr	r3, [pc, #480]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	613a      	str	r2, [r7, #16]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	fa92 f2a2 	rbit	r2, r2
 8002df6:	60fa      	str	r2, [r7, #12]
  return result;
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0b9      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e16:	4b6d      	ldr	r3, [pc, #436]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	496a      	ldr	r1, [pc, #424]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b66      	ldr	r3, [pc, #408]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a65      	ldr	r2, [pc, #404]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e48:	4b60      	ldr	r3, [pc, #384]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	f023 0203 	bic.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	495d      	ldr	r1, [pc, #372]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e66:	4b59      	ldr	r3, [pc, #356]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4956      	ldr	r1, [pc, #344]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e84:	4b51      	ldr	r3, [pc, #324]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	494e      	ldr	r1, [pc, #312]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f023 0210 	bic.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4947      	ldr	r1, [pc, #284]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ec0:	4b42      	ldr	r3, [pc, #264]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	493f      	ldr	r1, [pc, #252]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f023 0220 	bic.w	r2, r3, #32
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4938      	ldr	r1, [pc, #224]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002efc:	4b33      	ldr	r3, [pc, #204]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4930      	ldr	r1, [pc, #192]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	4929      	ldr	r1, [pc, #164]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f38:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	4921      	ldr	r1, [pc, #132]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f56:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	491a      	ldr	r1, [pc, #104]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f74:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	4912      	ldr	r1, [pc, #72]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	490b      	ldr	r1, [pc, #44]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fb0:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	4903      	ldr	r1, [pc, #12]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3748      	adds	r7, #72	@ 0x48
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e09d      	b.n	800311e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d108      	bne.n	8002ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ff2:	d009      	beq.n	8003008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
 8002ffa:	e005      	b.n	8003008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fc9c 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003048:	d902      	bls.n	8003050 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e002      	b.n	8003056 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003054:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800305e:	d007      	beq.n	8003070 <HAL_SPI_Init+0xa0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0204 	and.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030ec:	ea42 0103 	orr.w	r1, r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e049      	b.n	80031cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f841 	bl	80031d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 f9d3 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e04a      	b.n	8003296 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a21      	ldr	r2, [pc, #132]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x6c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d013      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x6c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x6c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1c      	ldr	r2, [pc, #112]	@ (80032ac <HAL_TIM_Base_Start_IT+0xc4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x6c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1a      	ldr	r2, [pc, #104]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x6c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d115      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d015      	beq.n	8003292 <HAL_TIM_Base_Start_IT+0xaa>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326c:	d011      	beq.n	8003292 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e008      	b.n	8003292 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e000      	b.n	8003294 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	00010007 	.word	0x00010007

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0202 	mvn.w	r2, #2
 80032f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8e4 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8d6 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8e7 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8be 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8b0 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8c1 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0208 	mvn.w	r2, #8
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f898 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f88a 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f89b 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0210 	mvn.w	r2, #16
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2208      	movs	r2, #8
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f872 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f864 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f875 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0201 	mvn.w	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd f9e6 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f908 	bl	800365c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f900 	bl	8003670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f834 	bl	80034fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0220 	mvn.w	r2, #32
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8c8 	bl	8003648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a42      	ldr	r2, [pc, #264]	@ (800362c <TIM_Base_SetConfig+0x11c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3f      	ldr	r2, [pc, #252]	@ (8003630 <TIM_Base_SetConfig+0x120>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3e      	ldr	r2, [pc, #248]	@ (8003634 <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3d      	ldr	r2, [pc, #244]	@ (8003638 <TIM_Base_SetConfig+0x128>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a33      	ldr	r2, [pc, #204]	@ (800362c <TIM_Base_SetConfig+0x11c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <TIM_Base_SetConfig+0x120>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <TIM_Base_SetConfig+0x124>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <TIM_Base_SetConfig+0x128>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <TIM_Base_SetConfig+0x12c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2c      	ldr	r2, [pc, #176]	@ (8003640 <TIM_Base_SetConfig+0x130>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2b      	ldr	r2, [pc, #172]	@ (8003644 <TIM_Base_SetConfig+0x134>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a16      	ldr	r2, [pc, #88]	@ (800362c <TIM_Base_SetConfig+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <TIM_Base_SetConfig+0x128>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a16      	ldr	r2, [pc, #88]	@ (800363c <TIM_Base_SetConfig+0x12c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <TIM_Base_SetConfig+0x130>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <TIM_Base_SetConfig+0x134>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]
  }
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e040      	b.n	8003718 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd f99c 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	@ 0x24
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fd02 	bl	80040d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fb2b 	bl	8003d2c <UART_SetConfig>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e01b      	b.n	8003718 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fd81 	bl	8004218 <UART_CheckIdleState>
 8003716:	4603      	mov	r3, r0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ba      	sub	sp, #232	@ 0xe8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003746:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800374a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800374e:	4013      	ands	r3, r2
 8003750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d115      	bne.n	8003788 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800375c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00f      	beq.n	8003788 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 82ab 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
      }
      return;
 8003786:	e2a5      	b.n	8003cd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8117 	beq.w	80039c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800379e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037a2:	4b85      	ldr	r3, [pc, #532]	@ (80039b8 <HAL_UART_IRQHandler+0x298>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 810a 	beq.w	80039c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <HAL_UART_IRQHandler+0xbc>
 80037b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d2:	f043 0201 	orr.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d011      	beq.n	800380c <HAL_UART_IRQHandler+0xec>
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2202      	movs	r2, #2
 80037fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d011      	beq.n	800383c <HAL_UART_IRQHandler+0x11c>
 8003818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2204      	movs	r2, #4
 800382a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800383c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d017      	beq.n	8003878 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003858:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2208      	movs	r2, #8
 8003866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <HAL_UART_IRQHandler+0x18a>
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8211 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04f      	beq.n	80039a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fd9d 	bl	8004442 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d141      	bne.n	800399a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800392c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800394e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800395a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1d9      	bne.n	8003916 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <HAL_UART_IRQHandler+0x29c>)
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fb06 	bl	8000f88 <HAL_DMA_Abort_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d017      	beq.n	80039b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00f      	b.n	80039b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9b4 	bl	8003d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00b      	b.n	80039b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9b0 	bl	8003d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e007      	b.n	80039b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9ac 	bl	8003d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039b0:	e192      	b.n	8003cd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b2:	bf00      	nop
    return;
 80039b4:	e190      	b.n	8003cd8 <HAL_UART_IRQHandler+0x5b8>
 80039b6:	bf00      	nop
 80039b8:	04000120 	.word	0x04000120
 80039bc:	0800450b 	.word	0x0800450b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 814b 	bne.w	8003c60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8144 	beq.w	8003c60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 813d 	beq.w	8003c60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b40      	cmp	r3, #64	@ 0x40
 80039fa:	f040 80b5 	bne.w	8003b68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8164 	beq.w	8003cdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	f080 815c 	bcs.w	8003cdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	f000 8086 	beq.w	8003b46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1da      	bne.n	8003a3a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3308      	adds	r3, #8
 8003a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e1      	bne.n	8003a84 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e3      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	f023 0310 	bic.w	r3, r3, #16
 8003b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e4      	bne.n	8003b06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd f9e3 	bl	8000f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8d7 	bl	8003d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b66:	e0b9      	b.n	8003cdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80ab 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a6 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e4      	bne.n	8003b94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e3      	bne.n	8003bca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	617b      	str	r3, [r7, #20]
   return(result);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e4      	bne.n	8003c16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f85b 	bl	8003d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c5e:	e03f      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_UART_IRQHandler+0x56a>
 8003c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fc81 	bl	800458a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c88:	e02d      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01c      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
    }
    return;
 8003cb2:	e017      	b.n	8003ce4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fc32 	bl	8004536 <UART_EndTransmit_IT>
    return;
 8003cd2:	e008      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cd4:	bf00      	nop
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003cd8:	bf00      	nop
 8003cda:	e004      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ce4:	bf00      	nop
  }

}
 8003ce6:	37e8      	adds	r7, #232	@ 0xe8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003d5a:	f023 030c 	bic.w	r3, r3, #12
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6979      	ldr	r1, [r7, #20]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4aa7      	ldr	r2, [pc, #668]	@ (8004044 <UART_SetConfig+0x318>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d120      	bne.n	8003dee <UART_SetConfig+0xc2>
 8003dac:	4ba6      	ldr	r3, [pc, #664]	@ (8004048 <UART_SetConfig+0x31c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d817      	bhi.n	8003de8 <UART_SetConfig+0xbc>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0x94>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003ddd 	.word	0x08003ddd
 8003dc8:	08003de3 	.word	0x08003de3
 8003dcc:	08003dd7 	.word	0x08003dd7
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e0b5      	b.n	8003f42 <UART_SetConfig+0x216>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	77fb      	strb	r3, [r7, #31]
 8003dda:	e0b2      	b.n	8003f42 <UART_SetConfig+0x216>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e0af      	b.n	8003f42 <UART_SetConfig+0x216>
 8003de2:	2308      	movs	r3, #8
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e0ac      	b.n	8003f42 <UART_SetConfig+0x216>
 8003de8:	2310      	movs	r3, #16
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e0a9      	b.n	8003f42 <UART_SetConfig+0x216>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a96      	ldr	r2, [pc, #600]	@ (800404c <UART_SetConfig+0x320>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d124      	bne.n	8003e42 <UART_SetConfig+0x116>
 8003df8:	4b93      	ldr	r3, [pc, #588]	@ (8004048 <UART_SetConfig+0x31c>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e04:	d011      	beq.n	8003e2a <UART_SetConfig+0xfe>
 8003e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e0a:	d817      	bhi.n	8003e3c <UART_SetConfig+0x110>
 8003e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e10:	d011      	beq.n	8003e36 <UART_SetConfig+0x10a>
 8003e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e16:	d811      	bhi.n	8003e3c <UART_SetConfig+0x110>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <UART_SetConfig+0xf8>
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d006      	beq.n	8003e30 <UART_SetConfig+0x104>
 8003e22:	e00b      	b.n	8003e3c <UART_SetConfig+0x110>
 8003e24:	2300      	movs	r3, #0
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e08b      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e088      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e30:	2304      	movs	r3, #4
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e085      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e36:	2308      	movs	r3, #8
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e082      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e07f      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a82      	ldr	r2, [pc, #520]	@ (8004050 <UART_SetConfig+0x324>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d124      	bne.n	8003e96 <UART_SetConfig+0x16a>
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004048 <UART_SetConfig+0x31c>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e50:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e54:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e58:	d011      	beq.n	8003e7e <UART_SetConfig+0x152>
 8003e5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e5e:	d817      	bhi.n	8003e90 <UART_SetConfig+0x164>
 8003e60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e64:	d011      	beq.n	8003e8a <UART_SetConfig+0x15e>
 8003e66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e6a:	d811      	bhi.n	8003e90 <UART_SetConfig+0x164>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <UART_SetConfig+0x14c>
 8003e70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e74:	d006      	beq.n	8003e84 <UART_SetConfig+0x158>
 8003e76:	e00b      	b.n	8003e90 <UART_SetConfig+0x164>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e061      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e05e      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e84:	2304      	movs	r3, #4
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e05b      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e058      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e90:	2310      	movs	r3, #16
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e055      	b.n	8003f42 <UART_SetConfig+0x216>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004054 <UART_SetConfig+0x328>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d124      	bne.n	8003eea <UART_SetConfig+0x1be>
 8003ea0:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <UART_SetConfig+0x31c>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ea8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eac:	d011      	beq.n	8003ed2 <UART_SetConfig+0x1a6>
 8003eae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eb2:	d817      	bhi.n	8003ee4 <UART_SetConfig+0x1b8>
 8003eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb8:	d011      	beq.n	8003ede <UART_SetConfig+0x1b2>
 8003eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ebe:	d811      	bhi.n	8003ee4 <UART_SetConfig+0x1b8>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <UART_SetConfig+0x1a0>
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec8:	d006      	beq.n	8003ed8 <UART_SetConfig+0x1ac>
 8003eca:	e00b      	b.n	8003ee4 <UART_SetConfig+0x1b8>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e037      	b.n	8003f42 <UART_SetConfig+0x216>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e034      	b.n	8003f42 <UART_SetConfig+0x216>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e031      	b.n	8003f42 <UART_SetConfig+0x216>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e02e      	b.n	8003f42 <UART_SetConfig+0x216>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e02b      	b.n	8003f42 <UART_SetConfig+0x216>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5a      	ldr	r2, [pc, #360]	@ (8004058 <UART_SetConfig+0x32c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d124      	bne.n	8003f3e <UART_SetConfig+0x212>
 8003ef4:	4b54      	ldr	r3, [pc, #336]	@ (8004048 <UART_SetConfig+0x31c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003efc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f00:	d011      	beq.n	8003f26 <UART_SetConfig+0x1fa>
 8003f02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f06:	d817      	bhi.n	8003f38 <UART_SetConfig+0x20c>
 8003f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f0c:	d011      	beq.n	8003f32 <UART_SetConfig+0x206>
 8003f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f12:	d811      	bhi.n	8003f38 <UART_SetConfig+0x20c>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <UART_SetConfig+0x1f4>
 8003f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1c:	d006      	beq.n	8003f2c <UART_SetConfig+0x200>
 8003f1e:	e00b      	b.n	8003f38 <UART_SetConfig+0x20c>
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e00d      	b.n	8003f42 <UART_SetConfig+0x216>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e00a      	b.n	8003f42 <UART_SetConfig+0x216>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e007      	b.n	8003f42 <UART_SetConfig+0x216>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e004      	b.n	8003f42 <UART_SetConfig+0x216>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e001      	b.n	8003f42 <UART_SetConfig+0x216>
 8003f3e:	2310      	movs	r3, #16
 8003f40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4a:	d15b      	bne.n	8004004 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d827      	bhi.n	8003fa2 <UART_SetConfig+0x276>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <UART_SetConfig+0x22c>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003f93 	.word	0x08003f93
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003f9b 	.word	0x08003f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f7fe fde8 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e013      	b.n	8003fac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe fe06 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8003f88:	61b8      	str	r0, [r7, #24]
        break;
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b33      	ldr	r3, [pc, #204]	@ (800405c <UART_SetConfig+0x330>)
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e00c      	b.n	8003fac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fe fd7d 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8003f96:	61b8      	str	r0, [r7, #24]
        break;
 8003f98:	e008      	b.n	8003fac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	e004      	b.n	8003fac <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8003faa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8082 	beq.w	80040b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	005a      	lsls	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b0f      	cmp	r3, #15
 8003fce:	d916      	bls.n	8003ffe <UART_SetConfig+0x2d2>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d212      	bcs.n	8003ffe <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f023 030f 	bic.w	r3, r3, #15
 8003fe0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	89fa      	ldrh	r2, [r7, #14]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e05c      	b.n	80040b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	77bb      	strb	r3, [r7, #30]
 8004002:	e059      	b.n	80040b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d835      	bhi.n	8004076 <UART_SetConfig+0x34a>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <UART_SetConfig+0x2e4>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004061 	.word	0x08004061
 800401c:	08004077 	.word	0x08004077
 8004020:	08004067 	.word	0x08004067
 8004024:	08004077 	.word	0x08004077
 8004028:	08004077 	.word	0x08004077
 800402c:	08004077 	.word	0x08004077
 8004030:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe fd8c 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e021      	b.n	8004080 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fdaa 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8004040:	61b8      	str	r0, [r7, #24]
        break;
 8004042:	e01d      	b.n	8004080 <UART_SetConfig+0x354>
 8004044:	40013800 	.word	0x40013800
 8004048:	40021000 	.word	0x40021000
 800404c:	40004400 	.word	0x40004400
 8004050:	40004800 	.word	0x40004800
 8004054:	40004c00 	.word	0x40004c00
 8004058:	40005000 	.word	0x40005000
 800405c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <UART_SetConfig+0x3a4>)
 8004062:	61bb      	str	r3, [r7, #24]
        break;
 8004064:	e00c      	b.n	8004080 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe fd13 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 800406a:	61b8      	str	r0, [r7, #24]
        break;
 800406c:	e008      	b.n	8004080 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	61bb      	str	r3, [r7, #24]
        break;
 8004074:	e004      	b.n	8004080 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77bb      	strb	r3, [r7, #30]
        break;
 800407e:	bf00      	nop
    }

    if (pclk != 0U)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085a      	lsrs	r2, r3, #1
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d909      	bls.n	80040b4 <UART_SetConfig+0x388>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a6:	d205      	bcs.n	80040b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e001      	b.n	80040b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	007a1200 	.word	0x007a1200

080040d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d2:	d10a      	bne.n	80041ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b098      	sub	sp, #96	@ 0x60
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004228:	f7fc fd82 	bl	8000d30 <HAL_GetTick>
 800422c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d12e      	bne.n	800429a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f88c 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d021      	beq.n	800429a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800426a:	653b      	str	r3, [r7, #80]	@ 0x50
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800427a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e062      	b.n	8004360 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d149      	bne.n	800433c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f856 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d03c      	beq.n	800433c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	623b      	str	r3, [r7, #32]
   return(result);
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	60fb      	str	r3, [r7, #12]
   return(result);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004314:	61fa      	str	r2, [r7, #28]
 8004316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	617b      	str	r3, [r7, #20]
   return(result);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e011      	b.n	8004360 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3758      	adds	r7, #88	@ 0x58
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004378:	e04f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d04b      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fc fcd5 	bl	8000d30 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <UART_WaitOnFlagUntilTimeout+0x30>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e04e      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d037      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b80      	cmp	r3, #128	@ 0x80
 80043ae:	d034      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d031      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d110      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f838 	bl	8004442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2208      	movs	r2, #8
 80043d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e029      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f4:	d111      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f81e 	bl	8004442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e00f      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d0a0      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004442:	b480      	push	{r7}
 8004444:	b095      	sub	sp, #84	@ 0x54
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004468:	643b      	str	r3, [r7, #64]	@ 0x40
 800446a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800446e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800449c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d118      	bne.n	80044ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	613b      	str	r3, [r7, #16]
   return(result);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044fe:	bf00      	nop
 8004500:	3754      	adds	r7, #84	@ 0x54
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fbe9 	bl	8003d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60bb      	str	r3, [r7, #8]
   return(result);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	613b      	str	r3, [r7, #16]
   return(result);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fbb5 	bl	8003cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045a6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	60bb      	str	r3, [r7, #8]
  return(result);
 800461c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	607b      	str	r3, [r7, #4]
  return(result);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <osKernelInitialize+0x32>
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <osKernelInitialize+0x64>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d109      	bne.n	800464a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004636:	f3ef 8311 	mrs	r3, BASEPRI
 800463a:	603b      	str	r3, [r7, #0]
  return(result);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004642:	f06f 0305 	mvn.w	r3, #5
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e00c      	b.n	8004664 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <osKernelInitialize+0x64>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <osKernelInitialize+0x64>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000548 	.word	0x20000548

08004678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60bb      	str	r3, [r7, #8]
  return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	607b      	str	r3, [r7, #4]
  return(result);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <osKernelStart+0x32>
 8004696:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <osKernelStart+0x64>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d109      	bne.n	80046b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800469e:	f3ef 8311 	mrs	r3, BASEPRI
 80046a2:	603b      	str	r3, [r7, #0]
  return(result);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046aa:	f06f 0305 	mvn.w	r3, #5
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e00e      	b.n	80046d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <osKernelStart+0x64>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80046ba:	4b08      	ldr	r3, [pc, #32]	@ (80046dc <osKernelStart+0x64>)
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80046c0:	f001 fc56 	bl	8005f70 <vTaskStartScheduler>
      stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000548 	.word	0x20000548

080046e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b092      	sub	sp, #72	@ 0x48
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f0:	f3ef 8305 	mrs	r3, IPSR
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 8094 	bne.w	8004826 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004702:	623b      	str	r3, [r7, #32]
  return(result);
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 808d 	bne.w	8004826 <osThreadNew+0x146>
 800470c:	4b48      	ldr	r3, [pc, #288]	@ (8004830 <osThreadNew+0x150>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d106      	bne.n	8004722 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004714:	f3ef 8311 	mrs	r3, BASEPRI
 8004718:	61fb      	str	r3, [r7, #28]
  return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8082 	bne.w	8004826 <osThreadNew+0x146>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d07e      	beq.n	8004826 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800472c:	2318      	movs	r3, #24
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004730:	2300      	movs	r3, #0
 8004732:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004734:	f107 031b 	add.w	r3, r7, #27
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d045      	beq.n	80047d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <osThreadNew+0x74>
        name = attr->name;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <osThreadNew+0x9a>
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	2b38      	cmp	r3, #56	@ 0x38
 800476c:	d805      	bhi.n	800477a <osThreadNew+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <osThreadNew+0x9e>
        return (NULL);
 800477a:	2300      	movs	r3, #0
 800477c:	e054      	b.n	8004828 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00e      	beq.n	80047b4 <osThreadNew+0xd4>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2ba7      	cmp	r3, #167	@ 0xa7
 800479c:	d90a      	bls.n	80047b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d006      	beq.n	80047b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <osThreadNew+0xd4>
        mem = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b2:	e010      	b.n	80047d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10c      	bne.n	80047d6 <osThreadNew+0xf6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d108      	bne.n	80047d6 <osThreadNew+0xf6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <osThreadNew+0xf6>
          mem = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d0:	e001      	b.n	80047d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d110      	bne.n	80047fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f001 f8c0 	bl	8005978 <xTaskCreateStatic>
 80047f8:	4603      	mov	r3, r0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e013      	b.n	8004826 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d110      	bne.n	8004826 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	b29a      	uxth	r2, r3
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f001 f90d 	bl	8005a36 <xTaskCreate>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <osThreadNew+0x146>
          hTask = NULL;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004826:	697b      	ldr	r3, [r7, #20]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3738      	adds	r7, #56	@ 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000548 	.word	0x20000548

08004834 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004840:	f3ef 8305 	mrs	r3, IPSR
 8004844:	617b      	str	r3, [r7, #20]
  return(result);
 8004846:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10f      	bne.n	800486c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484c:	f3ef 8310 	mrs	r3, PRIMASK
 8004850:	613b      	str	r3, [r7, #16]
  return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <osThreadSuspend+0x38>
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <osThreadSuspend+0x64>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d109      	bne.n	8004874 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004860:	f3ef 8311 	mrs	r3, BASEPRI
 8004864:	60fb      	str	r3, [r7, #12]
  return(result);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800486c:	f06f 0305 	mvn.w	r3, #5
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e00b      	b.n	800488c <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800487a:	f06f 0303 	mvn.w	r3, #3
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e004      	b.n	800488c <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8004886:	69b8      	ldr	r0, [r7, #24]
 8004888:	f001 fa60 	bl	8005d4c <vTaskSuspend>
  }

  return (stat);
 800488c:	69fb      	ldr	r3, [r7, #28]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000548 	.word	0x20000548

0800489c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a8:	f3ef 8305 	mrs	r3, IPSR
 80048ac:	617b      	str	r3, [r7, #20]
  return(result);
 80048ae:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	613b      	str	r3, [r7, #16]
  return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <osThreadResume+0x38>
 80048c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <osThreadResume+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d109      	bne.n	80048dc <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048c8:	f3ef 8311 	mrs	r3, BASEPRI
 80048cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osThreadResume+0x40>
    stat = osErrorISR;
 80048d4:	f06f 0305 	mvn.w	r3, #5
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e00b      	b.n	80048f4 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <osThreadResume+0x4e>
    stat = osErrorParameter;
 80048e2:	f06f 0303 	mvn.w	r3, #3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e004      	b.n	80048f4 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f001 fade 	bl	8005eb0 <vTaskResume>
  }

  return (stat);
 80048f4:	69fb      	ldr	r3, [r7, #28]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000548 	.word	0x20000548

08004904 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490c:	f3ef 8305 	mrs	r3, IPSR
 8004910:	613b      	str	r3, [r7, #16]
  return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004918:	f3ef 8310 	mrs	r3, PRIMASK
 800491c:	60fb      	str	r3, [r7, #12]
  return(result);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <osDelay+0x34>
 8004924:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <osDelay+0x58>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d109      	bne.n	8004940 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800492c:	f3ef 8311 	mrs	r3, BASEPRI
 8004930:	60bb      	str	r3, [r7, #8]
  return(result);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <osDelay+0x3c>
    stat = osErrorISR;
 8004938:	f06f 0305 	mvn.w	r3, #5
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e007      	b.n	8004950 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <osDelay+0x4c>
      vTaskDelay(ticks);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f001 f9c8 	bl	8005ce0 <vTaskDelay>
    }
  }

  return (stat);
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000548 	.word	0x20000548

08004960 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	@ 0x30
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004970:	f3ef 8305 	mrs	r3, IPSR
 8004974:	61bb      	str	r3, [r7, #24]
  return(result);
 8004976:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	d16f      	bne.n	8004a5c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	617b      	str	r3, [r7, #20]
  return(result);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d169      	bne.n	8004a5c <osMessageQueueNew+0xfc>
 8004988:	4b37      	ldr	r3, [pc, #220]	@ (8004a68 <osMessageQueueNew+0x108>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d105      	bne.n	800499c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004990:	f3ef 8311 	mrs	r3, BASEPRI
 8004994:	613b      	str	r3, [r7, #16]
  return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d15f      	bne.n	8004a5c <osMessageQueueNew+0xfc>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d05c      	beq.n	8004a5c <osMessageQueueNew+0xfc>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d059      	beq.n	8004a5c <osMessageQueueNew+0xfc>
    mem = -1;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d029      	beq.n	8004a08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <osMessageQueueNew+0x82>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80049c2:	d90e      	bls.n	80049e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	429a      	cmp	r2, r3
 80049da:	d302      	bcc.n	80049e2 <osMessageQueueNew+0x82>
        mem = 1;
 80049dc:	2301      	movs	r3, #1
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	e014      	b.n	8004a0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d110      	bne.n	8004a0c <osMessageQueueNew+0xac>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d108      	bne.n	8004a0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <osMessageQueueNew+0xac>
          mem = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	e001      	b.n	8004a0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10b      	bne.n	8004a2a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	9100      	str	r1, [sp, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa5b 	bl	8004edc <xQueueGenericCreateStatic>
 8004a26:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a28:	e008      	b.n	8004a3c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a30:	2200      	movs	r2, #0
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 facd 	bl	8004fd4 <xQueueGenericCreate>
 8004a3a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e001      	b.n	8004a54 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a58:	f000 ff30 	bl	80058bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000548 	.word	0x20000548

08004a6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	@ 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a84:	f3ef 8305 	mrs	r3, IPSR
 8004a88:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a90:	f3ef 8310 	mrs	r3, PRIMASK
 8004a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <osMessageQueuePut+0x44>
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <osMessageQueuePut+0xe0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d12e      	bne.n	8004b02 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d028      	beq.n	8004b02 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <osMessageQueuePut+0x56>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <osMessageQueuePut+0x56>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004ac2:	f06f 0303 	mvn.w	r3, #3
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ac8:	e039      	b.n	8004b3e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004ace:	f107 0210 	add.w	r2, r7, #16
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	6a38      	ldr	r0, [r7, #32]
 8004ad8:	f000 fbe0 	bl	800529c <xQueueGenericSendFromISR>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d003      	beq.n	8004aea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004ae2:	f06f 0302 	mvn.w	r3, #2
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ae8:	e029      	b.n	8004b3e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d026      	beq.n	8004b3e <osMessageQueuePut+0xd2>
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <osMessageQueuePut+0xe4>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b00:	e01d      	b.n	8004b3e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <osMessageQueuePut+0xa2>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004b0e:	f06f 0303 	mvn.w	r3, #3
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b14:	e014      	b.n	8004b40 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b16:	2300      	movs	r3, #0
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	6a38      	ldr	r0, [r7, #32]
 8004b1e:	f000 fabb 	bl	8005098 <xQueueGenericSend>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d00b      	beq.n	8004b40 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004b2e:	f06f 0301 	mvn.w	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b34:	e004      	b.n	8004b40 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004b36:	f06f 0302 	mvn.w	r3, #2
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	e000      	b.n	8004b40 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3728      	adds	r7, #40	@ 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000548 	.word	0x20000548
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	@ 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b70:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <osMessageQueueGet+0x42>
 8004b82:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <osMessageQueueGet+0xdc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d12e      	bne.n	8004be8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <osMessageQueueGet+0x54>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <osMessageQueueGet+0x54>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004ba8:	f06f 0303 	mvn.w	r3, #3
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bae:	e038      	b.n	8004c22 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004bb4:	f107 0310 	add.w	r3, r7, #16
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	6a38      	ldr	r0, [r7, #32]
 8004bbe:	f000 fceb 	bl	8005598 <xQueueReceiveFromISR>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d003      	beq.n	8004bd0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004bc8:	f06f 0302 	mvn.w	r3, #2
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bce:	e028      	b.n	8004c22 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d025      	beq.n	8004c22 <osMessageQueueGet+0xce>
 8004bd6:	4b17      	ldr	r3, [pc, #92]	@ (8004c34 <osMessageQueueGet+0xe0>)
 8004bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004be6:	e01c      	b.n	8004c22 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <osMessageQueueGet+0xa0>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004bf4:	f06f 0303 	mvn.w	r3, #3
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfa:	e013      	b.n	8004c24 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	6a38      	ldr	r0, [r7, #32]
 8004c02:	f000 fbe7 	bl	80053d4 <xQueueReceive>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d00b      	beq.n	8004c24 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004c12:	f06f 0301 	mvn.w	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c18:	e004      	b.n	8004c24 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004c1a:	f06f 0302 	mvn.w	r3, #2
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c20:	e000      	b.n	8004c24 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3728      	adds	r7, #40	@ 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000548 	.word	0x20000548
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a07      	ldr	r2, [pc, #28]	@ (8004c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a06      	ldr	r2, [pc, #24]	@ (8004c68 <vApplicationGetIdleTaskMemory+0x30>)
 8004c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000054c 	.word	0x2000054c
 8004c68:	200005f4 	.word	0x200005f4

08004c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	@ (8004c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a06      	ldr	r2, [pc, #24]	@ (8004c9c <vApplicationGetTimerTaskMemory+0x30>)
 8004c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	200007f4 	.word	0x200007f4
 8004c9c:	2000089c 	.word	0x2000089c

08004ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f103 0208 	add.w	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 0208 	add.w	r2, r3, #8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d103      	bne.n	8004d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e00c      	b.n	8004d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3308      	adds	r3, #8
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <vListInsert+0x2e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d2f6      	bcs.n	8004d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1e5a      	subs	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	e7fd      	b.n	8004e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e34:	f002 fa40 	bl	80072b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e40:	68f9      	ldr	r1, [r7, #12]
 8004e42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	3b01      	subs	r3, #1
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	@ 0xff
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	22ff      	movs	r2, #255	@ 0xff
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d114      	bne.n	8004eb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01a      	beq.n	8004ec8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fb0e 	bl	80064b8 <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <xQueueGenericReset+0xd0>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	e009      	b.n	8004ec8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fef1 	bl	8004ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3324      	adds	r3, #36	@ 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff feec 	bl	8004ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ec8:	f002 fa28 	bl	800731c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ecc:	2301      	movs	r3, #1
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	@ 0x38
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <xQueueGenericCreateStatic+0x56>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xQueueGenericCreateStatic+0x5a>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericCreateStatic+0x5c>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <xQueueGenericCreateStatic+0x84>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericCreateStatic+0x88>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericCreateStatic+0x8a>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f82:	2350      	movs	r3, #80	@ 0x50
 8004f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d00b      	beq.n	8004fa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61bb      	str	r3, [r7, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f844 	bl	8005052 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3730      	adds	r7, #48	@ 0x30
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	613b      	str	r3, [r7, #16]
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e004      	b.n	8005016 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3350      	adds	r3, #80	@ 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f002 fa6e 	bl	80074fc <pvPortMalloc>
 8005020:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3350      	adds	r3, #80	@ 0x50
 800502c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005036:	79fa      	ldrb	r2, [r7, #7]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f805 	bl	8005052 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005048:	69bb      	ldr	r3, [r7, #24]
	}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e002      	b.n	8005074 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005080:	2101      	movs	r1, #1
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f7ff fec0 	bl	8004e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08e      	sub	sp, #56	@ 0x38
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <xQueueGenericSend+0x34>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <xQueueGenericSend+0x42>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <xQueueGenericSend+0x46>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <xQueueGenericSend+0x48>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <xQueueGenericSend+0x64>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x72>
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <xQueueGenericSend+0x76>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGenericSend+0x78>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <xQueueGenericSend+0x94>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	623b      	str	r3, [r7, #32]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800512c:	f001 fb90 	bl	8006850 <xTaskGetSchedulerState>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <xQueueGenericSend+0xa4>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <xQueueGenericSend+0xa8>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <xQueueGenericSend+0xaa>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <xQueueGenericSend+0xc6>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	61fb      	str	r3, [r7, #28]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800515e:	f002 f8ab 	bl	80072b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <xQueueGenericSend+0xdc>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d129      	bne.n	80051c8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800517a:	f000 fa8f 	bl	800569c <prvCopyDataToQueue>
 800517e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	3324      	adds	r3, #36	@ 0x24
 800518c:	4618      	mov	r0, r3
 800518e:	f001 f993 	bl	80064b8 <xTaskRemoveFromEventList>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005198:	4b3f      	ldr	r3, [pc, #252]	@ (8005298 <xQueueGenericSend+0x200>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	e00a      	b.n	80051c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051b0:	4b39      	ldr	r3, [pc, #228]	@ (8005298 <xQueueGenericSend+0x200>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051c0:	f002 f8ac 	bl	800731c <vPortExitCritical>
				return pdPASS;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e063      	b.n	8005290 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ce:	f002 f8a5 	bl	800731c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e05c      	b.n	8005290 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4618      	mov	r0, r3
 80051e2:	f001 f9cd 	bl	8006580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e6:	2301      	movs	r3, #1
 80051e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ea:	f002 f897 	bl	800731c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ee:	f000 ff2f 	bl	8006050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051f2:	f002 f861 	bl	80072b8 <vPortEnterCritical>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d103      	bne.n	800520c <xQueueGenericSend+0x174>
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005212:	b25b      	sxtb	r3, r3
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d103      	bne.n	8005222 <xQueueGenericSend+0x18a>
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005222:	f002 f87b 	bl	800731c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005226:	1d3a      	adds	r2, r7, #4
 8005228:	f107 0314 	add.w	r3, r7, #20
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f9bc 	bl	80065ac <xTaskCheckForTimeOut>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d124      	bne.n	8005284 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800523a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800523c:	f000 fb26 	bl	800588c <prvIsQueueFull>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d018      	beq.n	8005278 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	3310      	adds	r3, #16
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f001 f8e0 	bl	8006414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005256:	f000 fab1 	bl	80057bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800525a:	f000 ff07 	bl	800606c <xTaskResumeAll>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f af7c 	bne.w	800515e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005266:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <xQueueGenericSend+0x200>)
 8005268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	e772      	b.n	800515e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800527a:	f000 fa9f 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800527e:	f000 fef5 	bl	800606c <xTaskResumeAll>
 8005282:	e76c      	b.n	800515e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005286:	f000 fa99 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800528a:	f000 feef 	bl	800606c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800528e:	2300      	movs	r3, #0
		}
	}
}
 8005290:	4618      	mov	r0, r3
 8005292:	3738      	adds	r7, #56	@ 0x38
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	@ 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <xQueueGenericSendFromISR+0x3e>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <xQueueGenericSendFromISR+0x42>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <xQueueGenericSendFromISR+0x44>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	623b      	str	r3, [r7, #32]
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d103      	bne.n	800530a <xQueueGenericSendFromISR+0x6e>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <xQueueGenericSendFromISR+0x72>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueGenericSendFromISR+0x74>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	61fb      	str	r3, [r7, #28]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800532c:	f002 f8a4 	bl	8007478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005330:	f3ef 8211 	mrs	r2, BASEPRI
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61ba      	str	r2, [r7, #24]
 8005346:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005348:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <xQueueGenericSendFromISR+0xc2>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d12c      	bne.n	80053b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800536e:	f000 f995 	bl	800569c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005372:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d112      	bne.n	80053a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	3324      	adds	r3, #36	@ 0x24
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f895 	bl	80064b8 <xTaskRemoveFromEventList>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e007      	b.n	80053b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053a6:	3301      	adds	r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	b25a      	sxtb	r2, r3
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053b2:	2301      	movs	r3, #1
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80053b6:	e001      	b.n	80053bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3738      	adds	r7, #56	@ 0x38
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	@ 0x30
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <xQueueReceive+0x32>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	623b      	str	r3, [r7, #32]
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <xQueueReceive+0x40>
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueReceive+0x44>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueReceive+0x46>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <xQueueReceive+0x62>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61fb      	str	r3, [r7, #28]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005436:	f001 fa0b 	bl	8006850 <xTaskGetSchedulerState>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <xQueueReceive+0x72>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xQueueReceive+0x76>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueReceive+0x78>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <xQueueReceive+0x94>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005468:	f001 ff26 	bl	80072b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01f      	beq.n	80054b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547c:	f000 f978 	bl	8005770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00f      	beq.n	80054b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	3310      	adds	r3, #16
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f80f 	bl	80064b8 <xTaskRemoveFromEventList>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005594 <xQueueReceive+0x1c0>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054b0:	f001 ff34 	bl	800731c <vPortExitCritical>
				return pdPASS;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e069      	b.n	800558c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054be:	f001 ff2d 	bl	800731c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e062      	b.n	800558c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f855 	bl	8006580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054da:	f001 ff1f 	bl	800731c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054de:	f000 fdb7 	bl	8006050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054e2:	f001 fee9 	bl	80072b8 <vPortEnterCritical>
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d103      	bne.n	80054fc <xQueueReceive+0x128>
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005502:	b25b      	sxtb	r3, r3
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d103      	bne.n	8005512 <xQueueReceive+0x13e>
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005512:	f001 ff03 	bl	800731c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005516:	1d3a      	adds	r2, r7, #4
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f001 f844 	bl	80065ac <xTaskCheckForTimeOut>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d123      	bne.n	8005572 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800552a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552c:	f000 f998 	bl	8005860 <prvIsQueueEmpty>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d017      	beq.n	8005566 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	3324      	adds	r3, #36	@ 0x24
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 ff68 	bl	8006414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005546:	f000 f939 	bl	80057bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800554a:	f000 fd8f 	bl	800606c <xTaskResumeAll>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d189      	bne.n	8005468 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <xQueueReceive+0x1c0>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e780      	b.n	8005468 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005568:	f000 f928 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800556c:	f000 fd7e 	bl	800606c <xTaskResumeAll>
 8005570:	e77a      	b.n	8005468 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 f922 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005578:	f000 fd78 	bl	800606c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800557c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800557e:	f000 f96f 	bl	8005860 <prvIsQueueEmpty>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f43f af6f 	beq.w	8005468 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800558a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800558c:	4618      	mov	r0, r3
 800558e:	3730      	adds	r7, #48	@ 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	@ 0x38
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	623b      	str	r3, [r7, #32]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <xQueueReceiveFromISR+0x3c>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xQueueReceiveFromISR+0x40>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <xQueueReceiveFromISR+0x42>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61fb      	str	r3, [r7, #28]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f6:	f001 ff3f 	bl	8007478 <vPortValidateInterruptPriority>
	__asm volatile
 80055fa:	f3ef 8211 	mrs	r2, BASEPRI
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61ba      	str	r2, [r7, #24]
 8005610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02f      	beq.n	8005682 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005630:	f000 f89e 	bl	8005770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	1e5a      	subs	r2, r3, #1
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800563c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d112      	bne.n	800566c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	3310      	adds	r3, #16
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ff30 	bl	80064b8 <xTaskRemoveFromEventList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e007      	b.n	800567c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800566c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005670:	3301      	adds	r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	b25a      	sxtb	r2, r3
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	e001      	b.n	8005686 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005682:	2300      	movs	r3, #0
 8005684:	637b      	str	r3, [r7, #52]	@ 0x34
 8005686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f383 8811 	msr	BASEPRI, r3
}
 8005690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005694:	4618      	mov	r0, r3
 8005696:	3738      	adds	r7, #56	@ 0x38
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d14d      	bne.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 f8e0 	bl	800688c <xTaskPriorityDisinherit>
 80056cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	605a      	str	r2, [r3, #4]
 80056d4:	e043      	b.n	800575e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d119      	bne.n	8005710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6898      	ldr	r0, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	f002 f974 	bl	80079d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d32b      	bcc.n	800575e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	609a      	str	r2, [r3, #8]
 800570e:	e026      	b.n	800575e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68d8      	ldr	r0, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	461a      	mov	r2, r3
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	f002 f95a 	bl	80079d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	425b      	negs	r3, r3
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d207      	bcs.n	800574c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	425b      	negs	r3, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d105      	bne.n	800575e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3b01      	subs	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005766:	697b      	ldr	r3, [r7, #20]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d303      	bcc.n	80057a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68d9      	ldr	r1, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	6838      	ldr	r0, [r7, #0]
 80057b0:	f002 f910 	bl	80079d4 <memcpy>
	}
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057c4:	f001 fd78 	bl	80072b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d0:	e011      	b.n	80057f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3324      	adds	r3, #36	@ 0x24
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fe6a 	bl	80064b8 <xTaskRemoveFromEventList>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057ea:	f000 ff43 	bl	8006674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dce9      	bgt.n	80057d2 <prvUnlockQueue+0x16>
 80057fe:	e000      	b.n	8005802 <prvUnlockQueue+0x46>
					break;
 8005800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	22ff      	movs	r2, #255	@ 0xff
 8005806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800580a:	f001 fd87 	bl	800731c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800580e:	f001 fd53 	bl	80072b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800581a:	e011      	b.n	8005840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fe45 	bl	80064b8 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005834:	f000 ff1e 	bl	8006674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dce9      	bgt.n	800581c <prvUnlockQueue+0x60>
 8005848:	e000      	b.n	800584c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800584a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	22ff      	movs	r2, #255	@ 0xff
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005854:	f001 fd62 	bl	800731c <vPortExitCritical>
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005868:	f001 fd26 	bl	80072b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e001      	b.n	800587e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800587e:	f001 fd4d 	bl	800731c <vPortExitCritical>

	return xReturn;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005894:	f001 fd10 	bl	80072b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d102      	bne.n	80058aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e001      	b.n	80058ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ae:	f001 fd35 	bl	800731c <vPortExitCritical>

	return xReturn;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e014      	b.n	80058f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058cc:	4a0f      	ldr	r2, [pc, #60]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058d8:	490c      	ldr	r1, [pc, #48]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058e2:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058ee:	e006      	b.n	80058fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d9e7      	bls.n	80058cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000c9c 	.word	0x20000c9c

08005910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005920:	f001 fcca 	bl	80072b8 <vPortEnterCritical>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d103      	bne.n	800593a <vQueueWaitForMessageRestricted+0x2a>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005940:	b25b      	sxtb	r3, r3
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <vQueueWaitForMessageRestricted+0x40>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005950:	f001 fce4 	bl	800731c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fd7b 	bl	8006460 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff ff26 	bl	80057bc <prvUnlockQueue>
	}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	@ 0x38
 800597c:	af04      	add	r7, sp, #16
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	61fb      	str	r3, [r7, #28]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059c2:	23a8      	movs	r3, #168	@ 0xa8
 80059c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80059ca:	d00b      	beq.n	80059e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	61bb      	str	r3, [r7, #24]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01e      	beq.n	8005a28 <xTaskCreateStatic+0xb0>
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a02:	2300      	movs	r3, #0
 8005a04:	9303      	str	r3, [sp, #12]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f850 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a22:	f000 f8ed 	bl	8005c00 <prvAddNewTaskToReadyList>
 8005a26:	e001      	b.n	8005a2c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a2c:	697b      	ldr	r3, [r7, #20]
	}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	@ 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08c      	sub	sp, #48	@ 0x30
 8005a3a:	af04      	add	r7, sp, #16
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fd56 	bl	80074fc <pvPortMalloc>
 8005a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a58:	20a8      	movs	r0, #168	@ 0xa8
 8005a5a:	f001 fd4f 	bl	80074fc <pvPortMalloc>
 8005a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a6c:	e005      	b.n	8005a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a6e:	6978      	ldr	r0, [r7, #20]
 8005a70:	f001 fe0c 	bl	800768c <vPortFree>
 8005a74:	e001      	b.n	8005a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f80e 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa4:	69f8      	ldr	r0, [r7, #28]
 8005aa6:	f000 f8ab 	bl	8005c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e002      	b.n	8005ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	21a5      	movs	r1, #165	@ 0xa5
 8005ada:	f001 feef 	bl	80078bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	617b      	str	r3, [r7, #20]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e012      	b.n	8005b46 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3334      	adds	r3, #52	@ 0x34
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d9e9      	bls.n	8005b20 <prvInitialiseNewTask+0x60>
 8005b4c:	e000      	b.n	8005b50 <prvInitialiseNewTask+0x90>
		{
			break;
 8005b4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	2b37      	cmp	r3, #55	@ 0x37
 8005b5c:	d901      	bls.n	8005b62 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b5e:	2337      	movs	r3, #55	@ 0x37
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2200      	movs	r2, #0
 8005b72:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff f8b1 	bl	8004ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	3318      	adds	r3, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff f8ac 	bl	8004ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	3354      	adds	r3, #84	@ 0x54
 8005bb2:	224c      	movs	r2, #76	@ 0x4c
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fe80 	bl	80078bc <memset>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf4 <prvInitialiseNewTask+0x134>)
 8005bc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf8 <prvInitialiseNewTask+0x138>)
 8005bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	4a0c      	ldr	r2, [pc, #48]	@ (8005bfc <prvInitialiseNewTask+0x13c>)
 8005bcc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	69b8      	ldr	r0, [r7, #24]
 8005bd4:	f001 fa3e 	bl	8007054 <pxPortInitialiseStack>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bea:	bf00      	nop
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20002328 	.word	0x20002328
 8005bf8:	20002390 	.word	0x20002390
 8005bfc:	200023f8 	.word	0x200023f8

08005c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c08:	f001 fb56 	bl	80072b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c16:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c24:	4b27      	ldr	r3, [pc, #156]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d110      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c2c:	f000 fd46 	bl	80066bc <prvInitialiseTaskLists>
 8005c30:	e00d      	b.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c32:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <prvAddNewTaskToReadyList+0xcc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c3a:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d802      	bhi.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c48:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c4e:	4b20      	ldr	r3, [pc, #128]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <prvAddNewTaskToReadyList+0xd4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d903      	bls.n	8005c74 <prvAddNewTaskToReadyList+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <prvAddNewTaskToReadyList+0xd4>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <prvAddNewTaskToReadyList+0xd8>)
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7ff f835 	bl	8004cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c90:	f001 fb44 	bl	800731c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c94:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <prvAddNewTaskToReadyList+0xcc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00e      	beq.n	8005cba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d207      	bcs.n	8005cba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005caa:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <prvAddNewTaskToReadyList+0xdc>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200011b0 	.word	0x200011b0
 8005cc8:	20000cdc 	.word	0x20000cdc
 8005ccc:	200011bc 	.word	0x200011bc
 8005cd0:	200011cc 	.word	0x200011cc
 8005cd4:	200011b8 	.word	0x200011b8
 8005cd8:	20000ce0 	.word	0x20000ce0
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cf2:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <vTaskDelay+0x64>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <vTaskDelay+0x32>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	60bb      	str	r3, [r7, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d12:	f000 f99d 	bl	8006050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fe27 	bl	800696c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d1e:	f000 f9a5 	bl	800606c <xTaskResumeAll>
 8005d22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d2a:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <vTaskDelay+0x68>)
 8005d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200011d8 	.word	0x200011d8
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d54:	f001 fab0 	bl	80072b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <vTaskSuspend+0x18>
 8005d5e:	4b30      	ldr	r3, [pc, #192]	@ (8005e20 <vTaskSuspend+0xd4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	e000      	b.n	8005d66 <vTaskSuspend+0x1a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff f821 	bl	8004db4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3318      	adds	r3, #24
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff f818 	bl	8004db4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4826      	ldr	r0, [pc, #152]	@ (8005e24 <vTaskSuspend+0xd8>)
 8005d8c:	f7fe ffb5 	bl	8004cfa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d103      	bne.n	8005da4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005da4:	f001 faba 	bl	800731c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005da8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e28 <vTaskSuspend+0xdc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005db0:	f001 fa82 	bl	80072b8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005db4:	f000 fd26 	bl	8006804 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005db8:	f001 fab0 	bl	800731c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005dbc:	4b18      	ldr	r3, [pc, #96]	@ (8005e20 <vTaskSuspend+0xd4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d128      	bne.n	8005e18 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005dc6:	4b18      	ldr	r3, [pc, #96]	@ (8005e28 <vTaskSuspend+0xdc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d018      	beq.n	8005e00 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005dce:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <vTaskSuspend+0xe0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <vTaskSuspend+0xa2>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60bb      	str	r3, [r7, #8]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005dee:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <vTaskSuspend+0xe4>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfe:	e00b      	b.n	8005e18 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005e00:	4b08      	ldr	r3, [pc, #32]	@ (8005e24 <vTaskSuspend+0xd8>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <vTaskSuspend+0xe8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d103      	bne.n	8005e14 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8005e0c:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <vTaskSuspend+0xd4>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
	}
 8005e12:	e001      	b.n	8005e18 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8005e14:	f000 fa98 	bl	8006348 <vTaskSwitchContext>
	}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000cdc 	.word	0x20000cdc
 8005e24:	2000119c 	.word	0x2000119c
 8005e28:	200011bc 	.word	0x200011bc
 8005e2c:	200011d8 	.word	0x200011d8
 8005e30:	e000ed04 	.word	0xe000ed04
 8005e34:	200011b0 	.word	0x200011b0

08005e38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea8 <prvTaskIsTaskSuspended+0x70>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <prvTaskIsTaskSuspended+0x3c>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <prvTaskIsTaskSuspended+0x3e>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005eac <prvTaskIsTaskSuspended+0x74>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00a      	beq.n	8005e9a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <prvTaskIsTaskSuspended+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <prvTaskIsTaskSuspended+0x5a>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8005e96:	2301      	movs	r3, #1
 8005e98:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e9a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	2000119c 	.word	0x2000119c
 8005eac:	20001170 	.word	0x20001170

08005eb0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10b      	bne.n	8005eda <vTaskResume+0x2a>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03a      	beq.n	8005f56 <vTaskResume+0xa6>
 8005ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f60 <vTaskResume+0xb0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d035      	beq.n	8005f56 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8005eea:	f001 f9e5 	bl	80072b8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff ffa2 	bl	8005e38 <prvTaskIsTaskSuspended>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02b      	beq.n	8005f52 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe ff58 	bl	8004db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f08:	4b16      	ldr	r3, [pc, #88]	@ (8005f64 <vTaskResume+0xb4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d903      	bls.n	8005f18 <vTaskResume+0x68>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	4a13      	ldr	r2, [pc, #76]	@ (8005f64 <vTaskResume+0xb4>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4a10      	ldr	r2, [pc, #64]	@ (8005f68 <vTaskResume+0xb8>)
 8005f26:	441a      	add	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f7fe fee3 	bl	8004cfa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <vTaskResume+0xb0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d307      	bcc.n	8005f52 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005f42:	4b0a      	ldr	r3, [pc, #40]	@ (8005f6c <vTaskResume+0xbc>)
 8005f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005f52:	f001 f9e3 	bl	800731c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000cdc 	.word	0x20000cdc
 8005f64:	200011b8 	.word	0x200011b8
 8005f68:	20000ce0 	.word	0x20000ce0
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	@ 0x28
 8005f74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f7e:	463a      	mov	r2, r7
 8005f80:	1d39      	adds	r1, r7, #4
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fe56 	bl	8004c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	9202      	str	r2, [sp, #8]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	4924      	ldr	r1, [pc, #144]	@ (8006030 <vTaskStartScheduler+0xc0>)
 8005fa0:	4824      	ldr	r0, [pc, #144]	@ (8006034 <vTaskStartScheduler+0xc4>)
 8005fa2:	f7ff fce9 	bl	8005978 <xTaskCreateStatic>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <vTaskStartScheduler+0xc8>)
 8005faa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fac:	4b22      	ldr	r3, [pc, #136]	@ (8006038 <vTaskStartScheduler+0xc8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e001      	b.n	8005fbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fc4:	f000 fd26 	bl	8006a14 <xTimerCreateTimerTask>
 8005fc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d11b      	bne.n	8006008 <vTaskStartScheduler+0x98>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fe4:	4b15      	ldr	r3, [pc, #84]	@ (800603c <vTaskStartScheduler+0xcc>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3354      	adds	r3, #84	@ 0x54
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <vTaskStartScheduler+0xd0>)
 8005fec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fee:	4b15      	ldr	r3, [pc, #84]	@ (8006044 <vTaskStartScheduler+0xd4>)
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ff6:	4b14      	ldr	r3, [pc, #80]	@ (8006048 <vTaskStartScheduler+0xd8>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ffc:	4b13      	ldr	r3, [pc, #76]	@ (800604c <vTaskStartScheduler+0xdc>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006002:	f001 f8b5 	bl	8007170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006006:	e00f      	b.n	8006028 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d10b      	bne.n	8006028 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <vTaskStartScheduler+0xb4>
}
 8006028:	bf00      	nop
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08007ad8 	.word	0x08007ad8
 8006034:	0800668d 	.word	0x0800668d
 8006038:	200011d4 	.word	0x200011d4
 800603c:	20000cdc 	.word	0x20000cdc
 8006040:	20000010 	.word	0x20000010
 8006044:	200011d0 	.word	0x200011d0
 8006048:	200011bc 	.word	0x200011bc
 800604c:	200011b4 	.word	0x200011b4

08006050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <vTaskSuspendAll+0x18>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	4a03      	ldr	r2, [pc, #12]	@ (8006068 <vTaskSuspendAll+0x18>)
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200011d8 	.word	0x200011d8

0800606c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800607a:	4b42      	ldr	r3, [pc, #264]	@ (8006184 <xTaskResumeAll+0x118>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <xTaskResumeAll+0x2e>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	603b      	str	r3, [r7, #0]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800609a:	f001 f90d 	bl	80072b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800609e:	4b39      	ldr	r3, [pc, #228]	@ (8006184 <xTaskResumeAll+0x118>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	4a37      	ldr	r2, [pc, #220]	@ (8006184 <xTaskResumeAll+0x118>)
 80060a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a8:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <xTaskResumeAll+0x118>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d162      	bne.n	8006176 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060b0:	4b35      	ldr	r3, [pc, #212]	@ (8006188 <xTaskResumeAll+0x11c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d05e      	beq.n	8006176 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060b8:	e02f      	b.n	800611a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060ba:	4b34      	ldr	r3, [pc, #208]	@ (800618c <xTaskResumeAll+0x120>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3318      	adds	r3, #24
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fe74 	bl	8004db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fe6f 	bl	8004db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b2d      	ldr	r3, [pc, #180]	@ (8006190 <xTaskResumeAll+0x124>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d903      	bls.n	80060ea <xTaskResumeAll+0x7e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006190 <xTaskResumeAll+0x124>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4a27      	ldr	r2, [pc, #156]	@ (8006194 <xTaskResumeAll+0x128>)
 80060f8:	441a      	add	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe fdfa 	bl	8004cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610a:	4b23      	ldr	r3, [pc, #140]	@ (8006198 <xTaskResumeAll+0x12c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006114:	4b21      	ldr	r3, [pc, #132]	@ (800619c <xTaskResumeAll+0x130>)
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800611a:	4b1c      	ldr	r3, [pc, #112]	@ (800618c <xTaskResumeAll+0x120>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1cb      	bne.n	80060ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006128:	f000 fb6c 	bl	8006804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800612c:	4b1c      	ldr	r3, [pc, #112]	@ (80061a0 <xTaskResumeAll+0x134>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006138:	f000 f846 	bl	80061c8 <xTaskIncrementTick>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006142:	4b16      	ldr	r3, [pc, #88]	@ (800619c <xTaskResumeAll+0x130>)
 8006144:	2201      	movs	r2, #1
 8006146:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3b01      	subs	r3, #1
 800614c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f1      	bne.n	8006138 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006154:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <xTaskResumeAll+0x134>)
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800615a:	4b10      	ldr	r3, [pc, #64]	@ (800619c <xTaskResumeAll+0x130>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006166:	4b0f      	ldr	r3, [pc, #60]	@ (80061a4 <xTaskResumeAll+0x138>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f001 f8d1 	bl	800731c <vPortExitCritical>

	return xAlreadyYielded;
 800617a:	68bb      	ldr	r3, [r7, #8]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200011d8 	.word	0x200011d8
 8006188:	200011b0 	.word	0x200011b0
 800618c:	20001170 	.word	0x20001170
 8006190:	200011b8 	.word	0x200011b8
 8006194:	20000ce0 	.word	0x20000ce0
 8006198:	20000cdc 	.word	0x20000cdc
 800619c:	200011c4 	.word	0x200011c4
 80061a0:	200011c0 	.word	0x200011c0
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061ae:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <xTaskGetTickCount+0x1c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061b4:	687b      	ldr	r3, [r7, #4]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	200011b4 	.word	0x200011b4

080061c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d2:	4b52      	ldr	r3, [pc, #328]	@ (800631c <xTaskIncrementTick+0x154>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 808f 	bne.w	80062fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061dc:	4b50      	ldr	r3, [pc, #320]	@ (8006320 <xTaskIncrementTick+0x158>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006320 <xTaskIncrementTick+0x158>)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d121      	bne.n	8006234 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006324 <xTaskIncrementTick+0x15c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <xTaskIncrementTick+0x4a>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xTaskIncrementTick+0x46>
 8006212:	4b44      	ldr	r3, [pc, #272]	@ (8006324 <xTaskIncrementTick+0x15c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	4b43      	ldr	r3, [pc, #268]	@ (8006328 <xTaskIncrementTick+0x160>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a41      	ldr	r2, [pc, #260]	@ (8006324 <xTaskIncrementTick+0x15c>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4a41      	ldr	r2, [pc, #260]	@ (8006328 <xTaskIncrementTick+0x160>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b41      	ldr	r3, [pc, #260]	@ (800632c <xTaskIncrementTick+0x164>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3301      	adds	r3, #1
 800622c:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <xTaskIncrementTick+0x164>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	f000 fae8 	bl	8006804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006234:	4b3e      	ldr	r3, [pc, #248]	@ (8006330 <xTaskIncrementTick+0x168>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	429a      	cmp	r2, r3
 800623c:	d34e      	bcc.n	80062dc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623e:	4b39      	ldr	r3, [pc, #228]	@ (8006324 <xTaskIncrementTick+0x15c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xTaskIncrementTick+0x84>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xTaskIncrementTick+0x86>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006252:	4b37      	ldr	r3, [pc, #220]	@ (8006330 <xTaskIncrementTick+0x168>)
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	601a      	str	r2, [r3, #0]
					break;
 800625a:	e03f      	b.n	80062dc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800625c:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <xTaskIncrementTick+0x15c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d203      	bcs.n	800627c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006274:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <xTaskIncrementTick+0x168>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6013      	str	r3, [r2, #0]
						break;
 800627a:	e02f      	b.n	80062dc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fd97 	bl	8004db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	3318      	adds	r3, #24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fd8e 	bl	8004db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629c:	4b25      	ldr	r3, [pc, #148]	@ (8006334 <xTaskIncrementTick+0x16c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d903      	bls.n	80062ac <xTaskIncrementTick+0xe4>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4a22      	ldr	r2, [pc, #136]	@ (8006334 <xTaskIncrementTick+0x16c>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <xTaskIncrementTick+0x170>)
 80062ba:	441a      	add	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f7fe fd19 	bl	8004cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062cc:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <xTaskIncrementTick+0x174>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d3b3      	bcc.n	800623e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062da:	e7b0      	b.n	800623e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062dc:	4b17      	ldr	r3, [pc, #92]	@ (800633c <xTaskIncrementTick+0x174>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e2:	4915      	ldr	r1, [pc, #84]	@ (8006338 <xTaskIncrementTick+0x170>)
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d907      	bls.n	8006304 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e004      	b.n	8006304 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062fa:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <xTaskIncrementTick+0x178>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3301      	adds	r3, #1
 8006300:	4a0f      	ldr	r2, [pc, #60]	@ (8006340 <xTaskIncrementTick+0x178>)
 8006302:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006304:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <xTaskIncrementTick+0x17c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006310:	697b      	ldr	r3, [r7, #20]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200011d8 	.word	0x200011d8
 8006320:	200011b4 	.word	0x200011b4
 8006324:	20001168 	.word	0x20001168
 8006328:	2000116c 	.word	0x2000116c
 800632c:	200011c8 	.word	0x200011c8
 8006330:	200011d0 	.word	0x200011d0
 8006334:	200011b8 	.word	0x200011b8
 8006338:	20000ce0 	.word	0x20000ce0
 800633c:	20000cdc 	.word	0x20000cdc
 8006340:	200011c0 	.word	0x200011c0
 8006344:	200011c4 	.word	0x200011c4

08006348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800634e:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <vTaskSwitchContext+0xb4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006356:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <vTaskSwitchContext+0xb8>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800635c:	e047      	b.n	80063ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800635e:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <vTaskSwitchContext+0xb8>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006364:	4b27      	ldr	r3, [pc, #156]	@ (8006404 <vTaskSwitchContext+0xbc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e011      	b.n	8006390 <vTaskSwitchContext+0x48>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <vTaskSwitchContext+0x42>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <vTaskSwitchContext+0x3e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b01      	subs	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	491d      	ldr	r1, [pc, #116]	@ (8006408 <vTaskSwitchContext+0xc0>)
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e3      	beq.n	800636c <vTaskSwitchContext+0x24>
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4a16      	ldr	r2, [pc, #88]	@ (8006408 <vTaskSwitchContext+0xc0>)
 80063b0:	4413      	add	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3308      	adds	r3, #8
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d104      	bne.n	80063d4 <vTaskSwitchContext+0x8c>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4a0c      	ldr	r2, [pc, #48]	@ (800640c <vTaskSwitchContext+0xc4>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4a09      	ldr	r2, [pc, #36]	@ (8006404 <vTaskSwitchContext+0xbc>)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063e4:	4b09      	ldr	r3, [pc, #36]	@ (800640c <vTaskSwitchContext+0xc4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3354      	adds	r3, #84	@ 0x54
 80063ea:	4a09      	ldr	r2, [pc, #36]	@ (8006410 <vTaskSwitchContext+0xc8>)
 80063ec:	6013      	str	r3, [r2, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	200011d8 	.word	0x200011d8
 8006400:	200011c4 	.word	0x200011c4
 8006404:	200011b8 	.word	0x200011b8
 8006408:	20000ce0 	.word	0x20000ce0
 800640c:	20000cdc 	.word	0x20000cdc
 8006410:	20000010 	.word	0x20000010

08006414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800643c:	4b07      	ldr	r3, [pc, #28]	@ (800645c <vTaskPlaceOnEventList+0x48>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3318      	adds	r3, #24
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe fc7c 	bl	8004d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800644a:	2101      	movs	r1, #1
 800644c:	6838      	ldr	r0, [r7, #0]
 800644e:	f000 fa8d 	bl	800696c <prvAddCurrentTaskToDelayedList>
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000cdc 	.word	0x20000cdc

08006460 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	617b      	str	r3, [r7, #20]
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800648a:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3318      	adds	r3, #24
 8006490:	4619      	mov	r1, r3
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7fe fc31 	bl	8004cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68b8      	ldr	r0, [r7, #8]
 80064a8:	f000 fa60 	bl	800696c <prvAddCurrentTaskToDelayedList>
	}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000cdc 	.word	0x20000cdc

080064b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60fb      	str	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3318      	adds	r3, #24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fc62 	bl	8004db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <xTaskRemoveFromEventList+0xb0>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11d      	bne.n	8006534 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fc59 	bl	8004db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006506:	4b19      	ldr	r3, [pc, #100]	@ (800656c <xTaskRemoveFromEventList+0xb4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d903      	bls.n	8006516 <xTaskRemoveFromEventList+0x5e>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4a16      	ldr	r2, [pc, #88]	@ (800656c <xTaskRemoveFromEventList+0xb4>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a13      	ldr	r2, [pc, #76]	@ (8006570 <xTaskRemoveFromEventList+0xb8>)
 8006524:	441a      	add	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fe fbe4 	bl	8004cfa <vListInsertEnd>
 8006532:	e005      	b.n	8006540 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	3318      	adds	r3, #24
 8006538:	4619      	mov	r1, r3
 800653a:	480e      	ldr	r0, [pc, #56]	@ (8006574 <xTaskRemoveFromEventList+0xbc>)
 800653c:	f7fe fbdd 	bl	8004cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <xTaskRemoveFromEventList+0xc0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	429a      	cmp	r2, r3
 800654c:	d905      	bls.n	800655a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800654e:	2301      	movs	r3, #1
 8006550:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006552:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <xTaskRemoveFromEventList+0xc4>)
 8006554:	2201      	movs	r2, #1
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e001      	b.n	800655e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	200011d8 	.word	0x200011d8
 800656c:	200011b8 	.word	0x200011b8
 8006570:	20000ce0 	.word	0x20000ce0
 8006574:	20001170 	.word	0x20001170
 8006578:	20000cdc 	.word	0x20000cdc
 800657c:	200011c4 	.word	0x200011c4

08006580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006588:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <vTaskInternalSetTimeOutState+0x24>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <vTaskInternalSetTimeOutState+0x28>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	200011c8 	.word	0x200011c8
 80065a8:	200011b4 	.word	0x200011b4

080065ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	613b      	str	r3, [r7, #16]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60fb      	str	r3, [r7, #12]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065f2:	f000 fe61 	bl	80072b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065f6:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <xTaskCheckForTimeOut+0xc0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d102      	bne.n	8006616 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e023      	b.n	800665e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <xTaskCheckForTimeOut+0xc4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d007      	beq.n	8006632 <xTaskCheckForTimeOut+0x86>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e015      	b.n	800665e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	429a      	cmp	r2, r3
 800663a:	d20b      	bcs.n	8006654 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ff99 	bl	8006580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e004      	b.n	800665e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800665a:	2301      	movs	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800665e:	f000 fe5d 	bl	800731c <vPortExitCritical>

	return xReturn;
 8006662:	69fb      	ldr	r3, [r7, #28]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	200011b4 	.word	0x200011b4
 8006670:	200011c8 	.word	0x200011c8

08006674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006678:	4b03      	ldr	r3, [pc, #12]	@ (8006688 <vTaskMissedYield+0x14>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
}
 800667e:	bf00      	nop
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	200011c4 	.word	0x200011c4

0800668c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006694:	f000 f852 	bl	800673c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006698:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <prvIdleTask+0x28>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d9f9      	bls.n	8006694 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066a0:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <prvIdleTask+0x2c>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066b0:	e7f0      	b.n	8006694 <prvIdleTask+0x8>
 80066b2:	bf00      	nop
 80066b4:	20000ce0 	.word	0x20000ce0
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	e00c      	b.n	80066e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a12      	ldr	r2, [pc, #72]	@ (800671c <prvInitialiseTaskLists+0x60>)
 80066d4:	4413      	add	r3, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fae2 	bl	8004ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3301      	adds	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b37      	cmp	r3, #55	@ 0x37
 80066e6:	d9ef      	bls.n	80066c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066e8:	480d      	ldr	r0, [pc, #52]	@ (8006720 <prvInitialiseTaskLists+0x64>)
 80066ea:	f7fe fad9 	bl	8004ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ee:	480d      	ldr	r0, [pc, #52]	@ (8006724 <prvInitialiseTaskLists+0x68>)
 80066f0:	f7fe fad6 	bl	8004ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066f4:	480c      	ldr	r0, [pc, #48]	@ (8006728 <prvInitialiseTaskLists+0x6c>)
 80066f6:	f7fe fad3 	bl	8004ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066fa:	480c      	ldr	r0, [pc, #48]	@ (800672c <prvInitialiseTaskLists+0x70>)
 80066fc:	f7fe fad0 	bl	8004ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006700:	480b      	ldr	r0, [pc, #44]	@ (8006730 <prvInitialiseTaskLists+0x74>)
 8006702:	f7fe facd 	bl	8004ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006706:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <prvInitialiseTaskLists+0x78>)
 8006708:	4a05      	ldr	r2, [pc, #20]	@ (8006720 <prvInitialiseTaskLists+0x64>)
 800670a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800670c:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <prvInitialiseTaskLists+0x7c>)
 800670e:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <prvInitialiseTaskLists+0x68>)
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000ce0 	.word	0x20000ce0
 8006720:	20001140 	.word	0x20001140
 8006724:	20001154 	.word	0x20001154
 8006728:	20001170 	.word	0x20001170
 800672c:	20001184 	.word	0x20001184
 8006730:	2000119c 	.word	0x2000119c
 8006734:	20001168 	.word	0x20001168
 8006738:	2000116c 	.word	0x2000116c

0800673c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006742:	e019      	b.n	8006778 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006744:	f000 fdb8 	bl	80072b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006748:	4b10      	ldr	r3, [pc, #64]	@ (800678c <prvCheckTasksWaitingTermination+0x50>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fb2d 	bl	8004db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800675a:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <prvCheckTasksWaitingTermination+0x54>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	4a0b      	ldr	r2, [pc, #44]	@ (8006790 <prvCheckTasksWaitingTermination+0x54>)
 8006762:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <prvCheckTasksWaitingTermination+0x58>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	4a0a      	ldr	r2, [pc, #40]	@ (8006794 <prvCheckTasksWaitingTermination+0x58>)
 800676c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800676e:	f000 fdd5 	bl	800731c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f810 	bl	8006798 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006778:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <prvCheckTasksWaitingTermination+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e1      	bne.n	8006744 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20001184 	.word	0x20001184
 8006790:	200011b0 	.word	0x200011b0
 8006794:	20001198 	.word	0x20001198

08006798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3354      	adds	r3, #84	@ 0x54
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f891 	bl	80078cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d108      	bne.n	80067c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 ff67 	bl	800768c <vPortFree>
				vPortFree( pxTCB );
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 ff64 	bl	800768c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067c4:	e019      	b.n	80067fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d103      	bne.n	80067d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 ff5b 	bl	800768c <vPortFree>
	}
 80067d6:	e010      	b.n	80067fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d00b      	beq.n	80067fa <prvDeleteTCB+0x62>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	60fb      	str	r3, [r7, #12]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <prvDeleteTCB+0x5e>
	}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680a:	4b0f      	ldr	r3, [pc, #60]	@ (8006848 <prvResetNextTaskUnblockTime+0x44>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <prvResetNextTaskUnblockTime+0x14>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <prvResetNextTaskUnblockTime+0x16>
 8006818:	2300      	movs	r3, #0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800681e:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <prvResetNextTaskUnblockTime+0x48>)
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006826:	e008      	b.n	800683a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006828:	4b07      	ldr	r3, [pc, #28]	@ (8006848 <prvResetNextTaskUnblockTime+0x44>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4a05      	ldr	r2, [pc, #20]	@ (800684c <prvResetNextTaskUnblockTime+0x48>)
 8006838:	6013      	str	r3, [r2, #0]
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20001168 	.word	0x20001168
 800684c:	200011d0 	.word	0x200011d0

08006850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006856:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <xTaskGetSchedulerState+0x34>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800685e:	2301      	movs	r3, #1
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	e008      	b.n	8006876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006864:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <xTaskGetSchedulerState+0x38>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800686c:	2302      	movs	r3, #2
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	e001      	b.n	8006876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006876:	687b      	ldr	r3, [r7, #4]
	}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	200011bc 	.word	0x200011bc
 8006888:	200011d8 	.word	0x200011d8

0800688c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d058      	beq.n	8006954 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006960 <xTaskPriorityDisinherit+0xd4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d00b      	beq.n	80068c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	60bb      	str	r3, [r7, #8]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	1e5a      	subs	r2, r3, #1
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d02c      	beq.n	8006954 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d128      	bne.n	8006954 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fa54 	bl	8004db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <xTaskPriorityDisinherit+0xd8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <xTaskPriorityDisinherit+0xa8>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	4a0c      	ldr	r2, [pc, #48]	@ (8006964 <xTaskPriorityDisinherit+0xd8>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <xTaskPriorityDisinherit+0xdc>)
 8006942:	441a      	add	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7fe f9d5 	bl	8004cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006954:	697b      	ldr	r3, [r7, #20]
	}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000cdc 	.word	0x20000cdc
 8006964:	200011b8 	.word	0x200011b8
 8006968:	20000ce0 	.word	0x20000ce0

0800696c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006976:	4b21      	ldr	r3, [pc, #132]	@ (80069fc <prvAddCurrentTaskToDelayedList+0x90>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800697c:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0x94>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3304      	adds	r3, #4
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fa16 	bl	8004db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d10a      	bne.n	80069a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006996:	4b1a      	ldr	r3, [pc, #104]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4819      	ldr	r0, [pc, #100]	@ (8006a04 <prvAddCurrentTaskToDelayedList+0x98>)
 80069a0:	f7fe f9ab 	bl	8004cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069a4:	e026      	b.n	80069f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069ae:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d209      	bcs.n	80069d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069be:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f7fe f9b9 	bl	8004d42 <vListInsert>
}
 80069d0:	e010      	b.n	80069f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d2:	4b0e      	ldr	r3, [pc, #56]	@ (8006a0c <prvAddCurrentTaskToDelayedList+0xa0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0x94>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f7fe f9af 	bl	8004d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d202      	bcs.n	80069f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069ee:	4a08      	ldr	r2, [pc, #32]	@ (8006a10 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6013      	str	r3, [r2, #0]
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200011b4 	.word	0x200011b4
 8006a00:	20000cdc 	.word	0x20000cdc
 8006a04:	2000119c 	.word	0x2000119c
 8006a08:	2000116c 	.word	0x2000116c
 8006a0c:	20001168 	.word	0x20001168
 8006a10:	200011d0 	.word	0x200011d0

08006a14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	@ 0x28
 8006a18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a1e:	f000 fad9 	bl	8006fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a22:	4b1d      	ldr	r3, [pc, #116]	@ (8006a98 <xTimerCreateTimerTask+0x84>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d021      	beq.n	8006a6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe f915 	bl	8004c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	9202      	str	r2, [sp, #8]
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2300      	movs	r3, #0
 8006a52:	460a      	mov	r2, r1
 8006a54:	4911      	ldr	r1, [pc, #68]	@ (8006a9c <xTimerCreateTimerTask+0x88>)
 8006a56:	4812      	ldr	r0, [pc, #72]	@ (8006aa0 <xTimerCreateTimerTask+0x8c>)
 8006a58:	f7fe ff8e 	bl	8005978 <xTaskCreateStatic>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <xTimerCreateTimerTask+0x90>)
 8006a60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <xTimerCreateTimerTask+0x90>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	613b      	str	r3, [r7, #16]
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	e7fd      	b.n	8006a88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a8c:	697b      	ldr	r3, [r7, #20]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	2000120c 	.word	0x2000120c
 8006a9c:	08007ae0 	.word	0x08007ae0
 8006aa0:	08006bc9 	.word	0x08006bc9
 8006aa4:	20001210 	.word	0x20001210

08006aa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	@ 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	623b      	str	r3, [r7, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ad8:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <xTimerGenericCommand+0x98>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02a      	beq.n	8006b36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	dc18      	bgt.n	8006b24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006af2:	f7ff fead 	bl	8006850 <xTaskGetSchedulerState>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d109      	bne.n	8006b10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006afc:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <xTimerGenericCommand+0x98>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	f107 0110 	add.w	r1, r7, #16
 8006b04:	2300      	movs	r3, #0
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	f7fe fac6 	bl	8005098 <xQueueGenericSend>
 8006b0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b0e:	e012      	b.n	8006b36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b10:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <xTimerGenericCommand+0x98>)
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	f107 0110 	add.w	r1, r7, #16
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f7fe fabc 	bl	8005098 <xQueueGenericSend>
 8006b20:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b22:	e008      	b.n	8006b36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <xTimerGenericCommand+0x98>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	f107 0110 	add.w	r1, r7, #16
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	f7fe fbb4 	bl	800529c <xQueueGenericSendFromISR>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3728      	adds	r7, #40	@ 0x28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	2000120c 	.word	0x2000120c

08006b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <prvProcessExpiredTimer+0x80>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe f929 	bl	8004db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d123      	bne.n	8006bb2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	18d1      	adds	r1, r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	6978      	ldr	r0, [r7, #20]
 8006b78:	f000 f8cc 	bl	8006d14 <prvInsertTimerInActiveList>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	2300      	movs	r3, #0
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6978      	ldr	r0, [r7, #20]
 8006b8e:	f7ff ff8b 	bl	8006aa8 <xTimerGenericCommand>
 8006b92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	4798      	blx	r3
}
 8006bba:	bf00      	nop
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20001204 	.word	0x20001204

08006bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bd0:	f107 0308 	add.w	r3, r7, #8
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f859 	bl	8006c8c <prvGetNextExpireTime>
 8006bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f805 	bl	8006bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006be6:	f000 f8d7 	bl	8006d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bea:	bf00      	nop
 8006bec:	e7f0      	b.n	8006bd0 <prvTimerTask+0x8>
	...

08006bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bfa:	f7ff fa29 	bl	8006050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bfe:	f107 0308 	add.w	r3, r7, #8
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f866 	bl	8006cd4 <prvSampleTimeNow>
 8006c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d130      	bne.n	8006c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <prvProcessTimerOrBlockTask+0x3c>
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d806      	bhi.n	8006c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c1e:	f7ff fa25 	bl	800606c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff ff8d 	bl	8006b44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c2a:	e024      	b.n	8006c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d008      	beq.n	8006c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c32:	4b13      	ldr	r3, [pc, #76]	@ (8006c80 <prvProcessTimerOrBlockTask+0x90>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c44:	4b0f      	ldr	r3, [pc, #60]	@ (8006c84 <prvProcessTimerOrBlockTask+0x94>)
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7fe fe5d 	bl	8005910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c56:	f7ff fa09 	bl	800606c <xTaskResumeAll>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c60:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <prvProcessTimerOrBlockTask+0x98>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
}
 8006c70:	e001      	b.n	8006c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c72:	f7ff f9fb 	bl	800606c <xTaskResumeAll>
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20001208 	.word	0x20001208
 8006c84:	2000120c 	.word	0x2000120c
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c94:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <prvGetNextExpireTime+0x44>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cb2:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <prvGetNextExpireTime+0x44>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e001      	b.n	8006cc2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20001204 	.word	0x20001204

08006cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cdc:	f7ff fa64 	bl	80061a8 <xTaskGetTickCount>
 8006ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <prvSampleTimeNow+0x3c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d205      	bcs.n	8006cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cec:	f000 f910 	bl	8006f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cfe:	4a04      	ldr	r2, [pc, #16]	@ (8006d10 <prvSampleTimeNow+0x3c>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d04:	68fb      	ldr	r3, [r7, #12]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20001214 	.word	0x20001214

08006d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d812      	bhi.n	8006d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d302      	bcc.n	8006d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e01b      	b.n	8006d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <prvInsertTimerInActiveList+0x7c>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7fd fff2 	bl	8004d42 <vListInsert>
 8006d5e:	e012      	b.n	8006d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d206      	bcs.n	8006d76 <prvInsertTimerInActiveList+0x62>
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e007      	b.n	8006d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <prvInsertTimerInActiveList+0x80>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7fd ffde 	bl	8004d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d86:	697b      	ldr	r3, [r7, #20]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20001208 	.word	0x20001208
 8006d94:	20001204 	.word	0x20001204

08006d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08e      	sub	sp, #56	@ 0x38
 8006d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d9e:	e0a5      	b.n	8006eec <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da19      	bge.n	8006dda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	3304      	adds	r3, #4
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	61fb      	str	r3, [r7, #28]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd0:	6850      	ldr	r0, [r2, #4]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd4:	6892      	ldr	r2, [r2, #8]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f2c0 8085 	blt.w	8006eec <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd ffde 	bl	8004db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006df8:	463b      	mov	r3, r7
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff ff6a 	bl	8006cd4 <prvSampleTimeNow>
 8006e00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d86c      	bhi.n	8006ee2 <prvProcessReceivedCommands+0x14a>
 8006e08:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <prvProcessReceivedCommands+0x78>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006ee3 	.word	0x08006ee3
 8006e20:	08006e97 	.word	0x08006e97
 8006e24:	08006ed1 	.word	0x08006ed1
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e39 	.word	0x08006e39
 8006e30:	08006ee3 	.word	0x08006ee3
 8006e34:	08006e97 	.word	0x08006e97
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	18d1      	adds	r1, r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e46:	f7ff ff65 	bl	8006d14 <prvInsertTimerInActiveList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d04a      	beq.n	8006ee6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d142      	bne.n	8006ee6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	441a      	add	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e72:	f7ff fe19 	bl	8006aa8 <xTimerGenericCommand>
 8006e76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d133      	bne.n	8006ee6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61bb      	str	r3, [r7, #24]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	617b      	str	r3, [r7, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	18d1      	adds	r1, r2, r3
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eca:	f7ff ff23 	bl	8006d14 <prvInsertTimerInActiveList>
					break;
 8006ece:	e00d      	b.n	8006eec <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d107      	bne.n	8006eea <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006edc:	f000 fbd6 	bl	800768c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ee0:	e003      	b.n	8006eea <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <prvProcessReceivedCommands+0x154>
					break;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <prvProcessReceivedCommands+0x154>
					break;
 8006eea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eec:	4b07      	ldr	r3, [pc, #28]	@ (8006f0c <prvProcessReceivedCommands+0x174>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	1d39      	adds	r1, r7, #4
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fa6d 	bl	80053d4 <xQueueReceive>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f47f af4f 	bne.w	8006da0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3730      	adds	r7, #48	@ 0x30
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	2000120c 	.word	0x2000120c

08006f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f16:	e046      	b.n	8006fa6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f18:	4b2c      	ldr	r3, [pc, #176]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f22:	4b2a      	ldr	r3, [pc, #168]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fd ff3f 	bl	8004db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d12f      	bne.n	8006fa6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d90e      	bls.n	8006f76 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f64:	4b19      	ldr	r3, [pc, #100]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fd fee7 	bl	8004d42 <vListInsert>
 8006f74:	e017      	b.n	8006fa6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f76:	2300      	movs	r3, #0
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7ff fd91 	bl	8006aa8 <xTimerGenericCommand>
 8006f86:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1b3      	bne.n	8006f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <prvSwitchTimerLists+0xc0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a04      	ldr	r2, [pc, #16]	@ (8006fcc <prvSwitchTimerLists+0xbc>)
 8006fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fbe:	4a04      	ldr	r2, [pc, #16]	@ (8006fd0 <prvSwitchTimerLists+0xc0>)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20001204 	.word	0x20001204
 8006fd0:	20001208 	.word	0x20001208

08006fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fda:	f000 f96d 	bl	80072b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fde:	4b15      	ldr	r3, [pc, #84]	@ (8007034 <prvCheckForValidListAndQueue+0x60>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d120      	bne.n	8007028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fe6:	4814      	ldr	r0, [pc, #80]	@ (8007038 <prvCheckForValidListAndQueue+0x64>)
 8006fe8:	f7fd fe5a 	bl	8004ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fec:	4813      	ldr	r0, [pc, #76]	@ (800703c <prvCheckForValidListAndQueue+0x68>)
 8006fee:	f7fd fe57 	bl	8004ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ff2:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <prvCheckForValidListAndQueue+0x6c>)
 8006ff4:	4a10      	ldr	r2, [pc, #64]	@ (8007038 <prvCheckForValidListAndQueue+0x64>)
 8006ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ff8:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <prvCheckForValidListAndQueue+0x70>)
 8006ffa:	4a10      	ldr	r2, [pc, #64]	@ (800703c <prvCheckForValidListAndQueue+0x68>)
 8006ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ffe:	2300      	movs	r3, #0
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <prvCheckForValidListAndQueue+0x74>)
 8007004:	4a11      	ldr	r2, [pc, #68]	@ (800704c <prvCheckForValidListAndQueue+0x78>)
 8007006:	2110      	movs	r1, #16
 8007008:	200a      	movs	r0, #10
 800700a:	f7fd ff67 	bl	8004edc <xQueueGenericCreateStatic>
 800700e:	4603      	mov	r3, r0
 8007010:	4a08      	ldr	r2, [pc, #32]	@ (8007034 <prvCheckForValidListAndQueue+0x60>)
 8007012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007014:	4b07      	ldr	r3, [pc, #28]	@ (8007034 <prvCheckForValidListAndQueue+0x60>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <prvCheckForValidListAndQueue+0x60>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	490b      	ldr	r1, [pc, #44]	@ (8007050 <prvCheckForValidListAndQueue+0x7c>)
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fc4a 	bl	80058bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007028:	f000 f978 	bl	800731c <vPortExitCritical>
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	2000120c 	.word	0x2000120c
 8007038:	200011dc 	.word	0x200011dc
 800703c:	200011f0 	.word	0x200011f0
 8007040:	20001204 	.word	0x20001204
 8007044:	20001208 	.word	0x20001208
 8007048:	200012b8 	.word	0x200012b8
 800704c:	20001218 	.word	0x20001218
 8007050:	08007ae8 	.word	0x08007ae8

08007054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b04      	subs	r3, #4
 8007064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800706c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3b04      	subs	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3b04      	subs	r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007084:	4a0c      	ldr	r2, [pc, #48]	@ (80070b8 <pxPortInitialiseStack+0x64>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b14      	subs	r3, #20
 800708e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b04      	subs	r3, #4
 800709a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f06f 0202 	mvn.w	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b20      	subs	r3, #32
 80070a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	080070bd 	.word	0x080070bd

080070bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070c6:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <prvTaskExitError+0x58>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d00b      	beq.n	80070e8 <prvTaskExitError+0x2c>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <prvTaskExitError+0x28>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60bb      	str	r3, [r7, #8]
}
 80070fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070fc:	bf00      	nop
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0fc      	beq.n	80070fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c
	...

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	4770      	bx	lr
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst2>:
 8007140:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007148:	4808      	ldr	r0, [pc, #32]	@ (800716c <prvPortStartFirstTask+0x24>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8814 	msr	CONTROL, r0
 800715a:	b662      	cpsie	i
 800715c:	b661      	cpsie	f
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	df00      	svc	0
 8007168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800716a:	bf00      	nop
 800716c:	e000ed08 	.word	0xe000ed08

08007170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007176:	4b47      	ldr	r3, [pc, #284]	@ (8007294 <xPortStartScheduler+0x124>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a47      	ldr	r2, [pc, #284]	@ (8007298 <xPortStartScheduler+0x128>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d10b      	bne.n	8007198 <xPortStartScheduler+0x28>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007198:	4b3e      	ldr	r3, [pc, #248]	@ (8007294 <xPortStartScheduler+0x124>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a3f      	ldr	r2, [pc, #252]	@ (800729c <xPortStartScheduler+0x12c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d10b      	bne.n	80071ba <xPortStartScheduler+0x4a>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	613b      	str	r3, [r7, #16]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071ba:	4b39      	ldr	r3, [pc, #228]	@ (80072a0 <xPortStartScheduler+0x130>)
 80071bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	22ff      	movs	r2, #255	@ 0xff
 80071ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	4b31      	ldr	r3, [pc, #196]	@ (80072a4 <xPortStartScheduler+0x134>)
 80071e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071e2:	4b31      	ldr	r3, [pc, #196]	@ (80072a8 <xPortStartScheduler+0x138>)
 80071e4:	2207      	movs	r2, #7
 80071e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071e8:	e009      	b.n	80071fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80071ea:	4b2f      	ldr	r3, [pc, #188]	@ (80072a8 <xPortStartScheduler+0x138>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	4a2d      	ldr	r2, [pc, #180]	@ (80072a8 <xPortStartScheduler+0x138>)
 80071f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007206:	2b80      	cmp	r3, #128	@ 0x80
 8007208:	d0ef      	beq.n	80071ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800720a:	4b27      	ldr	r3, [pc, #156]	@ (80072a8 <xPortStartScheduler+0x138>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1c3 0307 	rsb	r3, r3, #7
 8007212:	2b04      	cmp	r3, #4
 8007214:	d00b      	beq.n	800722e <xPortStartScheduler+0xbe>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60bb      	str	r3, [r7, #8]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800722e:	4b1e      	ldr	r3, [pc, #120]	@ (80072a8 <xPortStartScheduler+0x138>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	4a1c      	ldr	r2, [pc, #112]	@ (80072a8 <xPortStartScheduler+0x138>)
 8007236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007238:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <xPortStartScheduler+0x138>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007240:	4a19      	ldr	r2, [pc, #100]	@ (80072a8 <xPortStartScheduler+0x138>)
 8007242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800724c:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <xPortStartScheduler+0x13c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a16      	ldr	r2, [pc, #88]	@ (80072ac <xPortStartScheduler+0x13c>)
 8007252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007258:	4b14      	ldr	r3, [pc, #80]	@ (80072ac <xPortStartScheduler+0x13c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a13      	ldr	r2, [pc, #76]	@ (80072ac <xPortStartScheduler+0x13c>)
 800725e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007264:	f000 f8da 	bl	800741c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007268:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <xPortStartScheduler+0x140>)
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800726e:	f000 f8f9 	bl	8007464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <xPortStartScheduler+0x144>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a0f      	ldr	r2, [pc, #60]	@ (80072b4 <xPortStartScheduler+0x144>)
 8007278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800727c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800727e:	f7ff ff63 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007282:	f7ff f861 	bl	8006348 <vTaskSwitchContext>
	prvTaskExitError();
 8007286:	f7ff ff19 	bl	80070bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	e000ed00 	.word	0xe000ed00
 8007298:	410fc271 	.word	0x410fc271
 800729c:	410fc270 	.word	0x410fc270
 80072a0:	e000e400 	.word	0xe000e400
 80072a4:	20001308 	.word	0x20001308
 80072a8:	2000130c 	.word	0x2000130c
 80072ac:	e000ed20 	.word	0xe000ed20
 80072b0:	2000000c 	.word	0x2000000c
 80072b4:	e000ef34 	.word	0xe000ef34

080072b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072d2:	4b10      	ldr	r3, [pc, #64]	@ (8007314 <vPortEnterCritical+0x5c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007314 <vPortEnterCritical+0x5c>)
 80072da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <vPortEnterCritical+0x5c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <vPortEnterCritical+0x60>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <vPortEnterCritical+0x4e>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	603b      	str	r3, [r7, #0]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <vPortEnterCritical+0x4a>
	}
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000000c 	.word	0x2000000c
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007322:	4b12      	ldr	r3, [pc, #72]	@ (800736c <vPortExitCritical+0x50>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <vPortExitCritical+0x26>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	607b      	str	r3, [r7, #4]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007342:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <vPortExitCritical+0x50>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3b01      	subs	r3, #1
 8007348:	4a08      	ldr	r2, [pc, #32]	@ (800736c <vPortExitCritical+0x50>)
 800734a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800734c:	4b07      	ldr	r3, [pc, #28]	@ (800736c <vPortExitCritical+0x50>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <vPortExitCritical+0x44>
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
}
 800735e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	2000000c 	.word	0x2000000c

08007370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007370:	f3ef 8009 	mrs	r0, PSP
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4b15      	ldr	r3, [pc, #84]	@ (80073d0 <pxCurrentTCBConst>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	f01e 0f10 	tst.w	lr, #16
 8007380:	bf08      	it	eq
 8007382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	6010      	str	r0, [r2, #0]
 800738c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007394:	f380 8811 	msr	BASEPRI, r0
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f7fe ffd2 	bl	8006348 <vTaskSwitchContext>
 80073a4:	f04f 0000 	mov.w	r0, #0
 80073a8:	f380 8811 	msr	BASEPRI, r0
 80073ac:	bc09      	pop	{r0, r3}
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	f01e 0f10 	tst.w	lr, #16
 80073ba:	bf08      	it	eq
 80073bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073c0:	f380 8809 	msr	PSP, r0
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst>:
 80073d0:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073f2:	f7fe fee9 	bl	80061c8 <xTaskIncrementTick>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <SysTick_Handler+0x40>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007426:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <vPortSetupTimerInterrupt+0x38>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800742c:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <vPortSetupTimerInterrupt+0x3c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0a      	ldr	r2, [pc, #40]	@ (800745c <vPortSetupTimerInterrupt+0x40>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a09      	ldr	r2, [pc, #36]	@ (8007460 <vPortSetupTimerInterrupt+0x44>)
 800743a:	3b01      	subs	r3, #1
 800743c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800743e:	4b04      	ldr	r3, [pc, #16]	@ (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	e000e010 	.word	0xe000e010
 8007454:	e000e018 	.word	0xe000e018
 8007458:	20000000 	.word	0x20000000
 800745c:	10624dd3 	.word	0x10624dd3
 8007460:	e000e014 	.word	0xe000e014

08007464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007474 <vPortEnableVFP+0x10>
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800746e:	6001      	str	r1, [r0, #0]
 8007470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007472:	bf00      	nop
 8007474:	e000ed88 	.word	0xe000ed88

08007478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800747e:	f3ef 8305 	mrs	r3, IPSR
 8007482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d915      	bls.n	80074b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <vPortValidateInterruptPriority+0x74>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007494:	4b16      	ldr	r3, [pc, #88]	@ (80074f0 <vPortValidateInterruptPriority+0x78>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	7afa      	ldrb	r2, [r7, #11]
 800749a:	429a      	cmp	r2, r3
 800749c:	d20b      	bcs.n	80074b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	e7fd      	b.n	80074b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <vPortValidateInterruptPriority+0x7c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074be:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <vPortValidateInterruptPriority+0x80>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90b      	bls.n	80074de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	603b      	str	r3, [r7, #0]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <vPortValidateInterruptPriority+0x62>
	}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000e3f0 	.word	0xe000e3f0
 80074f0:	20001308 	.word	0x20001308
 80074f4:	e000ed0c 	.word	0xe000ed0c
 80074f8:	2000130c 	.word	0x2000130c

080074fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	@ 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007508:	f7fe fda2 	bl	8006050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800750c:	4b5a      	ldr	r3, [pc, #360]	@ (8007678 <pvPortMalloc+0x17c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007514:	f000 f916 	bl	8007744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007518:	4b58      	ldr	r3, [pc, #352]	@ (800767c <pvPortMalloc+0x180>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 8090 	bne.w	8007646 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01e      	beq.n	800756a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800752c:	2208      	movs	r2, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d015      	beq.n	800756a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f023 0307 	bic.w	r3, r3, #7
 8007544:	3308      	adds	r3, #8
 8007546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <pvPortMalloc+0x6e>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	617b      	str	r3, [r7, #20]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d06a      	beq.n	8007646 <pvPortMalloc+0x14a>
 8007570:	4b43      	ldr	r3, [pc, #268]	@ (8007680 <pvPortMalloc+0x184>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d865      	bhi.n	8007646 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800757a:	4b42      	ldr	r3, [pc, #264]	@ (8007684 <pvPortMalloc+0x188>)
 800757c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800757e:	4b41      	ldr	r3, [pc, #260]	@ (8007684 <pvPortMalloc+0x188>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007584:	e004      	b.n	8007590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <pvPortMalloc+0xa6>
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f1      	bne.n	8007586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075a2:	4b35      	ldr	r3, [pc, #212]	@ (8007678 <pvPortMalloc+0x17c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d04c      	beq.n	8007646 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2208      	movs	r2, #8
 80075b2:	4413      	add	r3, r2
 80075b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad2      	subs	r2, r2, r3
 80075c6:	2308      	movs	r3, #8
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d920      	bls.n	8007610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4413      	add	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <pvPortMalloc+0xfc>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	613b      	str	r3, [r7, #16]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	1ad2      	subs	r2, r2, r3
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800760a:	69b8      	ldr	r0, [r7, #24]
 800760c:	f000 f8fc 	bl	8007808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <pvPortMalloc+0x184>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <pvPortMalloc+0x184>)
 800761c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800761e:	4b18      	ldr	r3, [pc, #96]	@ (8007680 <pvPortMalloc+0x184>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b19      	ldr	r3, [pc, #100]	@ (8007688 <pvPortMalloc+0x18c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d203      	bcs.n	8007632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800762a:	4b15      	ldr	r3, [pc, #84]	@ (8007680 <pvPortMalloc+0x184>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a16      	ldr	r2, [pc, #88]	@ (8007688 <pvPortMalloc+0x18c>)
 8007630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4b11      	ldr	r3, [pc, #68]	@ (800767c <pvPortMalloc+0x180>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	431a      	orrs	r2, r3
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007646:	f7fe fd11 	bl	800606c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <pvPortMalloc+0x170>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <pvPortMalloc+0x16c>
	return pvReturn;
 800766c:	69fb      	ldr	r3, [r7, #28]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3728      	adds	r7, #40	@ 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20002318 	.word	0x20002318
 800767c:	20002324 	.word	0x20002324
 8007680:	2000231c 	.word	0x2000231c
 8007684:	20002310 	.word	0x20002310
 8007688:	20002320 	.word	0x20002320

0800768c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d04a      	beq.n	8007734 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800769e:	2308      	movs	r3, #8
 80076a0:	425b      	negs	r3, r3
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	4b22      	ldr	r3, [pc, #136]	@ (800773c <vPortFree+0xb0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <vPortFree+0x46>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	60fb      	str	r3, [r7, #12]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <vPortFree+0x66>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60bb      	str	r3, [r7, #8]
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	e7fd      	b.n	80076ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4b11      	ldr	r3, [pc, #68]	@ (800773c <vPortFree+0xb0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d019      	beq.n	8007734 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b0b      	ldr	r3, [pc, #44]	@ (800773c <vPortFree+0xb0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007718:	f7fe fc9a 	bl	8006050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <vPortFree+0xb4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4413      	add	r3, r2
 8007726:	4a06      	ldr	r2, [pc, #24]	@ (8007740 <vPortFree+0xb4>)
 8007728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800772a:	6938      	ldr	r0, [r7, #16]
 800772c:	f000 f86c 	bl	8007808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007730:	f7fe fc9c 	bl	800606c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20002324 	.word	0x20002324
 8007740:	2000231c 	.word	0x2000231c

08007744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800774a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800774e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007750:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <prvHeapInit+0xac>)
 8007752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3307      	adds	r3, #7
 8007762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	4a1f      	ldr	r2, [pc, #124]	@ (80077f0 <prvHeapInit+0xac>)
 8007774:	4413      	add	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800777c:	4a1d      	ldr	r2, [pc, #116]	@ (80077f4 <prvHeapInit+0xb0>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007782:	4b1c      	ldr	r3, [pc, #112]	@ (80077f4 <prvHeapInit+0xb0>)
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4413      	add	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007790:	2208      	movs	r2, #8
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0307 	bic.w	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a15      	ldr	r2, [pc, #84]	@ (80077f8 <prvHeapInit+0xb4>)
 80077a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077a6:	4b14      	ldr	r3, [pc, #80]	@ (80077f8 <prvHeapInit+0xb4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ae:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <prvHeapInit+0xb4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvHeapInit+0xb4>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <prvHeapInit+0xb8>)
 80077d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <prvHeapInit+0xbc>)
 80077da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077dc:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <prvHeapInit+0xc0>)
 80077de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20001310 	.word	0x20001310
 80077f4:	20002310 	.word	0x20002310
 80077f8:	20002318 	.word	0x20002318
 80077fc:	20002320 	.word	0x20002320
 8007800:	2000231c 	.word	0x2000231c
 8007804:	20002324 	.word	0x20002324

08007808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007810:	4b28      	ldr	r3, [pc, #160]	@ (80078b4 <prvInsertBlockIntoFreeList+0xac>)
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e002      	b.n	800781c <prvInsertBlockIntoFreeList+0x14>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d8f7      	bhi.n	8007816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d108      	bne.n	800784a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	441a      	add	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d118      	bne.n	8007890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b15      	ldr	r3, [pc, #84]	@ (80078b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d00d      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e008      	b.n	8007898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007886:	4b0c      	ldr	r3, [pc, #48]	@ (80078b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e003      	b.n	8007898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d002      	beq.n	80078a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20002310 	.word	0x20002310
 80078b8:	20002318 	.word	0x20002318

080078bc <memset>:
 80078bc:	4402      	add	r2, r0
 80078be:	4603      	mov	r3, r0
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d100      	bne.n	80078c6 <memset+0xa>
 80078c4:	4770      	bx	lr
 80078c6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ca:	e7f9      	b.n	80078c0 <memset+0x4>

080078cc <_reclaim_reent>:
 80078cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007984 <_reclaim_reent+0xb8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4283      	cmp	r3, r0
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	d053      	beq.n	8007980 <_reclaim_reent+0xb4>
 80078d8:	69c3      	ldr	r3, [r0, #28]
 80078da:	b31b      	cbz	r3, 8007924 <_reclaim_reent+0x58>
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	b163      	cbz	r3, 80078fa <_reclaim_reent+0x2e>
 80078e0:	2500      	movs	r5, #0
 80078e2:	69e3      	ldr	r3, [r4, #28]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	5959      	ldr	r1, [r3, r5]
 80078e8:	b9b1      	cbnz	r1, 8007918 <_reclaim_reent+0x4c>
 80078ea:	3504      	adds	r5, #4
 80078ec:	2d80      	cmp	r5, #128	@ 0x80
 80078ee:	d1f8      	bne.n	80078e2 <_reclaim_reent+0x16>
 80078f0:	69e3      	ldr	r3, [r4, #28]
 80078f2:	4620      	mov	r0, r4
 80078f4:	68d9      	ldr	r1, [r3, #12]
 80078f6:	f000 f87b 	bl	80079f0 <_free_r>
 80078fa:	69e3      	ldr	r3, [r4, #28]
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	b111      	cbz	r1, 8007906 <_reclaim_reent+0x3a>
 8007900:	4620      	mov	r0, r4
 8007902:	f000 f875 	bl	80079f0 <_free_r>
 8007906:	69e3      	ldr	r3, [r4, #28]
 8007908:	689d      	ldr	r5, [r3, #8]
 800790a:	b15d      	cbz	r5, 8007924 <_reclaim_reent+0x58>
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	682d      	ldr	r5, [r5, #0]
 8007912:	f000 f86d 	bl	80079f0 <_free_r>
 8007916:	e7f8      	b.n	800790a <_reclaim_reent+0x3e>
 8007918:	680e      	ldr	r6, [r1, #0]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f868 	bl	80079f0 <_free_r>
 8007920:	4631      	mov	r1, r6
 8007922:	e7e1      	b.n	80078e8 <_reclaim_reent+0x1c>
 8007924:	6961      	ldr	r1, [r4, #20]
 8007926:	b111      	cbz	r1, 800792e <_reclaim_reent+0x62>
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f861 	bl	80079f0 <_free_r>
 800792e:	69e1      	ldr	r1, [r4, #28]
 8007930:	b111      	cbz	r1, 8007938 <_reclaim_reent+0x6c>
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f85c 	bl	80079f0 <_free_r>
 8007938:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800793a:	b111      	cbz	r1, 8007942 <_reclaim_reent+0x76>
 800793c:	4620      	mov	r0, r4
 800793e:	f000 f857 	bl	80079f0 <_free_r>
 8007942:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007944:	b111      	cbz	r1, 800794c <_reclaim_reent+0x80>
 8007946:	4620      	mov	r0, r4
 8007948:	f000 f852 	bl	80079f0 <_free_r>
 800794c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800794e:	b111      	cbz	r1, 8007956 <_reclaim_reent+0x8a>
 8007950:	4620      	mov	r0, r4
 8007952:	f000 f84d 	bl	80079f0 <_free_r>
 8007956:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007958:	b111      	cbz	r1, 8007960 <_reclaim_reent+0x94>
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f848 	bl	80079f0 <_free_r>
 8007960:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007962:	b111      	cbz	r1, 800796a <_reclaim_reent+0x9e>
 8007964:	4620      	mov	r0, r4
 8007966:	f000 f843 	bl	80079f0 <_free_r>
 800796a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800796c:	b111      	cbz	r1, 8007974 <_reclaim_reent+0xa8>
 800796e:	4620      	mov	r0, r4
 8007970:	f000 f83e 	bl	80079f0 <_free_r>
 8007974:	6a23      	ldr	r3, [r4, #32]
 8007976:	b11b      	cbz	r3, 8007980 <_reclaim_reent+0xb4>
 8007978:	4620      	mov	r0, r4
 800797a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800797e:	4718      	bx	r3
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	bf00      	nop
 8007984:	20000010 	.word	0x20000010

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	@ (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	@ (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	@ (80079cc <__libc_init_array+0x44>)
 800799c:	f000 f87e 	bl	8007a9c <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08007bac 	.word	0x08007bac
 80079c4:	08007bac 	.word	0x08007bac
 80079c8:	08007bac 	.word	0x08007bac
 80079cc:	08007bb0 	.word	0x08007bb0

080079d0 <__retarget_lock_acquire_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_release_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <memcpy>:
 80079d4:	440a      	add	r2, r1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079dc:	d100      	bne.n	80079e0 <memcpy+0xc>
 80079de:	4770      	bx	lr
 80079e0:	b510      	push	{r4, lr}
 80079e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ea:	4291      	cmp	r1, r2
 80079ec:	d1f9      	bne.n	80079e2 <memcpy+0xe>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <_free_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4605      	mov	r5, r0
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d041      	beq.n	8007a7c <_free_r+0x8c>
 80079f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079fc:	1f0c      	subs	r4, r1, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bfb8      	it	lt
 8007a02:	18e4      	addlt	r4, r4, r3
 8007a04:	f000 f83e 	bl	8007a84 <__malloc_lock>
 8007a08:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <_free_r+0x90>)
 8007a0a:	6813      	ldr	r3, [r2, #0]
 8007a0c:	b933      	cbnz	r3, 8007a1c <_free_r+0x2c>
 8007a0e:	6063      	str	r3, [r4, #4]
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	4628      	mov	r0, r5
 8007a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a18:	f000 b83a 	b.w	8007a90 <__malloc_unlock>
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	d908      	bls.n	8007a32 <_free_r+0x42>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	1821      	adds	r1, r4, r0
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf01      	itttt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	1809      	addeq	r1, r1, r0
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	e7ed      	b.n	8007a0e <_free_r+0x1e>
 8007a32:	461a      	mov	r2, r3
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b10b      	cbz	r3, 8007a3c <_free_r+0x4c>
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d9fa      	bls.n	8007a32 <_free_r+0x42>
 8007a3c:	6811      	ldr	r1, [r2, #0]
 8007a3e:	1850      	adds	r0, r2, r1
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	d10b      	bne.n	8007a5c <_free_r+0x6c>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	4401      	add	r1, r0
 8007a48:	1850      	adds	r0, r2, r1
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	d1e0      	bne.n	8007a12 <_free_r+0x22>
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	6053      	str	r3, [r2, #4]
 8007a56:	4408      	add	r0, r1
 8007a58:	6010      	str	r0, [r2, #0]
 8007a5a:	e7da      	b.n	8007a12 <_free_r+0x22>
 8007a5c:	d902      	bls.n	8007a64 <_free_r+0x74>
 8007a5e:	230c      	movs	r3, #12
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	e7d6      	b.n	8007a12 <_free_r+0x22>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	1821      	adds	r1, r4, r0
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf04      	itt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	6063      	str	r3, [r4, #4]
 8007a72:	bf04      	itt	eq
 8007a74:	1809      	addeq	r1, r1, r0
 8007a76:	6021      	streq	r1, [r4, #0]
 8007a78:	6054      	str	r4, [r2, #4]
 8007a7a:	e7ca      	b.n	8007a12 <_free_r+0x22>
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
 8007a7e:	bf00      	nop
 8007a80:	20002464 	.word	0x20002464

08007a84 <__malloc_lock>:
 8007a84:	4801      	ldr	r0, [pc, #4]	@ (8007a8c <__malloc_lock+0x8>)
 8007a86:	f7ff bfa3 	b.w	80079d0 <__retarget_lock_acquire_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20002460 	.word	0x20002460

08007a90 <__malloc_unlock>:
 8007a90:	4801      	ldr	r0, [pc, #4]	@ (8007a98 <__malloc_unlock+0x8>)
 8007a92:	f7ff bf9e 	b.w	80079d2 <__retarget_lock_release_recursive>
 8007a96:	bf00      	nop
 8007a98:	20002460 	.word	0x20002460

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
