
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007820  08007820  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007820  08007820  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00008820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007824  08007824  00008824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007828  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00002004  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002064  20002064  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ae7  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043f4  00000000  00000000  0002bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159e  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b0  00000000  00000000  0003309e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022290  00000000  00000000  0003714e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c794f  00000000  00000000  000593de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120d2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078c8  00000000  00000000  00120d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00128638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800773c 	.word	0x0800773c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800773c 	.word	0x0800773c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd0a 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83a 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9b0 	bl	8000590 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f89e 	bl	8000370 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f91c 	bl	8000470 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f988 	bl	800054c <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8d8 	bl	80003f0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f954 	bl	80004ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9ae 	bl	80045a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8000248:	4a0d      	ldr	r2, [pc, #52]	@ (8000280 <main+0x60>)
 800024a:	2101      	movs	r1, #1
 800024c:	2008      	movs	r0, #8
 800024e:	f004 fae9 	bl	8004824 <osMessageQueueNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a0b      	ldr	r2, [pc, #44]	@ (8000284 <main+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 8000258:	4a0b      	ldr	r2, [pc, #44]	@ (8000288 <main+0x68>)
 800025a:	2100      	movs	r1, #0
 800025c:	480b      	ldr	r0, [pc, #44]	@ (800028c <main+0x6c>)
 800025e:	f004 fa09 	bl	8004674 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <main+0x70>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of Receiver1 */
  Receiver1Handle = osThreadNew(StartReceiver1, NULL, &Receiver1_attributes);
 8000268:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <main+0x74>)
 800026a:	2100      	movs	r1, #0
 800026c:	480a      	ldr	r0, [pc, #40]	@ (8000298 <main+0x78>)
 800026e:	f004 fa01 	bl	8004674 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a09      	ldr	r2, [pc, #36]	@ (800029c <main+0x7c>)
 8000276:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000278:	f004 f9c8 	bl	800460c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x5c>
 8000280:	080077d0 	.word	0x080077d0
 8000284:	200004ec 	.word	0x200004ec
 8000288:	08007788 	.word	0x08007788
 800028c:	080006c1 	.word	0x080006c1
 8000290:	200004e4 	.word	0x200004e4
 8000294:	080077ac 	.word	0x080077ac
 8000298:	08000705 	.word	0x08000705
 800029c:	200004e8 	.word	0x200004e8

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b09e      	sub	sp, #120	@ 0x78
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002aa:	2228      	movs	r2, #40	@ 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f007 f954 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c4:	463b      	mov	r3, r7
 80002c6:	223c      	movs	r2, #60	@ 0x3c
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f007 f946 	bl	800755c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002d0:	2303      	movs	r3, #3
 80002d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002f4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f9fa 	bl	80016f4 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000306:	f000 fa37 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2302      	movs	r3, #2
 8000310:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800031a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000320:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000324:	2101      	movs	r1, #1
 8000326:	4618      	mov	r0, r3
 8000328:	f002 f9f2 	bl	8002710 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000332:	f000 fa21 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000336:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <SystemClock_Config+0xcc>)
 8000338:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800034a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	463b      	mov	r3, r7
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fc5a 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800035a:	f000 fa0d 	bl	8000778 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800035e:	f002 fb45 	bl	80029ec <HAL_RCC_EnableCSS>
}
 8000362:	bf00      	nop
 8000364:	3778      	adds	r7, #120	@ 0x78
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	00020062 	.word	0x00020062

08000370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <MX_I2C1_Init+0x74>)
 8000376:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <MX_I2C1_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_I2C1_Init+0x74>)
 800037c:	4a1b      	ldr	r2, [pc, #108]	@ (80003ec <MX_I2C1_Init+0x7c>)
 800037e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000386:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <MX_I2C1_Init+0x74>)
 8000388:	2201      	movs	r2, #1
 800038a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000392:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_I2C1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039e:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003aa:	480e      	ldr	r0, [pc, #56]	@ (80003e4 <MX_I2C1_Init+0x74>)
 80003ac:	f000 ffa9 	bl	8001302 <HAL_I2C_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003b6:	f000 f9df 	bl	8000778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ba:	2100      	movs	r1, #0
 80003bc:	4809      	ldr	r0, [pc, #36]	@ (80003e4 <MX_I2C1_Init+0x74>)
 80003be:	f001 f83b 	bl	8001438 <HAL_I2CEx_ConfigAnalogFilter>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003c8:	f000 f9d6 	bl	8000778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003cc:	2100      	movs	r1, #0
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_I2C1_Init+0x74>)
 80003d0:	f001 f87d 	bl	80014ce <HAL_I2CEx_ConfigDigitalFilter>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 f9cd 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000007c 	.word	0x2000007c
 80003e8:	40005400 	.word	0x40005400
 80003ec:	00201d2b 	.word	0x00201d2b

080003f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_I2C2_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000468 <MX_I2C2_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_I2C2_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <MX_I2C2_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_I2C2_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <MX_I2C2_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800042a:	480e      	ldr	r0, [pc, #56]	@ (8000464 <MX_I2C2_Init+0x74>)
 800042c:	f000 ff69 	bl	8001302 <HAL_I2C_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f99f 	bl	8000778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	2100      	movs	r1, #0
 800043c:	4809      	ldr	r0, [pc, #36]	@ (8000464 <MX_I2C2_Init+0x74>)
 800043e:	f000 fffb 	bl	8001438 <HAL_I2CEx_ConfigAnalogFilter>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 f996 	bl	8000778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800044c:	2100      	movs	r1, #0
 800044e:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000450:	f001 f83d 	bl	80014ce <HAL_I2CEx_ConfigDigitalFilter>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f98d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000d0 	.word	0x200000d0
 8000468:	40005800 	.word	0x40005800
 800046c:	00201d2b 	.word	0x00201d2b

08000470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <MX_SPI1_Init+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047a:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800047c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000482:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800048a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800048e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800049e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004a6:	2208      	movs	r2, #8
 80004a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004be:	2207      	movs	r2, #7
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004d0:	f002 fd48 	bl	8002f64 <HAL_SPI_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004da:	f000 f94d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000124 	.word	0x20000124
 80004e8:	40013000 	.word	0x40013000

080004ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 80004f2:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <MX_USART2_UART_Init+0x5c>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 80004f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <MX_USART2_UART_Init+0x58>)
 8000530:	f003 f872 	bl	8003618 <HAL_UART_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800053a:	f000 f91d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000188 	.word	0x20000188
 8000548:	40004400 	.word	0x40004400

0800054c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 8000552:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <MX_USB_PCD_Init+0x40>)
 8000554:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000556:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 8000558:	2208      	movs	r2, #8
 800055a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 800055e:	2202      	movs	r2, #2
 8000560:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000562:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 8000564:	2202      	movs	r2, #2
 8000566:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000568:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 800056a:	2200      	movs	r2, #0
 800056c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 8000570:	2200      	movs	r2, #0
 8000572:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <MX_USB_PCD_Init+0x3c>)
 8000576:	f000 fff6 	bl	8001566 <HAL_PCD_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000580:	f000 f8fa 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000210 	.word	0x20000210
 800058c:	40005c00 	.word	0x40005c00

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b39      	ldr	r3, [pc, #228]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b36      	ldr	r3, [pc, #216]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a35      	ldr	r2, [pc, #212]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a29      	ldr	r2, [pc, #164]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <MX_GPIO_Init+0x108>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_GPIO_Init+0x108>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a23      	ldr	r2, [pc, #140]	@ (8000698 <MX_GPIO_Init+0x108>)
 800060c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_GPIO_Init+0x108>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800061e:	2200      	movs	r2, #0
 8000620:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000624:	481d      	ldr	r0, [pc, #116]	@ (800069c <MX_GPIO_Init+0x10c>)
 8000626:	f000 fe17 	bl	8001258 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 800062a:	2336      	movs	r3, #54	@ 0x36
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4817      	ldr	r0, [pc, #92]	@ (800069c <MX_GPIO_Init+0x10c>)
 8000640:	f000 fc90 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000644:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000648:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	480f      	ldr	r0, [pc, #60]	@ (800069c <MX_GPIO_Init+0x10c>)
 800065e:	f000 fc81 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000666:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067a:	f000 fc73 	bl	8000f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2105      	movs	r1, #5
 8000682:	2006      	movs	r0, #6
 8000684:	f000 fbc8 	bl	8000e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000688:	2006      	movs	r0, #6
 800068a:	f000 fbe1 	bl	8000e50 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	@ 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	48001000 	.word	0x48001000

080006a0 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd8f 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 80006b2:	200a      	movs	r0, #10
 80006b4:	f7ff fd8c 	bl	80001d0 <ITM_SendChar>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t msg = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
      Task_action('s');
 80006cc:	2073      	movs	r0, #115	@ 0x73
 80006ce:	f7ff ffe7 	bl	80006a0 <Task_action>
      osMessageQueuePut(Queue1Handle, &msg, 0, 200);
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <StartSender1+0x40>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f107 010f 	add.w	r1, r7, #15
 80006da:	23c8      	movs	r3, #200	@ 0xc8
 80006dc:	2200      	movs	r2, #0
 80006de:	f004 f927 	bl	8004930 <osMessageQueuePut>
      if(++msg >9)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d901      	bls.n	80006f4 <StartSender1+0x34>
      {
	  msg = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
      }
      osDelay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f8:	f004 f866 	bl	80047c8 <osDelay>
      Task_action('s');
 80006fc:	e7e6      	b.n	80006cc <StartSender1+0xc>
 80006fe:	bf00      	nop
 8000700:	200004ec 	.word	0x200004ec

08000704 <StartReceiver1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver1 */
void StartReceiver1(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiver1 */
  uint8_t msg = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
      Task_action('r');
 8000710:	2072      	movs	r0, #114	@ 0x72
 8000712:	f7ff ffc5 	bl	80006a0 <Task_action>
      r1_State = osMessageQueueGet(Queue1Handle, &msg, NULL, 2000);
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <StartReceiver1+0x44>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 010f 	add.w	r1, r7, #15
 800071e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000722:	2200      	movs	r2, #0
 8000724:	f004 f978 	bl	8004a18 <osMessageQueueGet>
 8000728:	4603      	mov	r3, r0
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <StartReceiver1+0x48>)
 800072c:	6013      	str	r3, [r2, #0]
      Task_action(msg+48);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3330      	adds	r3, #48	@ 0x30
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ffb3 	bl	80006a0 <Task_action>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <StartReceiver1+0x4c>)
 8000740:	f000 fda2 	bl	8001288 <HAL_GPIO_TogglePin>
      Task_action('r');
 8000744:	bf00      	nop
 8000746:	e7e3      	b.n	8000710 <StartReceiver1+0xc>
 8000748:	200004ec 	.word	0x200004ec
 800074c:	200004f0 	.word	0x200004f0
 8000750:	48001000 	.word	0x48001000

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000766:	f000 fa7f 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40001000 	.word	0x40001000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <HAL_MspInit+0x4c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 fb29 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2f      	ldr	r2, [pc, #188]	@ (80008b0 <HAL_I2C_MspInit+0xdc>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d128      	bne.n	8000848 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a2e      	ldr	r2, [pc, #184]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800080e:	23c0      	movs	r3, #192	@ 0xc0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	2312      	movs	r3, #18
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000816:	2301      	movs	r3, #1
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081e:	2304      	movs	r3, #4
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <HAL_I2C_MspInit+0xe4>)
 800082a:	f000 fb9b 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a20      	ldr	r2, [pc, #128]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000846:	e02e      	b.n	80008a6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <HAL_I2C_MspInit+0xe8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d129      	bne.n	80008a6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000870:	2312      	movs	r3, #18
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800087c:	2304      	movs	r3, #4
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f000 fb6b 	bl	8000f64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_I2C_MspInit+0xe0>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	@ 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400
 80008bc:	40005800 	.word	0x40005800

080008c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	@ (800093c <HAL_SPI_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d128      	bne.n	8000934 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a16      	ldr	r2, [pc, #88]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 80008e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_SPI_MspInit+0x80>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000912:	23e0      	movs	r3, #224	@ 0xe0
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000922:	2305      	movs	r3, #5
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f000 fb18 	bl	8000f64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40013000 	.word	0x40013000
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d130      	bne.n	80009c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f000 fad6 	bl	8000f64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2105      	movs	r1, #5
 80009bc:	2026      	movs	r0, #38	@ 0x26
 80009be:	f000 fa2b 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	@ 0x26
 80009c4:	f000 fa44 	bl	8000e50 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <HAL_PCD_MspInit+0x80>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d129      	bne.n	8000a4e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	6153      	str	r3, [r2, #20]
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a24:	230e      	movs	r3, #14
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f000 fa97 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 8000a3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_PCD_MspInit+0x84>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40005c00 	.word	0x40005c00
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a70:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4a32      	ldr	r2, [pc, #200]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	61d3      	str	r3, [r2, #28]
 8000a7c:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f86a 	bl	8002b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa2:	f002 f81f 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8000aa6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aa8:	e004      	b.n	8000ab4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aaa:	f002 f81b 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	0c9b      	lsrs	r3, r3, #18
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ac6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aea:	f002 fae6 	bl	80030ba <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000afe:	f002 fb3d 	bl	800317c <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b10:	2036      	movs	r0, #54	@ 0x36
 8000b12:	f000 f99d 	bl	8000e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	@ 0x36
 8000b22:	f000 f979 	bl	8000e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	@ 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	200004f4 	.word	0x200004f4
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b58:	f002 f83a 	bl	8002bd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x8>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fb92 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f002 fd87 	bl	80036b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000188 	.word	0x20000188

08000bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM6_DAC_IRQHandler+0x10>)
 8000bb6:	f002 fb4b 	bl	8003250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200004f4 	.word	0x200004f4

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f006 fd07 	bl	8007628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fb01 	bl	8000220 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c2c:	08007828 	.word	0x08007828
  ldr r2, =_sbss
 8000c30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c34:	20002064 	.word	0x20002064

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff ff04 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fd94 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000540 	.word	0x20000540

08000c90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000540 	.word	0x20000540

08000ca8 <__NVIC_SetPriorityGrouping>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	@ (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	@ (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	@ (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	@ 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e02e      	b.n	8000edc <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d008      	beq.n	8000e9a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e020      	b.n	8000edc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 020e 	bic.w	r2, r2, #14
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d005      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2204      	movs	r2, #4
 8000f02:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e027      	b.n	8000f5a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 020e 	bic.w	r2, r2, #14
 8000f18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	4798      	blx	r3
    }
  }
  return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e154      	b.n	800121e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8146 	beq.w	8001218 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x40>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80a0 	beq.w	8001218 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b58      	ldr	r3, [pc, #352]	@ (800123c <HAL_GPIO_Init+0x2d8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a57      	ldr	r2, [pc, #348]	@ (800123c <HAL_GPIO_Init+0x2d8>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b55      	ldr	r3, [pc, #340]	@ (800123c <HAL_GPIO_Init+0x2d8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f0:	4a53      	ldr	r2, [pc, #332]	@ (8001240 <HAL_GPIO_Init+0x2dc>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800111a:	d019      	beq.n	8001150 <HAL_GPIO_Init+0x1ec>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x2e0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x1e8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2e4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1e4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a47      	ldr	r2, [pc, #284]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1e0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <HAL_GPIO_Init+0x2ec>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1dc>
 800113c:	2304      	movs	r3, #4
 800113e:	e008      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001140:	2305      	movs	r3, #5
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001144:	2303      	movs	r3, #3
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001150:	2300      	movs	r3, #0
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001162:	4937      	ldr	r1, [pc, #220]	@ (8001240 <HAL_GPIO_Init+0x2dc>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001170:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001194:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119a:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	f47f aea3 	bne.w	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	48000400 	.word	0x48000400
 8001248:	48000800 	.word	0x48000800
 800124c:	48000c00 	.word	0x48000c00
 8001250:	48001000 	.word	0x48001000
 8001254:	40010400 	.word	0x40010400

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e002      	b.n	800127c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43d9      	mvns	r1, r3
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	400b      	ands	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f806 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e08d      	b.n	8001430 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fa53 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2224      	movs	r2, #36	@ 0x24
 8001332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0201 	bic.w	r2, r2, #1
 8001344:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001352:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001362:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d107      	bne.n	800137c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	e006      	b.n	800138a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d108      	bne.n	80013a4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	e007      	b.n	80013b4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69d9      	ldr	r1, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b20      	cmp	r3, #32
 800144c:	d138      	bne.n	80014c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001458:	2302      	movs	r3, #2
 800145a:	e032      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	@ 0x24
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800148a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d139      	bne.n	8001558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e033      	b.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2224      	movs	r2, #36	@ 0x24
 80014fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e000      	b.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001558:	2302      	movs	r3, #2
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b9      	b.n	80016ec <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d106      	bne.n	8001592 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fa23 	bl	80009d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 ffc7 	bl	8004532 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e03e      	b.n	8001628 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	3311      	adds	r3, #17
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	3310      	adds	r3, #16
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	3313      	adds	r3, #19
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3320      	adds	r3, #32
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	3324      	adds	r3, #36	@ 0x24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3301      	adds	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3bb      	bcc.n	80015aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e044      	b.n	80016c2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	3301      	adds	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3b5      	bcc.n	8001638 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016d8:	f002 ff46 	bl	8004568 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001704:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	f000 bff4 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 816d 	beq.w	8001a0a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001730:	4bb4      	ldr	r3, [pc, #720]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d00c      	beq.n	8001756 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d157      	bne.n	80017f8 <HAL_RCC_OscConfig+0x104>
 8001748:	4bae      	ldr	r3, [pc, #696]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001754:	d150      	bne.n	80017f8 <HAL_RCC_OscConfig+0x104>
 8001756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800175a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800176a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b3f      	cmp	r3, #63	@ 0x3f
 8001776:	d802      	bhi.n	800177e <HAL_RCC_OscConfig+0x8a>
 8001778:	4ba2      	ldr	r3, [pc, #648]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0xb6>
 800177e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001782:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001792:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001796:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800179a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017a6:	4b97      	ldr	r3, [pc, #604]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ae:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017b6:	fa92 f2a2 	rbit	r2, r2
 80017ba:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f042 0220 	orr.w	r2, r2, #32
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f002 021f 	and.w	r2, r2, #31
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8114 	beq.w	8001a08 <HAL_RCC_OscConfig+0x314>
 80017e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 810b 	bne.w	8001a08 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f000 bf85 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x124>
 800180a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e036      	b.n	8001886 <HAL_RCC_OscConfig+0x192>
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x14e>
 8001828:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a75      	ldr	r2, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b73      	ldr	r3, [pc, #460]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a72      	ldr	r2, [pc, #456]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e021      	b.n	8001886 <HAL_RCC_OscConfig+0x192>
 8001842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x17a>
 8001854:	4b6b      	ldr	r3, [pc, #428]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6a      	ldr	r2, [pc, #424]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b68      	ldr	r3, [pc, #416]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a67      	ldr	r2, [pc, #412]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x192>
 800186e:	4b65      	ldr	r3, [pc, #404]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a64      	ldr	r2, [pc, #400]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b62      	ldr	r3, [pc, #392]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a61      	ldr	r2, [pc, #388]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001884:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001886:	4b5f      	ldr	r3, [pc, #380]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	495a      	ldr	r1, [pc, #360]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800189c:	4313      	orrs	r3, r2
 800189e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d054      	beq.n	800195a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f9ee 	bl	8000c90 <HAL_GetTick>
 80018b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff f9e9 	bl	8000c90 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d902      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	f000 bf19 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 80018d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80018e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80018f0:	d802      	bhi.n	80018f8 <HAL_RCC_OscConfig+0x204>
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	e015      	b.n	8001924 <HAL_RCC_OscConfig+0x230>
 80018f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018fc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800190c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001910:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001914:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001920:	4b38      	ldr	r3, [pc, #224]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001928:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800192c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001930:	fa92 f2a2 	rbit	r2, r2
 8001934:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001938:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800193c:	fab2 f282 	clz	r2, r2
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f042 0220 	orr.w	r2, r2, #32
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f002 021f 	and.w	r2, r2, #31
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0b0      	beq.n	80018ba <HAL_RCC_OscConfig+0x1c6>
 8001958:	e057      	b.n	8001a0a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f999 	bl	8000c90 <HAL_GetTick>
 800195e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f994 	bl	8000c90 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b64      	cmp	r3, #100	@ 0x64
 8001972:	d902      	bls.n	800197a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	f000 bec4 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 800197a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800197e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800198e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b3f      	cmp	r3, #63	@ 0x3f
 800199a:	d802      	bhi.n	80019a2 <HAL_RCC_OscConfig+0x2ae>
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x2da>
 80019a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_RCC_OscConfig+0x310>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019d2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80019d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80019da:	fa92 f2a2 	rbit	r2, r2
 80019de:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80019e2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1b0      	bne.n	8001964 <HAL_RCC_OscConfig+0x270>
 8001a02:	e002      	b.n	8001a0a <HAL_RCC_OscConfig+0x316>
 8001a04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 816c 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a20:	4bcc      	ldr	r3, [pc, #816]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a2c:	4bc9      	ldr	r3, [pc, #804]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d16d      	bne.n	8001b14 <HAL_RCC_OscConfig+0x420>
 8001a38:	4bc6      	ldr	r3, [pc, #792]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d167      	bne.n	8001b14 <HAL_RCC_OscConfig+0x420>
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a62:	d802      	bhi.n	8001a6a <HAL_RCC_OscConfig+0x376>
 8001a64:	4bbb      	ldr	r3, [pc, #748]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e013      	b.n	8001a92 <HAL_RCC_OscConfig+0x39e>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a82:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001a8e:	4bb1      	ldr	r3, [pc, #708]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	2202      	movs	r2, #2
 8001a94:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001a98:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a9c:	fa92 f2a2 	rbit	r2, r2
 8001aa0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001aa4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <HAL_RCC_OscConfig+0x3e6>
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d002      	beq.n	8001ada <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 be14 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b9e      	ldr	r3, [pc, #632]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	21f8      	movs	r1, #248	@ 0xf8
 8001af0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001af8:	fa91 f1a1 	rbit	r1, r1
 8001afc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b00:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b04:	fab1 f181 	clz	r1, r1
 8001b08:	b2c9      	uxtb	r1, r1
 8001b0a:	408b      	lsls	r3, r1
 8001b0c:	4991      	ldr	r1, [pc, #580]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e0f1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8083 	beq.w	8001c2c <HAL_RCC_OscConfig+0x538>
 8001b26:	2301      	movs	r3, #1
 8001b28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b38:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff f89d 	bl	8000c90 <HAL_GetTick>
 8001b56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f898 	bl	8000c90 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d902      	bls.n	8001b72 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	f000 bdc8 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001b84:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b90:	d802      	bhi.n	8001b98 <HAL_RCC_OscConfig+0x4a4>
 8001b92:	4b70      	ldr	r3, [pc, #448]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e013      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4cc>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bbc:	4b65      	ldr	r3, [pc, #404]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001bc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001bca:	fa92 f2a2 	rbit	r2, r2
 8001bce:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001bd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001bd6:	fab2 f282 	clz	r2, r2
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	f002 021f 	and.w	r2, r2, #31
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0b4      	beq.n	8001b5c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	21f8      	movs	r1, #248	@ 0xf8
 8001c08:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c10:	fa91 f1a1 	rbit	r1, r1
 8001c14:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c18:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c1c:	fab1 f181 	clz	r1, r1
 8001c20:	b2c9      	uxtb	r1, r1
 8001c22:	408b      	lsls	r3, r1
 8001c24:	494b      	ldr	r1, [pc, #300]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
 8001c2a:	e065      	b.n	8001cf8 <HAL_RCC_OscConfig+0x604>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f81a 	bl	8000c90 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f815 	bl	8000c90 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d902      	bls.n	8001c78 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f000 bd45 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c96:	d802      	bhi.n	8001c9e <HAL_RCC_OscConfig+0x5aa>
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	e013      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5d2>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_RCC_OscConfig+0x660>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ccc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cd0:	fa92 f2a2 	rbit	r2, r2
 8001cd4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001cd8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001cdc:	fab2 f282 	clz	r2, r2
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f042 0220 	orr.w	r2, r2, #32
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f002 021f 	and.w	r2, r2, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1b4      	bne.n	8001c62 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8115 	beq.w	8001f38 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d07e      	beq.n	8001e1c <HAL_RCC_OscConfig+0x728>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x664>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7fe ffa2 	bl	8000c90 <HAL_GetTick>
 8001d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d50:	e00f      	b.n	8001d72 <HAL_RCC_OscConfig+0x67e>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7fe ff98 	bl	8000c90 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d902      	bls.n	8001d72 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	f000 bcc8 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001db0:	2202      	movs	r2, #2
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001dd8:	2102      	movs	r1, #2
 8001dda:	6019      	str	r1, [r3, #0]
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f1a3 	rbit	r1, r3
 8001dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001df2:	6019      	str	r1, [r3, #0]
  return result;
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0a0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x668>
 8001e1a:	e08d      	b.n	8001f38 <HAL_RCC_OscConfig+0x844>
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e3e:	601a      	str	r2, [r3, #0]
  return result;
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b90      	ldr	r3, [pc, #576]	@ (8002094 <HAL_RCC_OscConfig+0x9a0>)
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe ff17 	bl	8000c90 <HAL_GetTick>
 8001e62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7fe ff12 	bl	8000c90 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d902      	bls.n	8001e7e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f000 bc42 	b.w	8002702 <HAL_RCC_OscConfig+0x100e>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ee8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	6019      	str	r1, [r3, #0]
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f1a3 	rbit	r1, r3
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f10:	6019      	str	r1, [r3, #0]
  return result;
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d197      	bne.n	8001e68 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 819e 	beq.w	800228a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f54:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d116      	bne.n	8001f8e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	4b4b      	ldr	r3, [pc, #300]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	4a4a      	ldr	r2, [pc, #296]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	61d3      	str	r3, [r2, #28]
 8001f6c:	4b48      	ldr	r3, [pc, #288]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f86:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b42      	ldr	r3, [pc, #264]	@ (8002098 <HAL_RCC_OscConfig+0x9a4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <HAL_RCC_OscConfig+0x9a4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002098 <HAL_RCC_OscConfig+0x9a4>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fe73 	bl	8000c90 <HAL_GetTick>
 8001faa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	e009      	b.n	8001fc4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fe6e 	bl	8000c90 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b64      	cmp	r3, #100	@ 0x64
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e39e      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x9a4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x8fa>
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x966>
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x924>
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e020      	b.n	800205a <HAL_RCC_OscConfig+0x966>
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x94e>
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x966>
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <HAL_RCC_OscConfig+0x99c>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe fe10 	bl	8000c90 <HAL_GetTick>
 8002070:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e012      	b.n	800209c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fe0b 	bl	8000c90 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d908      	bls.n	800209c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e339      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	10908120 	.word	0x10908120
 8002098:	40007000 	.word	0x40007000
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020a4:	2202      	movs	r2, #2
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020c8:	2202      	movs	r2, #2
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020e2:	601a      	str	r2, [r3, #0]
  return result;
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0xa10>
 80020fe:	4b98      	ldr	r3, [pc, #608]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0xa38>
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800210c:	2202      	movs	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b8d      	ldr	r3, [pc, #564]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002130:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002134:	2102      	movs	r1, #2
 8002136:	6011      	str	r1, [r2, #0]
 8002138:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800213c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	fa92 f1a2 	rbit	r1, r2
 8002146:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800214e:	6011      	str	r1, [r2, #0]
  return result;
 8002150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002154:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	f43f af7f 	beq.w	8002076 <HAL_RCC_OscConfig+0x982>
 8002178:	e07d      	b.n	8002276 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe fd89 	bl	8000c90 <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fd84 	bl	8000c90 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e2b2      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021a4:	2202      	movs	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021e2:	601a      	str	r2, [r3, #0]
  return result;
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_OscConfig+0xb10>
 80021fe:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0xb38>
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800220c:	2202      	movs	r2, #2
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002230:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002234:	2102      	movs	r1, #2
 8002236:	6011      	str	r1, [r2, #0]
 8002238:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800223c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	fa92 f1a2 	rbit	r1, r2
 8002246:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800224a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800224e:	6011      	str	r1, [r2, #0]
  return result;
 8002250:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002254:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 021f 	and.w	r2, r2, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d186      	bne.n	8002184 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002276:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002288:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8232 	beq.w	8002700 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f000 8201 	beq.w	80026ac <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	f040 8157 	bne.w	800256a <HAL_RCC_OscConfig+0xe76>
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022e0:	601a      	str	r2, [r3, #0]
  return result;
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	2300      	movs	r3, #0
 8002300:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe fcc5 	bl	8000c90 <HAL_GetTick>
 8002306:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	e009      	b.n	8002320 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fcc0 	bl	8000c90 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1f0      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002328:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800234e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b3f      	cmp	r3, #63	@ 0x3f
 8002358:	d804      	bhi.n	8002364 <HAL_RCC_OscConfig+0xc70>
 800235a:	4b01      	ldr	r3, [pc, #4]	@ (8002360 <HAL_RCC_OscConfig+0xc6c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	e029      	b.n	80023b4 <HAL_RCC_OscConfig+0xcc0>
 8002360:	40021000 	.word	0x40021000
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800236c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002376:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002392:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	4bc3      	ldr	r3, [pc, #780]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023c0:	6011      	str	r1, [r2, #0]
 80023c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	fa92 f1a2 	rbit	r1, r2
 80023d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023d8:	6011      	str	r1, [r2, #0]
  return result;
 80023da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d185      	bne.n	800230c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002400:	4baf      	ldr	r3, [pc, #700]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	430b      	orrs	r3, r1
 8002422:	49a7      	ldr	r1, [pc, #668]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800244c:	601a      	str	r2, [r3, #0]
  return result;
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002456:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002462:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	461a      	mov	r2, r3
 800246a:	2301      	movs	r3, #1
 800246c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fc0f 	bl	8000c90 <HAL_GetTick>
 8002472:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002476:	e009      	b.n	800248c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fc0a 	bl	8000c90 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e13a      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002494:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024b0:	601a      	str	r2, [r3, #0]
  return result;
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80024c4:	d802      	bhi.n	80024cc <HAL_RCC_OscConfig+0xdd8>
 80024c6:	4b7e      	ldr	r3, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e027      	b.n	800251c <HAL_RCC_OscConfig+0xe28>
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b69      	ldr	r3, [pc, #420]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002520:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002524:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800252e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	fa92 f1a2 	rbit	r1, r2
 8002538:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002540:	6011      	str	r1, [r2, #0]
  return result;
 8002542:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002546:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d087      	beq.n	8002478 <HAL_RCC_OscConfig+0xd84>
 8002568:	e0ca      	b.n	8002700 <HAL_RCC_OscConfig+0x100c>
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002572:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002598:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	461a      	mov	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fb6e 	bl	8000c90 <HAL_GetTick>
 80025b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	e009      	b.n	80025ce <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe fb69 	bl	8000c90 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e099      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b3f      	cmp	r3, #63	@ 0x3f
 8002606:	d802      	bhi.n	800260e <HAL_RCC_OscConfig+0xf1a>
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	e027      	b.n	800265e <HAL_RCC_OscConfig+0xf6a>
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002616:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800263c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_OscConfig+0xfcc>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002662:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002666:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800266a:	6011      	str	r1, [r2, #0]
 800266c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002670:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	fa92 f1a2 	rbit	r1, r2
 800267a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800267e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002682:	6011      	str	r1, [r2, #0]
  return result;
 8002684:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002688:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d187      	bne.n	80025ba <HAL_RCC_OscConfig+0xec6>
 80026aa:	e029      	b.n	8002700 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d103      	bne.n	80026c4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e020      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
 80026c0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_OscConfig+0x1018>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b09e      	sub	sp, #120	@ 0x78
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e154      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b86      	ldr	r3, [pc, #536]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4984      	ldr	r1, [pc, #528]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b82      	ldr	r3, [pc, #520]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e13c      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b7b      	ldr	r3, [pc, #492]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4978      	ldr	r1, [pc, #480]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80cd 	beq.w	800291e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d137      	bne.n	80027fc <HAL_RCC_ClockConfig+0xec>
 800278c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002790:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800279a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a4:	d802      	bhi.n	80027ac <HAL_RCC_ClockConfig+0x9c>
 80027a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_ClockConfig+0xbc>
 80027ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80027ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027be:	663b      	str	r3, [r7, #96]	@ 0x60
 80027c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c8:	4b62      	ldr	r3, [pc, #392]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027d4:	fa92 f2a2 	rbit	r2, r2
 80027d8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d171      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ea      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d137      	bne.n	8002874 <HAL_RCC_ClockConfig+0x164>
 8002804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002808:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b3f      	cmp	r3, #63	@ 0x3f
 800281c:	d802      	bhi.n	8002824 <HAL_RCC_ClockConfig+0x114>
 800281e:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e00f      	b.n	8002844 <HAL_RCC_ClockConfig+0x134>
 8002824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	647b      	str	r3, [r7, #68]	@ 0x44
 8002832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002836:	643b      	str	r3, [r7, #64]	@ 0x40
 8002838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002840:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002848:	63ba      	str	r2, [r7, #56]	@ 0x38
 800284a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800284c:	fa92 f2a2 	rbit	r2, r2
 8002850:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d135      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0ae      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
 8002874:	2302      	movs	r3, #2
 8002876:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b3f      	cmp	r3, #63	@ 0x3f
 800288a:	d802      	bhi.n	8002892 <HAL_RCC_ClockConfig+0x182>
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	e00d      	b.n	80028ae <HAL_RCC_ClockConfig+0x19e>
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	2202      	movs	r2, #2
 80028b0:	61ba      	str	r2, [r7, #24]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	fa92 f2a2 	rbit	r2, r2
 80028b8:	617a      	str	r2, [r7, #20]
  return result;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e07a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 0203 	bic.w	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	491a      	ldr	r1, [pc, #104]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ee:	f7fe f9cf 	bl	8000c90 <HAL_GetTick>
 80028f2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	e00a      	b.n	800290c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe f9cb 	bl	8000c90 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e062      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_RCC_ClockConfig+0x244>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 020c 	and.w	r2, r3, #12
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	429a      	cmp	r2, r3
 800291c:	d1eb      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d215      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 0207 	bic.w	r2, r3, #7
 8002934:	4906      	ldr	r1, [pc, #24]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <HAL_RCC_ClockConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d006      	beq.n	8002958 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_RCC_ClockConfig+0x2c2>
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000
 8002954:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <HAL_RCC_ClockConfig+0x2cc>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	491a      	ldr	r1, [pc, #104]	@ (80029dc <HAL_RCC_ClockConfig+0x2cc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002982:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_RCC_ClockConfig+0x2cc>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4912      	ldr	r1, [pc, #72]	@ (80029dc <HAL_RCC_ClockConfig+0x2cc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002996:	f000 f845 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 800299a:	4601      	mov	r1, r0
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_RCC_ClockConfig+0x2cc>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a4:	22f0      	movs	r2, #240	@ 0xf0
 80029a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	60fa      	str	r2, [r7, #12]
  return result;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	40d3      	lsrs	r3, r2
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x2d0>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	fa21 f303 	lsr.w	r3, r1, r3
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <HAL_RCC_ClockConfig+0x2d4>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <HAL_RCC_ClockConfig+0x2d8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe f848 	bl	8000a60 <HAL_InitTick>
  
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3778      	adds	r7, #120	@ 0x78
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	080077e8 	.word	0x080077e8
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80029f6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	603b      	str	r3, [r7, #0]
  return result;
 8002a00:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	2301      	movs	r3, #1
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x36>
 8002a52:	e026      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e026      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0c9b      	lsrs	r3, r3, #18
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a17      	ldr	r2, [pc, #92]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	4a14      	ldr	r2, [pc, #80]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e004      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa4:	613b      	str	r3, [r7, #16]
      break;
 8002aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa8:	693b      	ldr	r3, [r7, #16]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	08007800 	.word	0x08007800
 8002ac4:	08007810 	.word	0x08007810
 8002ac8:	003d0900 	.word	0x003d0900

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002aea:	f7ff ffef 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aee:	4601      	mov	r1, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002af8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002afc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	fa92 f2a2 	rbit	r2, r2
 8002b04:	603a      	str	r2, [r7, #0]
  return result;
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	40d3      	lsrs	r3, r2
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	080077f8 	.word	0x080077f8

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b2e:	f7ff ffcd 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b32:	4601      	mov	r1, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b3c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	603a      	str	r2, [r7, #0]
  return result;
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	40d3      	lsrs	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080077f8 	.word	0x080077f8

08002b6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	220f      	movs	r2, #15
 8002b7a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <HAL_RCC_GetClockConfig+0x60>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0207 	and.w	r2, r3, #7
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bdc:	2b80      	cmp	r3, #128	@ 0x80
 8002bde:	d104      	bne.n	8002bea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002be0:	f000 f80a 	bl	8002bf8 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002be4:	4b03      	ldr	r3, [pc, #12]	@ (8002bf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	701a      	strb	r2, [r3, #0]
  }
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	4002100a 	.word	0x4002100a

08002bf8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b092      	sub	sp, #72	@ 0x48
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80d2 	beq.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10e      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	61d3      	str	r3, [r2, #28]
 8002c44:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b44      	ldr	r3, [pc, #272]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b41      	ldr	r3, [pc, #260]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a40      	ldr	r2, [pc, #256]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f80f 	bl	8000c90 <HAL_GetTick>
 8002c72:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe f80b 	bl	8000c90 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e167      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c94:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8082 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d07a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	461a      	mov	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d06:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d049      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fd ffbb 	bl	8000c90 <HAL_GetTick>
 8002d1a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fd ffb7 	bl	8000c90 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e111      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d34:	2302      	movs	r3, #2
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d5e:	4b01      	ldr	r3, [pc, #4]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	e00d      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	10908100 	.word	0x10908100
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	4b78      	ldr	r3, [pc, #480]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2202      	movs	r2, #2
 8002d82:	613a      	str	r2, [r7, #16]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	fab2 f282 	clz	r2, r2
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f002 021f 	and.w	r2, r2, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0b9      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002daa:	4b6d      	ldr	r3, [pc, #436]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	496a      	ldr	r1, [pc, #424]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b66      	ldr	r3, [pc, #408]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a65      	ldr	r2, [pc, #404]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ddc:	4b60      	ldr	r3, [pc, #384]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	f023 0203 	bic.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	495d      	ldr	r1, [pc, #372]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfa:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4956      	ldr	r1, [pc, #344]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e18:	4b51      	ldr	r3, [pc, #324]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	494e      	ldr	r1, [pc, #312]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e36:	4b4a      	ldr	r3, [pc, #296]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4947      	ldr	r1, [pc, #284]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e54:	4b42      	ldr	r3, [pc, #264]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	493f      	ldr	r1, [pc, #252]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f023 0220 	bic.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4938      	ldr	r1, [pc, #224]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e90:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4930      	ldr	r1, [pc, #192]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eae:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	4929      	ldr	r1, [pc, #164]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	4921      	ldr	r1, [pc, #132]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	491a      	ldr	r1, [pc, #104]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f08:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	4912      	ldr	r1, [pc, #72]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	490b      	ldr	r1, [pc, #44]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	4903      	ldr	r1, [pc, #12]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3748      	adds	r7, #72	@ 0x48
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09d      	b.n	80030b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f86:	d009      	beq.n	8002f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
 8002f8e:	e005      	b.n	8002f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fc82 	bl	80008c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fdc:	d902      	bls.n	8002fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e002      	b.n	8002fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ff2:	d007      	beq.n	8003004 <HAL_SPI_Init+0xa0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	ea42 0103 	orr.w	r1, r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	0c1b      	lsrs	r3, r3, #16
 8003060:	f003 0204 	and.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003080:	ea42 0103 	orr.w	r1, r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e049      	b.n	8003160 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f841 	bl	8003168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f9d3 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04a      	b.n	800322a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a21      	ldr	r2, [pc, #132]	@ (8003238 <HAL_TIM_Base_Start_IT+0xbc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d018      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d013      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_TIM_Base_Start_IT+0xc0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00e      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <HAL_TIM_Base_Start_IT+0xc4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003244 <HAL_TIM_Base_Start_IT+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <HAL_TIM_Base_Start_IT+0xcc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d115      	bne.n	8003214 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	4b17      	ldr	r3, [pc, #92]	@ (800324c <HAL_TIM_Base_Start_IT+0xd0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d015      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0xaa>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003200:	d011      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003212:	e008      	b.n	8003226 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e000      	b.n	8003228 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40013400 	.word	0x40013400
 8003248:	40014000 	.word	0x40014000
 800324c:	00010007 	.word	0x00010007

08003250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d020      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0202 	mvn.w	r2, #2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8e4 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8d6 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8e7 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0204 	mvn.w	r2, #4
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8be 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8b0 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8c1 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0208 	mvn.w	r2, #8
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2204      	movs	r2, #4
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f898 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f88a 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f89b 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0210 	mvn.w	r2, #16
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2208      	movs	r2, #8
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f872 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f864 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f875 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0201 	mvn.w	r2, #1
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd f9cc 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f908 	bl	80035f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f900 	bl	8003604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f834 	bl	8003490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0220 	mvn.w	r2, #32
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8c8 	bl	80035dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00f      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3f      	ldr	r2, [pc, #252]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3e      	ldr	r2, [pc, #248]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d017      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a30      	ldr	r2, [pc, #192]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a16      	ldr	r2, [pc, #88]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]
  }
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800

080035dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e040      	b.n	80036ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd f982 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	@ 0x24
 8003644:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fd02 	bl	8004068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fb2b 	bl	8003cc0 <UART_SetConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e01b      	b.n	80036ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fd81 	bl	80041ac <UART_CheckIdleState>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0ba      	sub	sp, #232	@ 0xe8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036e2:	4013      	ands	r3, r2
 80036e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d115      	bne.n	800371c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 82ab 	beq.w	8003c68 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
      }
      return;
 800371a:	e2a5      	b.n	8003c68 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800371c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8117 	beq.w	8003954 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003736:	4b85      	ldr	r3, [pc, #532]	@ (800394c <HAL_UART_IRQHandler+0x298>)
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 810a 	beq.w	8003954 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d011      	beq.n	8003770 <HAL_UART_IRQHandler+0xbc>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d011      	beq.n	80037a0 <HAL_UART_IRQHandler+0xec>
 800377c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2202      	movs	r2, #2
 800378e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d011      	beq.n	80037d0 <HAL_UART_IRQHandler+0x11c>
 80037ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2204      	movs	r2, #4
 80037be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003802:	f043 0208 	orr.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003814:	2b00      	cmp	r3, #0
 8003816:	d012      	beq.n	800383e <HAL_UART_IRQHandler+0x18a>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800382c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8211 	beq.w	8003c6c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003878:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	2b40      	cmp	r3, #64	@ 0x40
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800388a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04f      	beq.n	8003936 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd9d 	bl	80043d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b40      	cmp	r3, #64	@ 0x40
 80038a8:	d141      	bne.n	800392e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1d9      	bne.n	80038aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003902:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <HAL_UART_IRQHandler+0x29c>)
 8003904:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd faec 	bl	8000ee8 <HAL_DMA_Abort_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003920:	4610      	mov	r0, r2
 8003922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00f      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9b4 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00b      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9b0 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e007      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f9ac 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003944:	e192      	b.n	8003c6c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	bf00      	nop
    return;
 8003948:	e190      	b.n	8003c6c <HAL_UART_IRQHandler+0x5b8>
 800394a:	bf00      	nop
 800394c:	04000120 	.word	0x04000120
 8003950:	0800449f 	.word	0x0800449f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 814b 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8144 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 813d 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	f040 80b5 	bne.w	8003afc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8164 	beq.w	8003c70 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f080 815c 	bcs.w	8003c70 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f000 8086 	beq.w	8003ada <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039fc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1da      	bne.n	80039ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e1      	bne.n	8003a18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003abc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003abe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e4      	bne.n	8003a9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f9c9 	bl	8000e6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8d7 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003afa:	e0b9      	b.n	8003c70 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80ab 	beq.w	8003c74 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e4      	bne.n	8003b28 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e4      	bne.n	8003baa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f85b 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf2:	e03f      	b.n	8003c74 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <HAL_UART_IRQHandler+0x56a>
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fc81 	bl	800451e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c1c:	e02d      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00e      	beq.n	8003c48 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01c      	beq.n	8003c78 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
    }
    return;
 8003c46:	e017      	b.n	8003c78 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fc32 	bl	80044ca <UART_EndTransmit_IT>
    return;
 8003c66:	e008      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c68:	bf00      	nop
 8003c6a:	e006      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c6c:	bf00      	nop
 8003c6e:	e004      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c78:	bf00      	nop
  }

}
 8003c7a:	37e8      	adds	r7, #232	@ 0xe8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003cee:	f023 030c 	bic.w	r3, r3, #12
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4aa7      	ldr	r2, [pc, #668]	@ (8003fd8 <UART_SetConfig+0x318>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d120      	bne.n	8003d82 <UART_SetConfig+0xc2>
 8003d40:	4ba6      	ldr	r3, [pc, #664]	@ (8003fdc <UART_SetConfig+0x31c>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d817      	bhi.n	8003d7c <UART_SetConfig+0xbc>
 8003d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x94>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d71 	.word	0x08003d71
 8003d5c:	08003d77 	.word	0x08003d77
 8003d60:	08003d6b 	.word	0x08003d6b
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e0b5      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e0b2      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0af      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0ac      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0a9      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a96      	ldr	r2, [pc, #600]	@ (8003fe0 <UART_SetConfig+0x320>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d124      	bne.n	8003dd6 <UART_SetConfig+0x116>
 8003d8c:	4b93      	ldr	r3, [pc, #588]	@ (8003fdc <UART_SetConfig+0x31c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d98:	d011      	beq.n	8003dbe <UART_SetConfig+0xfe>
 8003d9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d9e:	d817      	bhi.n	8003dd0 <UART_SetConfig+0x110>
 8003da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da4:	d011      	beq.n	8003dca <UART_SetConfig+0x10a>
 8003da6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003daa:	d811      	bhi.n	8003dd0 <UART_SetConfig+0x110>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <UART_SetConfig+0xf8>
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d006      	beq.n	8003dc4 <UART_SetConfig+0x104>
 8003db6:	e00b      	b.n	8003dd0 <UART_SetConfig+0x110>
 8003db8:	2300      	movs	r3, #0
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e08b      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e088      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e085      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e082      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e07f      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a82      	ldr	r2, [pc, #520]	@ (8003fe4 <UART_SetConfig+0x324>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d124      	bne.n	8003e2a <UART_SetConfig+0x16a>
 8003de0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fdc <UART_SetConfig+0x31c>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003de8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dec:	d011      	beq.n	8003e12 <UART_SetConfig+0x152>
 8003dee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003df2:	d817      	bhi.n	8003e24 <UART_SetConfig+0x164>
 8003df4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003df8:	d011      	beq.n	8003e1e <UART_SetConfig+0x15e>
 8003dfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dfe:	d811      	bhi.n	8003e24 <UART_SetConfig+0x164>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <UART_SetConfig+0x14c>
 8003e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e08:	d006      	beq.n	8003e18 <UART_SetConfig+0x158>
 8003e0a:	e00b      	b.n	8003e24 <UART_SetConfig+0x164>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e061      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e05e      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e05b      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e058      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e055      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <UART_SetConfig+0x328>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d124      	bne.n	8003e7e <UART_SetConfig+0x1be>
 8003e34:	4b69      	ldr	r3, [pc, #420]	@ (8003fdc <UART_SetConfig+0x31c>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e40:	d011      	beq.n	8003e66 <UART_SetConfig+0x1a6>
 8003e42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e46:	d817      	bhi.n	8003e78 <UART_SetConfig+0x1b8>
 8003e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4c:	d011      	beq.n	8003e72 <UART_SetConfig+0x1b2>
 8003e4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e52:	d811      	bhi.n	8003e78 <UART_SetConfig+0x1b8>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <UART_SetConfig+0x1a0>
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e5c:	d006      	beq.n	8003e6c <UART_SetConfig+0x1ac>
 8003e5e:	e00b      	b.n	8003e78 <UART_SetConfig+0x1b8>
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e037      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e034      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e031      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e72:	2308      	movs	r3, #8
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e02e      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e02b      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5a      	ldr	r2, [pc, #360]	@ (8003fec <UART_SetConfig+0x32c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d124      	bne.n	8003ed2 <UART_SetConfig+0x212>
 8003e88:	4b54      	ldr	r3, [pc, #336]	@ (8003fdc <UART_SetConfig+0x31c>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e94:	d011      	beq.n	8003eba <UART_SetConfig+0x1fa>
 8003e96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e9a:	d817      	bhi.n	8003ecc <UART_SetConfig+0x20c>
 8003e9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea0:	d011      	beq.n	8003ec6 <UART_SetConfig+0x206>
 8003ea2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea6:	d811      	bhi.n	8003ecc <UART_SetConfig+0x20c>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <UART_SetConfig+0x1f4>
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb0:	d006      	beq.n	8003ec0 <UART_SetConfig+0x200>
 8003eb2:	e00b      	b.n	8003ecc <UART_SetConfig+0x20c>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e00d      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e00a      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e007      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e004      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e001      	b.n	8003ed6 <UART_SetConfig+0x216>
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ede:	d15b      	bne.n	8003f98 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d827      	bhi.n	8003f36 <UART_SetConfig+0x276>
 8003ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0x22c>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe fde8 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fe06 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <UART_SetConfig+0x330>)
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fd7d 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8003f2a:	61b8      	str	r0, [r7, #24]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f32:	61bb      	str	r3, [r7, #24]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8082 	beq.w	800404c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	005a      	lsls	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d916      	bls.n	8003f92 <UART_SetConfig+0x2d2>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6a:	d212      	bcs.n	8003f92 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f023 030f 	bic.w	r3, r3, #15
 8003f74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	89fa      	ldrh	r2, [r7, #14]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	e05c      	b.n	800404c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	77bb      	strb	r3, [r7, #30]
 8003f96:	e059      	b.n	800404c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d835      	bhi.n	800400a <UART_SetConfig+0x34a>
 8003f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa4 <UART_SetConfig+0x2e4>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	0800400b 	.word	0x0800400b
 8003fb4:	08003ffb 	.word	0x08003ffb
 8003fb8:	0800400b 	.word	0x0800400b
 8003fbc:	0800400b 	.word	0x0800400b
 8003fc0:	0800400b 	.word	0x0800400b
 8003fc4:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe fd8c 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	61b8      	str	r0, [r7, #24]
        break;
 8003fce:	e021      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7fe fdaa 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	61b8      	str	r0, [r7, #24]
        break;
 8003fd6:	e01d      	b.n	8004014 <UART_SetConfig+0x354>
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40004c00 	.word	0x40004c00
 8003fec:	40005000 	.word	0x40005000
 8003ff0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8004064 <UART_SetConfig+0x3a4>)
 8003ff6:	61bb      	str	r3, [r7, #24]
        break;
 8003ff8:	e00c      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7fe fd13 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8003ffe:	61b8      	str	r0, [r7, #24]
        break;
 8004000:	e008      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e004      	b.n	8004014 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	77bb      	strb	r3, [r7, #30]
        break;
 8004012:	bf00      	nop
    }

    if (pclk != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	085a      	lsrs	r2, r3, #1
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	441a      	add	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d909      	bls.n	8004048 <UART_SetConfig+0x388>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403a:	d205      	bcs.n	8004048 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e001      	b.n	800404c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004058:	7fbb      	ldrb	r3, [r7, #30]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	007a1200 	.word	0x007a1200

08004068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004166:	d10a      	bne.n	800417e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b098      	sub	sp, #96	@ 0x60
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fc fd68 	bl	8000c90 <HAL_GetTick>
 80041c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d12e      	bne.n	800422e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f88c 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d021      	beq.n	800422e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004208:	647b      	str	r3, [r7, #68]	@ 0x44
 800420a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800420e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e062      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d149      	bne.n	80042d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f856 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03c      	beq.n	80042d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	623b      	str	r3, [r7, #32]
   return(result);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004274:	633b      	str	r3, [r7, #48]	@ 0x30
 8004276:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800427a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60fb      	str	r3, [r7, #12]
   return(result);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a8:	61fa      	str	r2, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	617b      	str	r3, [r7, #20]
   return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e011      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3758      	adds	r7, #88	@ 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430c:	e04f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d04b      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fc fcbb 	bl	8000c90 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <UART_WaitOnFlagUntilTimeout+0x30>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e04e      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d037      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b80      	cmp	r3, #128	@ 0x80
 8004342:	d034      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d031      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d110      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f838 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2208      	movs	r2, #8
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e029      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004388:	d111      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f81e 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0a0      	beq.n	800430e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b095      	sub	sp, #84	@ 0x54
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	d118      	bne.n	800447e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60bb      	str	r3, [r7, #8]
   return(result);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6979      	ldr	r1, [r7, #20]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	613b      	str	r3, [r7, #16]
   return(result);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e6      	bne.n	800444c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004492:	bf00      	nop
 8004494:	3754      	adds	r7, #84	@ 0x54
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff fbe9 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fbb5 	bl	8003c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004516:	bf00      	nop
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800453a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800453e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	b29b      	uxth	r3, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	4013      	ands	r3, r2
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045aa:	f3ef 8305 	mrs	r3, IPSR
 80045ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ba:	607b      	str	r3, [r7, #4]
  return(result);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <osKernelInitialize+0x32>
 80045c2:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <osKernelInitialize+0x64>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d109      	bne.n	80045de <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045ca:	f3ef 8311 	mrs	r3, BASEPRI
 80045ce:	603b      	str	r3, [r7, #0]
  return(result);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045d6:	f06f 0305 	mvn.w	r3, #5
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e00c      	b.n	80045f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045de:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <osKernelInitialize+0x64>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80045e6:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <osKernelInitialize+0x64>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e002      	b.n	80045f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000544 	.word	0x20000544

0800460c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004612:	f3ef 8305 	mrs	r3, IPSR
 8004616:	60bb      	str	r3, [r7, #8]
  return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	607b      	str	r3, [r7, #4]
  return(result);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <osKernelStart+0x32>
 800462a:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <osKernelStart+0x64>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d109      	bne.n	8004646 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004632:	f3ef 8311 	mrs	r3, BASEPRI
 8004636:	603b      	str	r3, [r7, #0]
  return(result);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <osKernelStart+0x3a>
    stat = osErrorISR;
 800463e:	f06f 0305 	mvn.w	r3, #5
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e00e      	b.n	8004664 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004646:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <osKernelStart+0x64>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800464e:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <osKernelStart+0x64>)
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004654:	f001 fadc 	bl	8005c10 <vTaskStartScheduler>
      stat = osOK;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <osKernelStart+0x58>
    } else {
      stat = osError;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000544 	.word	0x20000544

08004674 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b092      	sub	sp, #72	@ 0x48
 8004678:	af04      	add	r7, sp, #16
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8094 	bne.w	80047ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004692:	f3ef 8310 	mrs	r3, PRIMASK
 8004696:	623b      	str	r3, [r7, #32]
  return(result);
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 808d 	bne.w	80047ba <osThreadNew+0x146>
 80046a0:	4b48      	ldr	r3, [pc, #288]	@ (80047c4 <osThreadNew+0x150>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d106      	bne.n	80046b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a8:	f3ef 8311 	mrs	r3, BASEPRI
 80046ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 8082 	bne.w	80047ba <osThreadNew+0x146>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d07e      	beq.n	80047ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046c0:	2318      	movs	r3, #24
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80046c4:	2300      	movs	r3, #0
 80046c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80046c8:	f107 031b 	add.w	r3, r7, #27
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d045      	beq.n	8004766 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <osThreadNew+0x74>
        name = attr->name;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <osThreadNew+0x9a>
 80046fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fe:	2b38      	cmp	r3, #56	@ 0x38
 8004700:	d805      	bhi.n	800470e <osThreadNew+0x9a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <osThreadNew+0x9e>
        return (NULL);
 800470e:	2300      	movs	r3, #0
 8004710:	e054      	b.n	80047bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <osThreadNew+0xd4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004730:	d90a      	bls.n	8004748 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <osThreadNew+0xd4>
        mem = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004746:	e010      	b.n	800476a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10c      	bne.n	800476a <osThreadNew+0xf6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d108      	bne.n	800476a <osThreadNew+0xf6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <osThreadNew+0xf6>
          mem = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004764:	e001      	b.n	800476a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	2b01      	cmp	r3, #1
 800476e:	d110      	bne.n	8004792 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004778:	9202      	str	r2, [sp, #8]
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004784:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f001 f858 	bl	800583c <xTaskCreateStatic>
 800478c:	4603      	mov	r3, r0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e013      	b.n	80047ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	b29a      	uxth	r2, r3
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f001 f8a5 	bl	80058fa <xTaskCreate>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d001      	beq.n	80047ba <osThreadNew+0x146>
          hTask = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3738      	adds	r7, #56	@ 0x38
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000544 	.word	0x20000544

080047c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d0:	f3ef 8305 	mrs	r3, IPSR
 80047d4:	613b      	str	r3, [r7, #16]
  return(result);
 80047d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10f      	bne.n	80047fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047dc:	f3ef 8310 	mrs	r3, PRIMASK
 80047e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <osDelay+0x34>
 80047e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <osDelay+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d109      	bne.n	8004804 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047f0:	f3ef 8311 	mrs	r3, BASEPRI
 80047f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <osDelay+0x3c>
    stat = osErrorISR;
 80047fc:	f06f 0305 	mvn.w	r3, #5
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e007      	b.n	8004814 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <osDelay+0x4c>
      vTaskDelay(ticks);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 f9c8 	bl	8005ba4 <vTaskDelay>
    }
  }

  return (stat);
 8004814:	697b      	ldr	r3, [r7, #20]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000544 	.word	0x20000544

08004824 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b08c      	sub	sp, #48	@ 0x30
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004834:	f3ef 8305 	mrs	r3, IPSR
 8004838:	61bb      	str	r3, [r7, #24]
  return(result);
 800483a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800483c:	2b00      	cmp	r3, #0
 800483e:	d16f      	bne.n	8004920 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004840:	f3ef 8310 	mrs	r3, PRIMASK
 8004844:	617b      	str	r3, [r7, #20]
  return(result);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d169      	bne.n	8004920 <osMessageQueueNew+0xfc>
 800484c:	4b37      	ldr	r3, [pc, #220]	@ (800492c <osMessageQueueNew+0x108>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d105      	bne.n	8004860 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004854:	f3ef 8311 	mrs	r3, BASEPRI
 8004858:	613b      	str	r3, [r7, #16]
  return(result);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d15f      	bne.n	8004920 <osMessageQueueNew+0xfc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d05c      	beq.n	8004920 <osMessageQueueNew+0xfc>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d059      	beq.n	8004920 <osMessageQueueNew+0xfc>
    mem = -1;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d029      	beq.n	80048cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <osMessageQueueNew+0x82>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b4f      	cmp	r3, #79	@ 0x4f
 8004886:	d90e      	bls.n	80048a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <osMessageQueueNew+0x82>
        mem = 1;
 80048a0:	2301      	movs	r3, #1
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	e014      	b.n	80048d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d110      	bne.n	80048d0 <osMessageQueueNew+0xac>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <osMessageQueueNew+0xac>
          mem = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	e001      	b.n	80048d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10b      	bne.n	80048ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2100      	movs	r1, #0
 80048e0:	9100      	str	r1, [sp, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fa5b 	bl	8004da0 <xQueueGenericCreateStatic>
 80048ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80048ec:	e008      	b.n	8004900 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80048f4:	2200      	movs	r2, #0
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 facd 	bl	8004e98 <xQueueGenericCreate>
 80048fe:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <osMessageQueueNew+0xf0>
        name = attr->name;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e001      	b.n	8004918 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004918:	69f9      	ldr	r1, [r7, #28]
 800491a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800491c:	f000 ff30 	bl	8005780 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	@ 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000544 	.word	0x20000544

08004930 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004948:	f3ef 8305 	mrs	r3, IPSR
 800494c:	61fb      	str	r3, [r7, #28]
  return(result);
 800494e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	61bb      	str	r3, [r7, #24]
  return(result);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <osMessageQueuePut+0x44>
 8004960:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <osMessageQueuePut+0xe0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d12e      	bne.n	80049c6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004968:	f3ef 8311 	mrs	r3, BASEPRI
 800496c:	617b      	str	r3, [r7, #20]
  return(result);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d028      	beq.n	80049c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <osMessageQueuePut+0x56>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <osMessageQueuePut+0x56>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004986:	f06f 0303 	mvn.w	r3, #3
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800498c:	e039      	b.n	8004a02 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004992:	f107 0210 	add.w	r2, r7, #16
 8004996:	2300      	movs	r3, #0
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	6a38      	ldr	r0, [r7, #32]
 800499c:	f000 fbe0 	bl	8005160 <xQueueGenericSendFromISR>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d003      	beq.n	80049ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80049a6:	f06f 0302 	mvn.w	r3, #2
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049ac:	e029      	b.n	8004a02 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d026      	beq.n	8004a02 <osMessageQueuePut+0xd2>
 80049b4:	4b17      	ldr	r3, [pc, #92]	@ (8004a14 <osMessageQueuePut+0xe4>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049c4:	e01d      	b.n	8004a02 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <osMessageQueuePut+0xa2>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80049d2:	f06f 0303 	mvn.w	r3, #3
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d8:	e014      	b.n	8004a04 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049da:	2300      	movs	r3, #0
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	6a38      	ldr	r0, [r7, #32]
 80049e2:	f000 fabb 	bl	8004f5c <xQueueGenericSend>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d00b      	beq.n	8004a04 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80049f2:	f06f 0301 	mvn.w	r3, #1
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	e004      	b.n	8004a04 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80049fa:	f06f 0302 	mvn.w	r3, #2
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a00:	e000      	b.n	8004a04 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a02:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3728      	adds	r7, #40	@ 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000544 	.word	0x20000544
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a2e:	f3ef 8305 	mrs	r3, IPSR
 8004a32:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a34:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <osMessageQueueGet+0x42>
 8004a46:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <osMessageQueueGet+0xdc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d12e      	bne.n	8004aac <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a52:	617b      	str	r3, [r7, #20]
  return(result);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d028      	beq.n	8004aac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <osMessageQueueGet+0x54>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <osMessageQueueGet+0x54>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004a6c:	f06f 0303 	mvn.w	r3, #3
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a72:	e038      	b.n	8004ae6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	6a38      	ldr	r0, [r7, #32]
 8004a82:	f000 fceb 	bl	800545c <xQueueReceiveFromISR>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d003      	beq.n	8004a94 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004a8c:	f06f 0302 	mvn.w	r3, #2
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a92:	e028      	b.n	8004ae6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d025      	beq.n	8004ae6 <osMessageQueueGet+0xce>
 8004a9a:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <osMessageQueueGet+0xe0>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aaa:	e01c      	b.n	8004ae6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <osMessageQueueGet+0xa0>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004ab8:	f06f 0303 	mvn.w	r3, #3
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abe:	e013      	b.n	8004ae8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	6a38      	ldr	r0, [r7, #32]
 8004ac6:	f000 fbe7 	bl	8005298 <xQueueReceive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d00b      	beq.n	8004ae8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004ad6:	f06f 0301 	mvn.w	r3, #1
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8004adc:	e004      	b.n	8004ae8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004ade:	f06f 0302 	mvn.w	r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae4:	e000      	b.n	8004ae8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ae6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3728      	adds	r7, #40	@ 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000544 	.word	0x20000544
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a07      	ldr	r2, [pc, #28]	@ (8004b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a06      	ldr	r2, [pc, #24]	@ (8004b2c <vApplicationGetIdleTaskMemory+0x30>)
 8004b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2280      	movs	r2, #128	@ 0x80
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000548 	.word	0x20000548
 8004b2c:	200005f0 	.word	0x200005f0

08004b30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a07      	ldr	r2, [pc, #28]	@ (8004b5c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a06      	ldr	r2, [pc, #24]	@ (8004b60 <vApplicationGetTimerTaskMemory+0x30>)
 8004b46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	200007f0 	.word	0x200007f0
 8004b60:	20000898 	.word	0x20000898

08004b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f103 0208 	add.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f103 0208 	add.w	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f103 0208 	add.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d103      	bne.n	8004c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e00c      	b.n	8004c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e002      	b.n	8004c34 <vListInsert+0x2e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d2f6      	bcs.n	8004c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6892      	ldr	r2, [r2, #8]
 8004c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6852      	ldr	r2, [r2, #4]
 8004c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d103      	bne.n	8004cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1e5a      	subs	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cf8:	f002 f92e 	bl	8006f58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	441a      	add	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	441a      	add	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	22ff      	movs	r2, #255	@ 0xff
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	22ff      	movs	r2, #255	@ 0xff
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d114      	bne.n	8004d78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01a      	beq.n	8004d8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3310      	adds	r3, #16
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f9fc 	bl	8006158 <xTaskRemoveFromEventList>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <xQueueGenericReset+0xd0>)
 8004d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	e009      	b.n	8004d8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fef1 	bl	8004b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3324      	adds	r3, #36	@ 0x24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff feec 	bl	8004b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d8c:	f002 f916 	bl	8006fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d90:	2301      	movs	r3, #1
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	@ 0x38
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <xQueueGenericCreateStatic+0x56>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <xQueueGenericCreateStatic+0x5a>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <xQueueGenericCreateStatic+0x5c>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	623b      	str	r3, [r7, #32]
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <xQueueGenericCreateStatic+0x84>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <xQueueGenericCreateStatic+0x88>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <xQueueGenericCreateStatic+0x8a>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	61fb      	str	r3, [r7, #28]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e46:	2350      	movs	r3, #80	@ 0x50
 8004e48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b50      	cmp	r3, #80	@ 0x50
 8004e4e:	d00b      	beq.n	8004e68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61bb      	str	r3, [r7, #24]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e7a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f844 	bl	8004f16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	@ 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	613b      	str	r3, [r7, #16]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e004      	b.n	8004eda <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3350      	adds	r3, #80	@ 0x50
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f002 f95c 	bl	800719c <pvPortMalloc>
 8004ee4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00f      	beq.n	8004f0c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3350      	adds	r3, #80	@ 0x50
 8004ef0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004efa:	79fa      	ldrb	r2, [r7, #7]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f805 	bl	8004f16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f44:	2101      	movs	r1, #1
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f7ff fec0 	bl	8004ccc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	@ 0x38
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <xQueueGenericSend+0x34>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x42>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xQueueGenericSend+0x46>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGenericSend+0x48>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xQueueGenericSend+0x64>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d103      	bne.n	8004fce <xQueueGenericSend+0x72>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <xQueueGenericSend+0x76>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueGenericSend+0x78>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSend+0x94>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	623b      	str	r3, [r7, #32]
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff0:	f001 fa7e 	bl	80064f0 <xTaskGetSchedulerState>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <xQueueGenericSend+0xa4>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <xQueueGenericSend+0xa8>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <xQueueGenericSend+0xaa>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <xQueueGenericSend+0xc6>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	61fb      	str	r3, [r7, #28]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005022:	f001 ff99 	bl	8006f58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <xQueueGenericSend+0xdc>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d129      	bne.n	800508c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800503e:	f000 fa8f 	bl	8005560 <prvCopyDataToQueue>
 8005042:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	3324      	adds	r3, #36	@ 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f001 f881 	bl	8006158 <xTaskRemoveFromEventList>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800505c:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <xQueueGenericSend+0x200>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e00a      	b.n	8005084 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005074:	4b39      	ldr	r3, [pc, #228]	@ (800515c <xQueueGenericSend+0x200>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005084:	f001 ff9a 	bl	8006fbc <vPortExitCritical>
				return pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	e063      	b.n	8005154 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005092:	f001 ff93 	bl	8006fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005096:	2300      	movs	r3, #0
 8005098:	e05c      	b.n	8005154 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f8bb 	bl	8006220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050aa:	2301      	movs	r3, #1
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ae:	f001 ff85 	bl	8006fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b2:	f000 fe1d 	bl	8005cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b6:	f001 ff4f 	bl	8006f58 <vPortEnterCritical>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d103      	bne.n	80050d0 <xQueueGenericSend+0x174>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSend+0x18a>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e6:	f001 ff69 	bl	8006fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ea:	1d3a      	adds	r2, r7, #4
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f8aa 	bl	800624c <xTaskCheckForTimeOut>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d124      	bne.n	8005148 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005100:	f000 fb26 	bl	8005750 <prvIsQueueFull>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	3310      	adds	r3, #16
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ffce 	bl	80060b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800511a:	f000 fab1 	bl	8005680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800511e:	f000 fdf5 	bl	8005d0c <xTaskResumeAll>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af7c 	bne.w	8005022 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <xQueueGenericSend+0x200>)
 800512c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	e772      	b.n	8005022 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513e:	f000 fa9f 	bl	8005680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005142:	f000 fde3 	bl	8005d0c <xTaskResumeAll>
 8005146:	e76c      	b.n	8005022 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800514a:	f000 fa99 	bl	8005680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800514e:	f000 fddd 	bl	8005d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005152:	2300      	movs	r3, #0
		}
	}
}
 8005154:	4618      	mov	r0, r3
 8005156:	3738      	adds	r7, #56	@ 0x38
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08e      	sub	sp, #56	@ 0x38
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <xQueueGenericSendFromISR+0x3e>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSendFromISR+0x42>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSendFromISR+0x44>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d103      	bne.n	80051ce <xQueueGenericSendFromISR+0x6e>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <xQueueGenericSendFromISR+0x72>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericSendFromISR+0x74>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	61fb      	str	r3, [r7, #28]
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f0:	f001 ff92 	bl	8007118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051f4:	f3ef 8211 	mrs	r2, BASEPRI
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61ba      	str	r2, [r7, #24]
 800520a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800520c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <xQueueGenericSendFromISR+0xc2>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d12c      	bne.n	800527c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005232:	f000 f995 	bl	8005560 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005236:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d112      	bne.n	8005266 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	3324      	adds	r3, #36	@ 0x24
 800524c:	4618      	mov	r0, r3
 800524e:	f000 ff83 	bl	8006158 <xTaskRemoveFromEventList>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e007      	b.n	8005276 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800526a:	3301      	adds	r3, #1
 800526c:	b2db      	uxtb	r3, r3
 800526e:	b25a      	sxtb	r2, r3
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005276:	2301      	movs	r3, #1
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800527a:	e001      	b.n	8005280 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800527c:	2300      	movs	r3, #0
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800528a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800528c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800528e:	4618      	mov	r0, r3
 8005290:	3738      	adds	r7, #56	@ 0x38
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	@ 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <xQueueReceive+0x32>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	623b      	str	r3, [r7, #32]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <xQueueReceive+0x40>
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <xQueueReceive+0x44>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <xQueueReceive+0x46>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <xQueueReceive+0x62>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	61fb      	str	r3, [r7, #28]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052fa:	f001 f8f9 	bl	80064f0 <xTaskGetSchedulerState>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <xQueueReceive+0x72>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <xQueueReceive+0x76>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueReceive+0x78>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueReceive+0x94>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	61bb      	str	r3, [r7, #24]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800532c:	f001 fe14 	bl	8006f58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01f      	beq.n	800537c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005340:	f000 f978 	bl	8005634 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00f      	beq.n	8005374 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	3310      	adds	r3, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fefd 	bl	8006158 <xTaskRemoveFromEventList>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005364:	4b3c      	ldr	r3, [pc, #240]	@ (8005458 <xQueueReceive+0x1c0>)
 8005366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005374:	f001 fe22 	bl	8006fbc <vPortExitCritical>
				return pdPASS;
 8005378:	2301      	movs	r3, #1
 800537a:	e069      	b.n	8005450 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005382:	f001 fe1b 	bl	8006fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005386:	2300      	movs	r3, #0
 8005388:	e062      	b.n	8005450 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005390:	f107 0310 	add.w	r3, r7, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f000 ff43 	bl	8006220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800539e:	f001 fe0d 	bl	8006fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053a2:	f000 fca5 	bl	8005cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053a6:	f001 fdd7 	bl	8006f58 <vPortEnterCritical>
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053b0:	b25b      	sxtb	r3, r3
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d103      	bne.n	80053c0 <xQueueReceive+0x128>
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d103      	bne.n	80053d6 <xQueueReceive+0x13e>
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053d6:	f001 fdf1 	bl	8006fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053da:	1d3a      	adds	r2, r7, #4
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 ff32 	bl	800624c <xTaskCheckForTimeOut>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d123      	bne.n	8005436 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f0:	f000 f998 	bl	8005724 <prvIsQueueEmpty>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	3324      	adds	r3, #36	@ 0x24
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fe56 	bl	80060b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540a:	f000 f939 	bl	8005680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800540e:	f000 fc7d 	bl	8005d0c <xTaskResumeAll>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d189      	bne.n	800532c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005418:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <xQueueReceive+0x1c0>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e780      	b.n	800532c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800542a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800542c:	f000 f928 	bl	8005680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005430:	f000 fc6c 	bl	8005d0c <xTaskResumeAll>
 8005434:	e77a      	b.n	800532c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005438:	f000 f922 	bl	8005680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800543c:	f000 fc66 	bl	8005d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005442:	f000 f96f 	bl	8005724 <prvIsQueueEmpty>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	f43f af6f 	beq.w	800532c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800544e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005450:	4618      	mov	r0, r3
 8005452:	3730      	adds	r7, #48	@ 0x30
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	@ 0x38
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	623b      	str	r3, [r7, #32]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <xQueueReceiveFromISR+0x3c>
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <xQueueReceiveFromISR+0x40>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <xQueueReceiveFromISR+0x42>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	61fb      	str	r3, [r7, #28]
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	e7fd      	b.n	80054b6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054ba:	f001 fe2d 	bl	8007118 <vPortValidateInterruptPriority>
	__asm volatile
 80054be:	f3ef 8211 	mrs	r2, BASEPRI
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61ba      	str	r2, [r7, #24]
 80054d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80054d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02f      	beq.n	8005546 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054f4:	f000 f89e 	bl	8005634 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	1e5a      	subs	r2, r3, #1
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005500:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d112      	bne.n	8005530 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	3310      	adds	r3, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fe1e 	bl	8006158 <xTaskRemoveFromEventList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e007      	b.n	8005540 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005534:	3301      	adds	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	b25a      	sxtb	r2, r3
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
 8005544:	e001      	b.n	800554a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	637b      	str	r3, [r7, #52]	@ 0x34
 800554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f383 8811 	msr	BASEPRI, r3
}
 8005554:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005558:	4618      	mov	r0, r3
 800555a:	3738      	adds	r7, #56	@ 0x38
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10d      	bne.n	800559a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d14d      	bne.n	8005622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ffce 	bl	800652c <xTaskPriorityDisinherit>
 8005590:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	e043      	b.n	8005622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d119      	bne.n	80055d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6898      	ldr	r0, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	461a      	mov	r2, r3
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	f002 f862 	bl	8007674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d32b      	bcc.n	8005622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	609a      	str	r2, [r3, #8]
 80055d2:	e026      	b.n	8005622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68d8      	ldr	r0, [r3, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	461a      	mov	r2, r3
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	f002 f848 	bl	8007674 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	425b      	negs	r3, r3
 80055ee:	441a      	add	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d207      	bcs.n	8005610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	425b      	negs	r3, r3
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d105      	bne.n	8005622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3b01      	subs	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d018      	beq.n	8005678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d303      	bcc.n	8005668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68d9      	ldr	r1, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	461a      	mov	r2, r3
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f001 fffe 	bl	8007674 <memcpy>
	}
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005688:	f001 fc66 	bl	8006f58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005694:	e011      	b.n	80056ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3324      	adds	r3, #36	@ 0x24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fd58 	bl	8006158 <xTaskRemoveFromEventList>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ae:	f000 fe31 	bl	8006314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dce9      	bgt.n	8005696 <prvUnlockQueue+0x16>
 80056c2:	e000      	b.n	80056c6 <prvUnlockQueue+0x46>
					break;
 80056c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	22ff      	movs	r2, #255	@ 0xff
 80056ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056ce:	f001 fc75 	bl	8006fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056d2:	f001 fc41 	bl	8006f58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056de:	e011      	b.n	8005704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d012      	beq.n	800570e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3310      	adds	r3, #16
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fd33 	bl	8006158 <xTaskRemoveFromEventList>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056f8:	f000 fe0c 	bl	8006314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	3b01      	subs	r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005708:	2b00      	cmp	r3, #0
 800570a:	dce9      	bgt.n	80056e0 <prvUnlockQueue+0x60>
 800570c:	e000      	b.n	8005710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800570e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	22ff      	movs	r2, #255	@ 0xff
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005718:	f001 fc50 	bl	8006fbc <vPortExitCritical>
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800572c:	f001 fc14 	bl	8006f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e001      	b.n	8005742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005742:	f001 fc3b 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005758:	f001 fbfe 	bl	8006f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005764:	429a      	cmp	r2, r3
 8005766:	d102      	bne.n	800576e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e001      	b.n	8005772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005772:	f001 fc23 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 8005776:	68fb      	ldr	r3, [r7, #12]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e014      	b.n	80057ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005790:	4a0f      	ldr	r2, [pc, #60]	@ (80057d0 <vQueueAddToRegistry+0x50>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800579c:	490c      	ldr	r1, [pc, #48]	@ (80057d0 <vQueueAddToRegistry+0x50>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057a6:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <vQueueAddToRegistry+0x50>)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057b2:	e006      	b.n	80057c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b07      	cmp	r3, #7
 80057be:	d9e7      	bls.n	8005790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000c98 	.word	0x20000c98

080057d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057e4:	f001 fbb8 	bl	8006f58 <vPortEnterCritical>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d103      	bne.n	80057fe <vQueueWaitForMessageRestricted+0x2a>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005804:	b25b      	sxtb	r3, r3
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d103      	bne.n	8005814 <vQueueWaitForMessageRestricted+0x40>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005814:	f001 fbd2 	bl	8006fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3324      	adds	r3, #36	@ 0x24
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fc69 	bl	8006100 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f7ff ff26 	bl	8005680 <prvUnlockQueue>
	}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	@ 0x38
 8005840:	af04      	add	r7, sp, #16
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800584a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10b      	bne.n	8005868 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	623b      	str	r3, [r7, #32]
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	e7fd      	b.n	8005864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <xTaskCreateStatic+0x4a>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61fb      	str	r3, [r7, #28]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005886:	23a8      	movs	r3, #168	@ 0xa8
 8005888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2ba8      	cmp	r3, #168	@ 0xa8
 800588e:	d00b      	beq.n	80058a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61bb      	str	r3, [r7, #24]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01e      	beq.n	80058ec <xTaskCreateStatic+0xb0>
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058c6:	2300      	movs	r3, #0
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	f107 0314 	add.w	r3, r7, #20
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f850 	bl	8005984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058e6:	f000 f8ed 	bl	8005ac4 <prvAddNewTaskToReadyList>
 80058ea:	e001      	b.n	80058f0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058f0:	697b      	ldr	r3, [r7, #20]
	}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3728      	adds	r7, #40	@ 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08c      	sub	sp, #48	@ 0x30
 80058fe:	af04      	add	r7, sp, #16
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fc44 	bl	800719c <pvPortMalloc>
 8005914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800591c:	20a8      	movs	r0, #168	@ 0xa8
 800591e:	f001 fc3d 	bl	800719c <pvPortMalloc>
 8005922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005930:	e005      	b.n	800593e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005932:	6978      	ldr	r0, [r7, #20]
 8005934:	f001 fcfa 	bl	800732c <vPortFree>
 8005938:	e001      	b.n	800593e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d017      	beq.n	8005974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	2300      	movs	r3, #0
 8005950:	9303      	str	r3, [sp, #12]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f80e 	bl	8005984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005968:	69f8      	ldr	r0, [r7, #28]
 800596a:	f000 f8ab 	bl	8005ac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800596e:	2301      	movs	r3, #1
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e002      	b.n	800597a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800597a:	69bb      	ldr	r3, [r7, #24]
	}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	461a      	mov	r2, r3
 800599c:	21a5      	movs	r1, #165	@ 0xa5
 800599e:	f001 fddd 	bl	800755c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ac:	3b01      	subs	r3, #1
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f023 0307 	bic.w	r3, r3, #7
 80059ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e012      	b.n	8005a0a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	7819      	ldrb	r1, [r3, #0]
 80059ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	3334      	adds	r3, #52	@ 0x34
 80059f4:	460a      	mov	r2, r1
 80059f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d9e9      	bls.n	80059e4 <prvInitialiseNewTask+0x60>
 8005a10:	e000      	b.n	8005a14 <prvInitialiseNewTask+0x90>
		{
			break;
 8005a12:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	2b37      	cmp	r3, #55	@ 0x37
 8005a20:	d901      	bls.n	8005a26 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a22:	2337      	movs	r3, #55	@ 0x37
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2200      	movs	r2, #0
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff f8b1 	bl	8004ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	3318      	adds	r3, #24
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff f8ac 	bl	8004ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	3354      	adds	r3, #84	@ 0x54
 8005a76:	224c      	movs	r2, #76	@ 0x4c
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 fd6e 	bl	800755c <memset>
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab8 <prvInitialiseNewTask+0x134>)
 8005a84:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	4a0c      	ldr	r2, [pc, #48]	@ (8005abc <prvInitialiseNewTask+0x138>)
 8005a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac0 <prvInitialiseNewTask+0x13c>)
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	68f9      	ldr	r1, [r7, #12]
 8005a96:	69b8      	ldr	r0, [r7, #24]
 8005a98:	f001 f92c 	bl	8006cf4 <pxPortInitialiseStack>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aae:	bf00      	nop
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20001f24 	.word	0x20001f24
 8005abc:	20001f8c 	.word	0x20001f8c
 8005ac0:	20001ff4 	.word	0x20001ff4

08005ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005acc:	f001 fa44 	bl	8006f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8005b88 <prvAddNewTaskToReadyList+0xc4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b88 <prvAddNewTaskToReadyList+0xc4>)
 8005ad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ada:	4b2c      	ldr	r3, [pc, #176]	@ (8005b8c <prvAddNewTaskToReadyList+0xc8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b8c <prvAddNewTaskToReadyList+0xc8>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <prvAddNewTaskToReadyList+0xc4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d110      	bne.n	8005b12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005af0:	f000 fc34 	bl	800635c <prvInitialiseTaskLists>
 8005af4:	e00d      	b.n	8005b12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005af6:	4b26      	ldr	r3, [pc, #152]	@ (8005b90 <prvAddNewTaskToReadyList+0xcc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005afe:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <prvAddNewTaskToReadyList+0xc8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d802      	bhi.n	8005b12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005b8c <prvAddNewTaskToReadyList+0xc8>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b12:	4b20      	ldr	r3, [pc, #128]	@ (8005b94 <prvAddNewTaskToReadyList+0xd0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	4a1e      	ldr	r2, [pc, #120]	@ (8005b94 <prvAddNewTaskToReadyList+0xd0>)
 8005b1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <prvAddNewTaskToReadyList+0xd0>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <prvAddNewTaskToReadyList+0xd4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d903      	bls.n	8005b38 <prvAddNewTaskToReadyList+0x74>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	4a18      	ldr	r2, [pc, #96]	@ (8005b98 <prvAddNewTaskToReadyList+0xd4>)
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <prvAddNewTaskToReadyList+0xd8>)
 8005b46:	441a      	add	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f7ff f835 	bl	8004bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b54:	f001 fa32 	bl	8006fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b58:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <prvAddNewTaskToReadyList+0xcc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <prvAddNewTaskToReadyList+0xc8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d207      	bcs.n	8005b7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <prvAddNewTaskToReadyList+0xdc>)
 8005b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200011ac 	.word	0x200011ac
 8005b8c:	20000cd8 	.word	0x20000cd8
 8005b90:	200011b8 	.word	0x200011b8
 8005b94:	200011c8 	.word	0x200011c8
 8005b98:	200011b4 	.word	0x200011b4
 8005b9c:	20000cdc 	.word	0x20000cdc
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bb6:	4b14      	ldr	r3, [pc, #80]	@ (8005c08 <vTaskDelay+0x64>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <vTaskDelay+0x32>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bd6:	f000 f88b 	bl	8005cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bda:	2100      	movs	r1, #0
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fd15 	bl	800660c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005be2:	f000 f893 	bl	8005d0c <xTaskResumeAll>
 8005be6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bee:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <vTaskDelay+0x68>)
 8005bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200011d4 	.word	0x200011d4
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	@ 0x28
 8005c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c1e:	463a      	mov	r2, r7
 8005c20:	1d39      	adds	r1, r7, #4
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe ff68 	bl	8004afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	9202      	str	r2, [sp, #8]
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	4924      	ldr	r1, [pc, #144]	@ (8005cd0 <vTaskStartScheduler+0xc0>)
 8005c40:	4824      	ldr	r0, [pc, #144]	@ (8005cd4 <vTaskStartScheduler+0xc4>)
 8005c42:	f7ff fdfb 	bl	800583c <xTaskCreateStatic>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a23      	ldr	r2, [pc, #140]	@ (8005cd8 <vTaskStartScheduler+0xc8>)
 8005c4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c4c:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <vTaskStartScheduler+0xc8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e001      	b.n	8005c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c64:	f000 fd26 	bl	80066b4 <xTimerCreateTimerTask>
 8005c68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d11b      	bne.n	8005ca8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c84:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <vTaskStartScheduler+0xcc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3354      	adds	r3, #84	@ 0x54
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <vTaskStartScheduler+0xd0>)
 8005c8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <vTaskStartScheduler+0xd4>)
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c96:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <vTaskStartScheduler+0xd8>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <vTaskStartScheduler+0xdc>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ca2:	f001 f8b5 	bl	8006e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ca6:	e00f      	b.n	8005cc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d10b      	bne.n	8005cc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <vTaskStartScheduler+0xb4>
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08007770 	.word	0x08007770
 8005cd4:	0800632d 	.word	0x0800632d
 8005cd8:	200011d0 	.word	0x200011d0
 8005cdc:	20000cd8 	.word	0x20000cd8
 8005ce0:	20000010 	.word	0x20000010
 8005ce4:	200011cc 	.word	0x200011cc
 8005ce8:	200011b8 	.word	0x200011b8
 8005cec:	200011b0 	.word	0x200011b0

08005cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cf4:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <vTaskSuspendAll+0x18>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	4a03      	ldr	r2, [pc, #12]	@ (8005d08 <vTaskSuspendAll+0x18>)
 8005cfc:	6013      	str	r3, [r2, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	200011d4 	.word	0x200011d4

08005d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d1a:	4b42      	ldr	r3, [pc, #264]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <xTaskResumeAll+0x2e>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	603b      	str	r3, [r7, #0]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d3a:	f001 f90d 	bl	8006f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d3e:	4b39      	ldr	r3, [pc, #228]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4a37      	ldr	r2, [pc, #220]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d48:	4b36      	ldr	r3, [pc, #216]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d162      	bne.n	8005e16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d50:	4b35      	ldr	r3, [pc, #212]	@ (8005e28 <xTaskResumeAll+0x11c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05e      	beq.n	8005e16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d58:	e02f      	b.n	8005dba <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d5a:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <xTaskResumeAll+0x120>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe ff86 	bl	8004c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe ff81 	bl	8004c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e30 <xTaskResumeAll+0x124>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d903      	bls.n	8005d8a <xTaskResumeAll+0x7e>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	4a2a      	ldr	r2, [pc, #168]	@ (8005e30 <xTaskResumeAll+0x124>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <xTaskResumeAll+0x128>)
 8005d98:	441a      	add	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe ff0c 	bl	8004bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005daa:	4b23      	ldr	r3, [pc, #140]	@ (8005e38 <xTaskResumeAll+0x12c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005db4:	4b21      	ldr	r3, [pc, #132]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dba:	4b1c      	ldr	r3, [pc, #112]	@ (8005e2c <xTaskResumeAll+0x120>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1cb      	bne.n	8005d5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dc8:	f000 fb6c 	bl	80064a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8005e40 <xTaskResumeAll+0x134>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dd8:	f000 f846 	bl	8005e68 <xTaskIncrementTick>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005de2:	4b16      	ldr	r3, [pc, #88]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f1      	bne.n	8005dd8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005df4:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <xTaskResumeAll+0x134>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e06:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <xTaskResumeAll+0x138>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e16:	f001 f8d1 	bl	8006fbc <vPortExitCritical>

	return xAlreadyYielded;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	200011d4 	.word	0x200011d4
 8005e28:	200011ac 	.word	0x200011ac
 8005e2c:	2000116c 	.word	0x2000116c
 8005e30:	200011b4 	.word	0x200011b4
 8005e34:	20000cdc 	.word	0x20000cdc
 8005e38:	20000cd8 	.word	0x20000cd8
 8005e3c:	200011c0 	.word	0x200011c0
 8005e40:	200011bc 	.word	0x200011bc
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e4e:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <xTaskGetTickCount+0x1c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e54:	687b      	ldr	r3, [r7, #4]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	200011b0 	.word	0x200011b0

08005e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e72:	4b52      	ldr	r3, [pc, #328]	@ (8005fbc <xTaskIncrementTick+0x154>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 808f 	bne.w	8005f9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e7c:	4b50      	ldr	r3, [pc, #320]	@ (8005fc0 <xTaskIncrementTick+0x158>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e84:	4a4e      	ldr	r2, [pc, #312]	@ (8005fc0 <xTaskIncrementTick+0x158>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d121      	bne.n	8005ed4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e90:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc4 <xTaskIncrementTick+0x15c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	603b      	str	r3, [r7, #0]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <xTaskIncrementTick+0x46>
 8005eb2:	4b44      	ldr	r3, [pc, #272]	@ (8005fc4 <xTaskIncrementTick+0x15c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	4b43      	ldr	r3, [pc, #268]	@ (8005fc8 <xTaskIncrementTick+0x160>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a41      	ldr	r2, [pc, #260]	@ (8005fc4 <xTaskIncrementTick+0x15c>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4a41      	ldr	r2, [pc, #260]	@ (8005fc8 <xTaskIncrementTick+0x160>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4b41      	ldr	r3, [pc, #260]	@ (8005fcc <xTaskIncrementTick+0x164>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8005fcc <xTaskIncrementTick+0x164>)
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	f000 fae8 	bl	80064a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd0 <xTaskIncrementTick+0x168>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d34e      	bcc.n	8005f7c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ede:	4b39      	ldr	r3, [pc, #228]	@ (8005fc4 <xTaskIncrementTick+0x15c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <xTaskIncrementTick+0x84>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <xTaskIncrementTick+0x86>
 8005eec:	2300      	movs	r3, #0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	4b37      	ldr	r3, [pc, #220]	@ (8005fd0 <xTaskIncrementTick+0x168>)
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	601a      	str	r2, [r3, #0]
					break;
 8005efa:	e03f      	b.n	8005f7c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005efc:	4b31      	ldr	r3, [pc, #196]	@ (8005fc4 <xTaskIncrementTick+0x15c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d203      	bcs.n	8005f1c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f14:	4a2e      	ldr	r2, [pc, #184]	@ (8005fd0 <xTaskIncrementTick+0x168>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6013      	str	r3, [r2, #0]
						break;
 8005f1a:	e02f      	b.n	8005f7c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fea9 	bl	8004c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fea0 	bl	8004c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	4b25      	ldr	r3, [pc, #148]	@ (8005fd4 <xTaskIncrementTick+0x16c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <xTaskIncrementTick+0xe4>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	4a22      	ldr	r2, [pc, #136]	@ (8005fd4 <xTaskIncrementTick+0x16c>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <xTaskIncrementTick+0x170>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fe fe2b 	bl	8004bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fdc <xTaskIncrementTick+0x174>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3b3      	bcc.n	8005ede <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f76:	2301      	movs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	e7b0      	b.n	8005ede <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f7c:	4b17      	ldr	r3, [pc, #92]	@ (8005fdc <xTaskIncrementTick+0x174>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f82:	4915      	ldr	r1, [pc, #84]	@ (8005fd8 <xTaskIncrementTick+0x170>)
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d907      	bls.n	8005fa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e004      	b.n	8005fa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <xTaskIncrementTick+0x178>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8005fe0 <xTaskIncrementTick+0x178>)
 8005fa2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <xTaskIncrementTick+0x17c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fb0:	697b      	ldr	r3, [r7, #20]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200011d4 	.word	0x200011d4
 8005fc0:	200011b0 	.word	0x200011b0
 8005fc4:	20001164 	.word	0x20001164
 8005fc8:	20001168 	.word	0x20001168
 8005fcc:	200011c4 	.word	0x200011c4
 8005fd0:	200011cc 	.word	0x200011cc
 8005fd4:	200011b4 	.word	0x200011b4
 8005fd8:	20000cdc 	.word	0x20000cdc
 8005fdc:	20000cd8 	.word	0x20000cd8
 8005fe0:	200011bc 	.word	0x200011bc
 8005fe4:	200011c0 	.word	0x200011c0

08005fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fee:	4b2b      	ldr	r3, [pc, #172]	@ (800609c <vTaskSwitchContext+0xb4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80060a0 <vTaskSwitchContext+0xb8>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ffc:	e047      	b.n	800608e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005ffe:	4b28      	ldr	r3, [pc, #160]	@ (80060a0 <vTaskSwitchContext+0xb8>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <vTaskSwitchContext+0xbc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e011      	b.n	8006030 <vTaskSwitchContext+0x48>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <vTaskSwitchContext+0x42>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	607b      	str	r3, [r7, #4]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <vTaskSwitchContext+0x3e>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b01      	subs	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	491d      	ldr	r1, [pc, #116]	@ (80060a8 <vTaskSwitchContext+0xc0>)
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0e3      	beq.n	800600c <vTaskSwitchContext+0x24>
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <vTaskSwitchContext+0xc0>)
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	3308      	adds	r3, #8
 8006066:	429a      	cmp	r2, r3
 8006068:	d104      	bne.n	8006074 <vTaskSwitchContext+0x8c>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4a0c      	ldr	r2, [pc, #48]	@ (80060ac <vTaskSwitchContext+0xc4>)
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4a09      	ldr	r2, [pc, #36]	@ (80060a4 <vTaskSwitchContext+0xbc>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <vTaskSwitchContext+0xc4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3354      	adds	r3, #84	@ 0x54
 800608a:	4a09      	ldr	r2, [pc, #36]	@ (80060b0 <vTaskSwitchContext+0xc8>)
 800608c:	6013      	str	r3, [r2, #0]
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	200011d4 	.word	0x200011d4
 80060a0:	200011c0 	.word	0x200011c0
 80060a4:	200011b4 	.word	0x200011b4
 80060a8:	20000cdc 	.word	0x20000cdc
 80060ac:	20000cd8 	.word	0x20000cd8
 80060b0:	20000010 	.word	0x20000010

080060b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060dc:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <vTaskPlaceOnEventList+0x48>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3318      	adds	r3, #24
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fe fd8e 	bl	8004c06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060ea:	2101      	movs	r1, #1
 80060ec:	6838      	ldr	r0, [r7, #0]
 80060ee:	f000 fa8d 	bl	800660c <prvAddCurrentTaskToDelayedList>
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000cd8 	.word	0x20000cd8

08006100 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	617b      	str	r3, [r7, #20]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800612a:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <vTaskPlaceOnEventListRestricted+0x54>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3318      	adds	r3, #24
 8006130:	4619      	mov	r1, r3
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7fe fd43 	bl	8004bbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	68b8      	ldr	r0, [r7, #8]
 8006148:	f000 fa60 	bl	800660c <prvAddCurrentTaskToDelayedList>
	}
 800614c:	bf00      	nop
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000cd8 	.word	0x20000cd8

08006158 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60fb      	str	r3, [r7, #12]
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	e7fd      	b.n	8006182 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3318      	adds	r3, #24
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fd74 	bl	8004c78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006190:	4b1d      	ldr	r3, [pc, #116]	@ (8006208 <xTaskRemoveFromEventList+0xb0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11d      	bne.n	80061d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fd6b 	bl	8004c78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	4b19      	ldr	r3, [pc, #100]	@ (800620c <xTaskRemoveFromEventList+0xb4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d903      	bls.n	80061b6 <xTaskRemoveFromEventList+0x5e>
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	4a16      	ldr	r2, [pc, #88]	@ (800620c <xTaskRemoveFromEventList+0xb4>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4a13      	ldr	r2, [pc, #76]	@ (8006210 <xTaskRemoveFromEventList+0xb8>)
 80061c4:	441a      	add	r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f7fe fcf6 	bl	8004bbe <vListInsertEnd>
 80061d2:	e005      	b.n	80061e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	3318      	adds	r3, #24
 80061d8:	4619      	mov	r1, r3
 80061da:	480e      	ldr	r0, [pc, #56]	@ (8006214 <xTaskRemoveFromEventList+0xbc>)
 80061dc:	f7fe fcef 	bl	8004bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <xTaskRemoveFromEventList+0xc0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d905      	bls.n	80061fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061f2:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <xTaskRemoveFromEventList+0xc4>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e001      	b.n	80061fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	200011d4 	.word	0x200011d4
 800620c:	200011b4 	.word	0x200011b4
 8006210:	20000cdc 	.word	0x20000cdc
 8006214:	2000116c 	.word	0x2000116c
 8006218:	20000cd8 	.word	0x20000cd8
 800621c:	200011c0 	.word	0x200011c0

08006220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006228:	4b06      	ldr	r3, [pc, #24]	@ (8006244 <vTaskInternalSetTimeOutState+0x24>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <vTaskInternalSetTimeOutState+0x28>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	200011c4 	.word	0x200011c4
 8006248:	200011b0 	.word	0x200011b0

0800624c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	60fb      	str	r3, [r7, #12]
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	e7fd      	b.n	800628e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006292:	f000 fe61 	bl	8006f58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006296:	4b1d      	ldr	r3, [pc, #116]	@ (800630c <xTaskCheckForTimeOut+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d102      	bne.n	80062b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e023      	b.n	80062fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <xTaskCheckForTimeOut+0xc4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d007      	beq.n	80062d2 <xTaskCheckForTimeOut+0x86>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e015      	b.n	80062fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d20b      	bcs.n	80062f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff ff99 	bl	8006220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e004      	b.n	80062fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062fe:	f000 fe5d 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 8006302:	69fb      	ldr	r3, [r7, #28]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200011b0 	.word	0x200011b0
 8006310:	200011c4 	.word	0x200011c4

08006314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006318:	4b03      	ldr	r3, [pc, #12]	@ (8006328 <vTaskMissedYield+0x14>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	200011c0 	.word	0x200011c0

0800632c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006334:	f000 f852 	bl	80063dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006338:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <prvIdleTask+0x28>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d9f9      	bls.n	8006334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <prvIdleTask+0x2c>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006350:	e7f0      	b.n	8006334 <prvIdleTask+0x8>
 8006352:	bf00      	nop
 8006354:	20000cdc 	.word	0x20000cdc
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	e00c      	b.n	8006382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4a12      	ldr	r2, [pc, #72]	@ (80063bc <prvInitialiseTaskLists+0x60>)
 8006374:	4413      	add	r3, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fbf4 	bl	8004b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3301      	adds	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b37      	cmp	r3, #55	@ 0x37
 8006386:	d9ef      	bls.n	8006368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006388:	480d      	ldr	r0, [pc, #52]	@ (80063c0 <prvInitialiseTaskLists+0x64>)
 800638a:	f7fe fbeb 	bl	8004b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800638e:	480d      	ldr	r0, [pc, #52]	@ (80063c4 <prvInitialiseTaskLists+0x68>)
 8006390:	f7fe fbe8 	bl	8004b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006394:	480c      	ldr	r0, [pc, #48]	@ (80063c8 <prvInitialiseTaskLists+0x6c>)
 8006396:	f7fe fbe5 	bl	8004b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800639a:	480c      	ldr	r0, [pc, #48]	@ (80063cc <prvInitialiseTaskLists+0x70>)
 800639c:	f7fe fbe2 	bl	8004b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063a0:	480b      	ldr	r0, [pc, #44]	@ (80063d0 <prvInitialiseTaskLists+0x74>)
 80063a2:	f7fe fbdf 	bl	8004b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063a6:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <prvInitialiseTaskLists+0x78>)
 80063a8:	4a05      	ldr	r2, [pc, #20]	@ (80063c0 <prvInitialiseTaskLists+0x64>)
 80063aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	@ (80063d8 <prvInitialiseTaskLists+0x7c>)
 80063ae:	4a05      	ldr	r2, [pc, #20]	@ (80063c4 <prvInitialiseTaskLists+0x68>)
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000cdc 	.word	0x20000cdc
 80063c0:	2000113c 	.word	0x2000113c
 80063c4:	20001150 	.word	0x20001150
 80063c8:	2000116c 	.word	0x2000116c
 80063cc:	20001180 	.word	0x20001180
 80063d0:	20001198 	.word	0x20001198
 80063d4:	20001164 	.word	0x20001164
 80063d8:	20001168 	.word	0x20001168

080063dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063e2:	e019      	b.n	8006418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063e4:	f000 fdb8 	bl	8006f58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063e8:	4b10      	ldr	r3, [pc, #64]	@ (800642c <prvCheckTasksWaitingTermination+0x50>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe fc3f 	bl	8004c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <prvCheckTasksWaitingTermination+0x54>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	4a0b      	ldr	r2, [pc, #44]	@ (8006430 <prvCheckTasksWaitingTermination+0x54>)
 8006402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006404:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <prvCheckTasksWaitingTermination+0x58>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	4a0a      	ldr	r2, [pc, #40]	@ (8006434 <prvCheckTasksWaitingTermination+0x58>)
 800640c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800640e:	f000 fdd5 	bl	8006fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f810 	bl	8006438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006418:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <prvCheckTasksWaitingTermination+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e1      	bne.n	80063e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20001180 	.word	0x20001180
 8006430:	200011ac 	.word	0x200011ac
 8006434:	20001194 	.word	0x20001194

08006438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3354      	adds	r3, #84	@ 0x54
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f891 	bl	800756c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006458:	4618      	mov	r0, r3
 800645a:	f000 ff67 	bl	800732c <vPortFree>
				vPortFree( pxTCB );
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 ff64 	bl	800732c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006464:	e019      	b.n	800649a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800646c:	2b01      	cmp	r3, #1
 800646e:	d103      	bne.n	8006478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff5b 	bl	800732c <vPortFree>
	}
 8006476:	e010      	b.n	800649a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800647e:	2b02      	cmp	r3, #2
 8006480:	d00b      	beq.n	800649a <prvDeleteTCB+0x62>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60fb      	str	r3, [r7, #12]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <prvDeleteTCB+0x5e>
	}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064aa:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <prvResetNextTaskUnblockTime+0x14>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <prvResetNextTaskUnblockTime+0x16>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <prvResetNextTaskUnblockTime+0x48>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c6:	e008      	b.n	80064da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064c8:	4b07      	ldr	r3, [pc, #28]	@ (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <prvResetNextTaskUnblockTime+0x48>)
 80064d8:	6013      	str	r3, [r2, #0]
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20001164 	.word	0x20001164
 80064ec:	200011cc 	.word	0x200011cc

080064f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <xTaskGetSchedulerState+0x34>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064fe:	2301      	movs	r3, #1
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e008      	b.n	8006516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006504:	4b08      	ldr	r3, [pc, #32]	@ (8006528 <xTaskGetSchedulerState+0x38>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800650c:	2302      	movs	r3, #2
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	e001      	b.n	8006516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006516:	687b      	ldr	r3, [r7, #4]
	}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	200011b8 	.word	0x200011b8
 8006528:	200011d4 	.word	0x200011d4

0800652c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d058      	beq.n	80065f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006542:	4b2f      	ldr	r3, [pc, #188]	@ (8006600 <xTaskPriorityDisinherit+0xd4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	429a      	cmp	r2, r3
 800654a:	d00b      	beq.n	8006564 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10b      	bne.n	8006584 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60bb      	str	r3, [r7, #8]
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006596:	429a      	cmp	r2, r3
 8006598:	d02c      	beq.n	80065f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d128      	bne.n	80065f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fb66 	bl	8004c78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <xTaskPriorityDisinherit+0xd8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d903      	bls.n	80065d4 <xTaskPriorityDisinherit+0xa8>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006604 <xTaskPriorityDisinherit+0xd8>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <xTaskPriorityDisinherit+0xdc>)
 80065e2:	441a      	add	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fae7 	bl	8004bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065f4:	697b      	ldr	r3, [r7, #20]
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000cd8 	.word	0x20000cd8
 8006604:	200011b4 	.word	0x200011b4
 8006608:	20000cdc 	.word	0x20000cdc

0800660c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006616:	4b21      	ldr	r3, [pc, #132]	@ (800669c <prvAddCurrentTaskToDelayedList+0x90>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800661c:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fb28 	bl	8004c78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d10a      	bne.n	8006646 <prvAddCurrentTaskToDelayedList+0x3a>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006636:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4819      	ldr	r0, [pc, #100]	@ (80066a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006640:	f7fe fabd 	bl	8004bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006644:	e026      	b.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800664e:	4b14      	ldr	r3, [pc, #80]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	429a      	cmp	r2, r3
 800665c:	d209      	bcs.n	8006672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665e:	4b12      	ldr	r3, [pc, #72]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f7fe facb 	bl	8004c06 <vListInsert>
}
 8006670:	e010      	b.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006672:	4b0e      	ldr	r3, [pc, #56]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe fac1 	bl	8004c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006684:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d202      	bcs.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800668e:	4a08      	ldr	r2, [pc, #32]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200011b0 	.word	0x200011b0
 80066a0:	20000cd8 	.word	0x20000cd8
 80066a4:	20001198 	.word	0x20001198
 80066a8:	20001168 	.word	0x20001168
 80066ac:	20001164 	.word	0x20001164
 80066b0:	200011cc 	.word	0x200011cc

080066b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	@ 0x28
 80066b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066be:	f000 fad9 	bl	8006c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <xTimerCreateTimerTask+0x84>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d021      	beq.n	800670e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fa27 	bl	8004b30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	9202      	str	r2, [sp, #8]
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2302      	movs	r3, #2
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	460a      	mov	r2, r1
 80066f4:	4911      	ldr	r1, [pc, #68]	@ (800673c <xTimerCreateTimerTask+0x88>)
 80066f6:	4812      	ldr	r0, [pc, #72]	@ (8006740 <xTimerCreateTimerTask+0x8c>)
 80066f8:	f7ff f8a0 	bl	800583c <xTaskCreateStatic>
 80066fc:	4603      	mov	r3, r0
 80066fe:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <xTimerCreateTimerTask+0x90>)
 8006700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xTimerCreateTimerTask+0x90>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	613b      	str	r3, [r7, #16]
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	e7fd      	b.n	8006728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800672c:	697b      	ldr	r3, [r7, #20]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20001208 	.word	0x20001208
 800673c:	08007778 	.word	0x08007778
 8006740:	08006869 	.word	0x08006869
 8006744:	2000120c 	.word	0x2000120c

08006748 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	@ 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xTimerGenericCommand+0x30>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006778:	4b19      	ldr	r3, [pc, #100]	@ (80067e0 <xTimerGenericCommand+0x98>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02a      	beq.n	80067d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b05      	cmp	r3, #5
 8006790:	dc18      	bgt.n	80067c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006792:	f7ff fead 	bl	80064f0 <xTaskGetSchedulerState>
 8006796:	4603      	mov	r3, r0
 8006798:	2b02      	cmp	r3, #2
 800679a:	d109      	bne.n	80067b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800679c:	4b10      	ldr	r3, [pc, #64]	@ (80067e0 <xTimerGenericCommand+0x98>)
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	f107 0110 	add.w	r1, r7, #16
 80067a4:	2300      	movs	r3, #0
 80067a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a8:	f7fe fbd8 	bl	8004f5c <xQueueGenericSend>
 80067ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80067ae:	e012      	b.n	80067d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <xTimerGenericCommand+0x98>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	f107 0110 	add.w	r1, r7, #16
 80067b8:	2300      	movs	r3, #0
 80067ba:	2200      	movs	r2, #0
 80067bc:	f7fe fbce 	bl	8004f5c <xQueueGenericSend>
 80067c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067c2:	e008      	b.n	80067d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067c4:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <xTimerGenericCommand+0x98>)
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	f107 0110 	add.w	r1, r7, #16
 80067cc:	2300      	movs	r3, #0
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	f7fe fcc6 	bl	8005160 <xQueueGenericSendFromISR>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3728      	adds	r7, #40	@ 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20001208 	.word	0x20001208

080067e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006864 <prvProcessExpiredTimer+0x80>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fa3b 	bl	8004c78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d123      	bne.n	8006852 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	18d1      	adds	r1, r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	6978      	ldr	r0, [r7, #20]
 8006818:	f000 f8cc 	bl	80069b4 <prvInsertTimerInActiveList>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d017      	beq.n	8006852 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	2100      	movs	r1, #0
 800682c:	6978      	ldr	r0, [r7, #20]
 800682e:	f7ff ff8b 	bl	8006748 <xTimerGenericCommand>
 8006832:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	6978      	ldr	r0, [r7, #20]
 8006858:	4798      	blx	r3
}
 800685a:	bf00      	nop
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20001200 	.word	0x20001200

08006868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006870:	f107 0308 	add.w	r3, r7, #8
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f859 	bl	800692c <prvGetNextExpireTime>
 800687a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f805 	bl	8006890 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006886:	f000 f8d7 	bl	8006a38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800688a:	bf00      	nop
 800688c:	e7f0      	b.n	8006870 <prvTimerTask+0x8>
	...

08006890 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800689a:	f7ff fa29 	bl	8005cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f866 	bl	8006974 <prvSampleTimeNow>
 80068a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d130      	bne.n	8006912 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <prvProcessTimerOrBlockTask+0x3c>
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d806      	bhi.n	80068cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068be:	f7ff fa25 	bl	8005d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff8d 	bl	80067e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068ca:	e024      	b.n	8006916 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068d2:	4b13      	ldr	r3, [pc, #76]	@ (8006920 <prvProcessTimerOrBlockTask+0x90>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <prvProcessTimerOrBlockTask+0x94>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	f7fe ff6f 	bl	80057d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068f6:	f7ff fa09 	bl	8005d0c <xTaskResumeAll>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006900:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <prvProcessTimerOrBlockTask+0x98>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
}
 8006910:	e001      	b.n	8006916 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006912:	f7ff f9fb 	bl	8005d0c <xTaskResumeAll>
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20001204 	.word	0x20001204
 8006924:	20001208 	.word	0x20001208
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006934:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <prvGetNextExpireTime+0x44>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006952:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <prvGetNextExpireTime+0x44>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e001      	b.n	8006962 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20001200 	.word	0x20001200

08006974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800697c:	f7ff fa64 	bl	8005e48 <xTaskGetTickCount>
 8006980:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006982:	4b0b      	ldr	r3, [pc, #44]	@ (80069b0 <prvSampleTimeNow+0x3c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	429a      	cmp	r2, r3
 800698a:	d205      	bcs.n	8006998 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800698c:	f000 f910 	bl	8006bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e002      	b.n	800699e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800699e:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <prvSampleTimeNow+0x3c>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069a4:	68fb      	ldr	r3, [r7, #12]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20001210 	.word	0x20001210

080069b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d812      	bhi.n	8006a00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069e8:	2301      	movs	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e01b      	b.n	8006a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ee:	4b10      	ldr	r3, [pc, #64]	@ (8006a30 <prvInsertTimerInActiveList+0x7c>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	4610      	mov	r0, r2
 80069fa:	f7fe f904 	bl	8004c06 <vListInsert>
 80069fe:	e012      	b.n	8006a26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d206      	bcs.n	8006a16 <prvInsertTimerInActiveList+0x62>
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e007      	b.n	8006a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a16:	4b07      	ldr	r3, [pc, #28]	@ (8006a34 <prvInsertTimerInActiveList+0x80>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7fe f8f0 	bl	8004c06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a26:	697b      	ldr	r3, [r7, #20]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20001204 	.word	0x20001204
 8006a34:	20001200 	.word	0x20001200

08006a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	@ 0x38
 8006a3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a3e:	e0a5      	b.n	8006b8c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da19      	bge.n	8006a7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	3304      	adds	r3, #4
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61fb      	str	r3, [r7, #28]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a70:	6850      	ldr	r0, [r2, #4]
 8006a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a74:	6892      	ldr	r2, [r2, #8]
 8006a76:	4611      	mov	r1, r2
 8006a78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f2c0 8085 	blt.w	8006b8c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f8f0 	bl	8004c78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a98:	463b      	mov	r3, r7
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff ff6a 	bl	8006974 <prvSampleTimeNow>
 8006aa0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	d86c      	bhi.n	8006b82 <prvProcessReceivedCommands+0x14a>
 8006aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <prvProcessReceivedCommands+0x78>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006b83 	.word	0x08006b83
 8006ac0:	08006b37 	.word	0x08006b37
 8006ac4:	08006b71 	.word	0x08006b71
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ad9 	.word	0x08006ad9
 8006ad0:	08006b83 	.word	0x08006b83
 8006ad4:	08006b37 	.word	0x08006b37
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	18d1      	adds	r1, r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae6:	f7ff ff65 	bl	80069b4 <prvInsertTimerInActiveList>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d04a      	beq.n	8006b86 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d142      	bne.n	8006b86 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	441a      	add	r2, r3
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b12:	f7ff fe19 	bl	8006748 <xTimerGenericCommand>
 8006b16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d133      	bne.n	8006b86 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	61bb      	str	r3, [r7, #24]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	617b      	str	r3, [r7, #20]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	18d1      	adds	r1, r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b6a:	f7ff ff23 	bl	80069b4 <prvInsertTimerInActiveList>
					break;
 8006b6e:	e00d      	b.n	8006b8c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d107      	bne.n	8006b8a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7c:	f000 fbd6 	bl	800732c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b80:	e003      	b.n	8006b8a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <prvProcessReceivedCommands+0x154>
					break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <prvProcessReceivedCommands+0x154>
					break;
 8006b8a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b8c:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <prvProcessReceivedCommands+0x174>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1d39      	adds	r1, r7, #4
 8006b92:	2200      	movs	r2, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fb7f 	bl	8005298 <xQueueReceive>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f af4f 	bne.w	8006a40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3730      	adds	r7, #48	@ 0x30
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20001208 	.word	0x20001208

08006bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bb6:	e046      	b.n	8006c46 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe f851 	bl	8004c78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d12f      	bne.n	8006c46 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d90e      	bls.n	8006c16 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c04:	4b19      	ldr	r3, [pc, #100]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fd fff9 	bl	8004c06 <vListInsert>
 8006c14:	e017      	b.n	8006c46 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	2100      	movs	r1, #0
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fd91 	bl	8006748 <xTimerGenericCommand>
 8006c26:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <prvSwitchTimerLists+0x96>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	603b      	str	r3, [r7, #0]
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	e7fd      	b.n	8006c42 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1b3      	bne.n	8006bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c56:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <prvSwitchTimerLists+0xc0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a04      	ldr	r2, [pc, #16]	@ (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c5e:	4a04      	ldr	r2, [pc, #16]	@ (8006c70 <prvSwitchTimerLists+0xc0>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6013      	str	r3, [r2, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20001200 	.word	0x20001200
 8006c70:	20001204 	.word	0x20001204

08006c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c7a:	f000 f96d 	bl	8006f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c7e:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d120      	bne.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c86:	4814      	ldr	r0, [pc, #80]	@ (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c88:	f7fd ff6c 	bl	8004b64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c8c:	4813      	ldr	r0, [pc, #76]	@ (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c8e:	f7fd ff69 	bl	8004b64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c92:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <prvCheckForValidListAndQueue+0x6c>)
 8006c94:	4a10      	ldr	r2, [pc, #64]	@ (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c98:	4b12      	ldr	r3, [pc, #72]	@ (8006ce4 <prvCheckForValidListAndQueue+0x70>)
 8006c9a:	4a10      	ldr	r2, [pc, #64]	@ (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <prvCheckForValidListAndQueue+0x74>)
 8006ca4:	4a11      	ldr	r2, [pc, #68]	@ (8006cec <prvCheckForValidListAndQueue+0x78>)
 8006ca6:	2110      	movs	r1, #16
 8006ca8:	200a      	movs	r0, #10
 8006caa:	f7fe f879 	bl	8004da0 <xQueueGenericCreateStatic>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a08      	ldr	r2, [pc, #32]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cb4:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	490b      	ldr	r1, [pc, #44]	@ (8006cf0 <prvCheckForValidListAndQueue+0x7c>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd5c 	bl	8005780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc8:	f000 f978 	bl	8006fbc <vPortExitCritical>
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20001208 	.word	0x20001208
 8006cd8:	200011d8 	.word	0x200011d8
 8006cdc:	200011ec 	.word	0x200011ec
 8006ce0:	20001200 	.word	0x20001200
 8006ce4:	20001204 	.word	0x20001204
 8006ce8:	200012b4 	.word	0x200012b4
 8006cec:	20001214 	.word	0x20001214
 8006cf0:	08007780 	.word	0x08007780

08006cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3b04      	subs	r3, #4
 8006d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f023 0201 	bic.w	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d24:	4a0c      	ldr	r2, [pc, #48]	@ (8006d58 <pxPortInitialiseStack+0x64>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3b14      	subs	r3, #20
 8006d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f06f 0202 	mvn.w	r2, #2
 8006d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3b20      	subs	r3, #32
 8006d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	08006d5d 	.word	0x08006d5d

08006d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d66:	4b13      	ldr	r3, [pc, #76]	@ (8006db4 <prvTaskExitError+0x58>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d00b      	beq.n	8006d88 <prvTaskExitError+0x2c>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <prvTaskExitError+0x28>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60bb      	str	r3, [r7, #8]
}
 8006d9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d9c:	bf00      	nop
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0fc      	beq.n	8006d9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000000c 	.word	0x2000000c
	...

08006dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dc0:	4b07      	ldr	r3, [pc, #28]	@ (8006de0 <pxCurrentTCBConst2>)
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	f380 8809 	msr	PSP, r0
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8811 	msr	BASEPRI, r0
 8006dda:	4770      	bx	lr
 8006ddc:	f3af 8000 	nop.w

08006de0 <pxCurrentTCBConst2>:
 8006de0:	20000cd8 	.word	0x20000cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop

08006de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006de8:	4808      	ldr	r0, [pc, #32]	@ (8006e0c <prvPortStartFirstTask+0x24>)
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	6800      	ldr	r0, [r0, #0]
 8006dee:	f380 8808 	msr	MSP, r0
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8814 	msr	CONTROL, r0
 8006dfa:	b662      	cpsie	i
 8006dfc:	b661      	cpsie	f
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	df00      	svc	0
 8006e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e0a:	bf00      	nop
 8006e0c:	e000ed08 	.word	0xe000ed08

08006e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e16:	4b47      	ldr	r3, [pc, #284]	@ (8006f34 <xPortStartScheduler+0x124>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a47      	ldr	r2, [pc, #284]	@ (8006f38 <xPortStartScheduler+0x128>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10b      	bne.n	8006e38 <xPortStartScheduler+0x28>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e38:	4b3e      	ldr	r3, [pc, #248]	@ (8006f34 <xPortStartScheduler+0x124>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f3c <xPortStartScheduler+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10b      	bne.n	8006e5a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	613b      	str	r3, [r7, #16]
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <xPortStartScheduler+0x130>)
 8006e5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	22ff      	movs	r2, #255	@ 0xff
 8006e6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4b31      	ldr	r3, [pc, #196]	@ (8006f44 <xPortStartScheduler+0x134>)
 8006e80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e82:	4b31      	ldr	r3, [pc, #196]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006e84:	2207      	movs	r2, #7
 8006e86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e88:	e009      	b.n	8006e9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	4a2d      	ldr	r2, [pc, #180]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006e92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea6:	2b80      	cmp	r3, #128	@ 0x80
 8006ea8:	d0ef      	beq.n	8006e8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eaa:	4b27      	ldr	r3, [pc, #156]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1c3 0307 	rsb	r3, r3, #7
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d00b      	beq.n	8006ece <xPortStartScheduler+0xbe>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ece:	4b1e      	ldr	r3, [pc, #120]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ee0:	4a19      	ldr	r2, [pc, #100]	@ (8006f48 <xPortStartScheduler+0x138>)
 8006ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006eec:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <xPortStartScheduler+0x13c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a16      	ldr	r2, [pc, #88]	@ (8006f4c <xPortStartScheduler+0x13c>)
 8006ef2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ef8:	4b14      	ldr	r3, [pc, #80]	@ (8006f4c <xPortStartScheduler+0x13c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a13      	ldr	r2, [pc, #76]	@ (8006f4c <xPortStartScheduler+0x13c>)
 8006efe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f04:	f000 f8da 	bl	80070bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f08:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <xPortStartScheduler+0x140>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f0e:	f000 f8f9 	bl	8007104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f12:	4b10      	ldr	r3, [pc, #64]	@ (8006f54 <xPortStartScheduler+0x144>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a0f      	ldr	r2, [pc, #60]	@ (8006f54 <xPortStartScheduler+0x144>)
 8006f18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f1e:	f7ff ff63 	bl	8006de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f22:	f7ff f861 	bl	8005fe8 <vTaskSwitchContext>
	prvTaskExitError();
 8006f26:	f7ff ff19 	bl	8006d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	e000ed00 	.word	0xe000ed00
 8006f38:	410fc271 	.word	0x410fc271
 8006f3c:	410fc270 	.word	0x410fc270
 8006f40:	e000e400 	.word	0xe000e400
 8006f44:	20001304 	.word	0x20001304
 8006f48:	20001308 	.word	0x20001308
 8006f4c:	e000ed20 	.word	0xe000ed20
 8006f50:	2000000c 	.word	0x2000000c
 8006f54:	e000ef34 	.word	0xe000ef34

08006f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f72:	4b10      	ldr	r3, [pc, #64]	@ (8006fb4 <vPortEnterCritical+0x5c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb4 <vPortEnterCritical+0x5c>)
 8006f7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <vPortEnterCritical+0x5c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d110      	bne.n	8006fa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f84:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <vPortEnterCritical+0x60>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <vPortEnterCritical+0x4a>
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <vPortExitCritical+0x50>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <vPortExitCritical+0x26>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	607b      	str	r3, [r7, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800700c <vPortExitCritical+0x50>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4a08      	ldr	r2, [pc, #32]	@ (800700c <vPortExitCritical+0x50>)
 8006fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fec:	4b07      	ldr	r3, [pc, #28]	@ (800700c <vPortExitCritical+0x50>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <vPortExitCritical+0x44>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	2000000c 	.word	0x2000000c

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b15      	ldr	r3, [pc, #84]	@ (8007070 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f01e 0f10 	tst.w	lr, #16
 8007020:	bf08      	it	eq
 8007022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	6010      	str	r0, [r2, #0]
 800702c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007034:	f380 8811 	msr	BASEPRI, r0
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f7fe ffd2 	bl	8005fe8 <vTaskSwitchContext>
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f380 8811 	msr	BASEPRI, r0
 800704c:	bc09      	pop	{r0, r3}
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007056:	f01e 0f10 	tst.w	lr, #16
 800705a:	bf08      	it	eq
 800705c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007060:	f380 8809 	msr	PSP, r0
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst>:
 8007070:	20000cd8 	.word	0x20000cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007092:	f7fe fee9 	bl	8005e68 <xTaskIncrementTick>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <SysTick_Handler+0x40>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f383 8811 	msr	BASEPRI, r3
}
 80070ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <vPortSetupTimerInterrupt+0x38>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <vPortSetupTimerInterrupt+0x3c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	@ (80070fc <vPortSetupTimerInterrupt+0x40>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	4a09      	ldr	r2, [pc, #36]	@ (8007100 <vPortSetupTimerInterrupt+0x44>)
 80070da:	3b01      	subs	r3, #1
 80070dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070de:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010
 80070f4:	e000e018 	.word	0xe000e018
 80070f8:	20000000 	.word	0x20000000
 80070fc:	10624dd3 	.word	0x10624dd3
 8007100:	e000e014 	.word	0xe000e014

08007104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007114 <vPortEnableVFP+0x10>
 8007108:	6801      	ldr	r1, [r0, #0]
 800710a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800710e:	6001      	str	r1, [r0, #0]
 8007110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007112:	bf00      	nop
 8007114:	e000ed88 	.word	0xe000ed88

08007118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d915      	bls.n	8007156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800712a:	4a18      	ldr	r2, [pc, #96]	@ (800718c <vPortValidateInterruptPriority+0x74>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007134:	4b16      	ldr	r3, [pc, #88]	@ (8007190 <vPortValidateInterruptPriority+0x78>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	429a      	cmp	r2, r3
 800713c:	d20b      	bcs.n	8007156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <vPortValidateInterruptPriority+0x7c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800715e:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <vPortValidateInterruptPriority+0x80>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d90b      	bls.n	800717e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	603b      	str	r3, [r7, #0]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <vPortValidateInterruptPriority+0x62>
	}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	e000e3f0 	.word	0xe000e3f0
 8007190:	20001304 	.word	0x20001304
 8007194:	e000ed0c 	.word	0xe000ed0c
 8007198:	20001308 	.word	0x20001308

0800719c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	@ 0x28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071a8:	f7fe fda2 	bl	8005cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007318 <pvPortMalloc+0x17c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071b4:	f000 f916 	bl	80073e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071b8:	4b58      	ldr	r3, [pc, #352]	@ (800731c <pvPortMalloc+0x180>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 8090 	bne.w	80072e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01e      	beq.n	800720a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80071cc:	2208      	movs	r2, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d015      	beq.n	800720a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f023 0307 	bic.w	r3, r3, #7
 80071e4:	3308      	adds	r3, #8
 80071e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <pvPortMalloc+0x6e>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	617b      	str	r3, [r7, #20]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d06a      	beq.n	80072e6 <pvPortMalloc+0x14a>
 8007210:	4b43      	ldr	r3, [pc, #268]	@ (8007320 <pvPortMalloc+0x184>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d865      	bhi.n	80072e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800721a:	4b42      	ldr	r3, [pc, #264]	@ (8007324 <pvPortMalloc+0x188>)
 800721c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800721e:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <pvPortMalloc+0x188>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007224:	e004      	b.n	8007230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d903      	bls.n	8007242 <pvPortMalloc+0xa6>
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f1      	bne.n	8007226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007242:	4b35      	ldr	r3, [pc, #212]	@ (8007318 <pvPortMalloc+0x17c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007248:	429a      	cmp	r2, r3
 800724a:	d04c      	beq.n	80072e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2208      	movs	r2, #8
 8007252:	4413      	add	r3, r2
 8007254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	1ad2      	subs	r2, r2, r3
 8007266:	2308      	movs	r3, #8
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	429a      	cmp	r2, r3
 800726c:	d920      	bls.n	80072b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800726e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <pvPortMalloc+0xfc>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072aa:	69b8      	ldr	r0, [r7, #24]
 80072ac:	f000 f8fc 	bl	80074a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007320 <pvPortMalloc+0x184>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	4a19      	ldr	r2, [pc, #100]	@ (8007320 <pvPortMalloc+0x184>)
 80072bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072be:	4b18      	ldr	r3, [pc, #96]	@ (8007320 <pvPortMalloc+0x184>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <pvPortMalloc+0x18c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d203      	bcs.n	80072d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072ca:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <pvPortMalloc+0x184>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a16      	ldr	r2, [pc, #88]	@ (8007328 <pvPortMalloc+0x18c>)
 80072d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	4b11      	ldr	r3, [pc, #68]	@ (800731c <pvPortMalloc+0x180>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	431a      	orrs	r2, r3
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072e6:	f7fe fd11 	bl	8005d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <pvPortMalloc+0x170>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60fb      	str	r3, [r7, #12]
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	e7fd      	b.n	8007308 <pvPortMalloc+0x16c>
	return pvReturn;
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3728      	adds	r7, #40	@ 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20001f14 	.word	0x20001f14
 800731c:	20001f20 	.word	0x20001f20
 8007320:	20001f18 	.word	0x20001f18
 8007324:	20001f0c 	.word	0x20001f0c
 8007328:	20001f1c 	.word	0x20001f1c

0800732c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d04a      	beq.n	80073d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800733e:	2308      	movs	r3, #8
 8007340:	425b      	negs	r3, r3
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	4b22      	ldr	r3, [pc, #136]	@ (80073dc <vPortFree+0xb0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <vPortFree+0x46>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60fb      	str	r3, [r7, #12]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <vPortFree+0x66>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60bb      	str	r3, [r7, #8]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	4b11      	ldr	r3, [pc, #68]	@ (80073dc <vPortFree+0xb0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d019      	beq.n	80073d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d115      	bne.n	80073d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <vPortFree+0xb0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	43db      	mvns	r3, r3
 80073b2:	401a      	ands	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073b8:	f7fe fc9a 	bl	8005cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <vPortFree+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4413      	add	r3, r2
 80073c6:	4a06      	ldr	r2, [pc, #24]	@ (80073e0 <vPortFree+0xb4>)
 80073c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ca:	6938      	ldr	r0, [r7, #16]
 80073cc:	f000 f86c 	bl	80074a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073d0:	f7fe fc9c 	bl	8005d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20001f20 	.word	0x20001f20
 80073e0:	20001f18 	.word	0x20001f18

080073e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80073ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073f0:	4b27      	ldr	r3, [pc, #156]	@ (8007490 <prvHeapInit+0xac>)
 80073f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3307      	adds	r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <prvHeapInit+0xac>)
 8007414:	4413      	add	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800741c:	4a1d      	ldr	r2, [pc, #116]	@ (8007494 <prvHeapInit+0xb0>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007422:	4b1c      	ldr	r3, [pc, #112]	@ (8007494 <prvHeapInit+0xb0>)
 8007424:	2200      	movs	r2, #0
 8007426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4413      	add	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007430:	2208      	movs	r2, #8
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4a15      	ldr	r2, [pc, #84]	@ (8007498 <prvHeapInit+0xb4>)
 8007444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007446:	4b14      	ldr	r3, [pc, #80]	@ (8007498 <prvHeapInit+0xb4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800744e:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <prvHeapInit+0xb4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007464:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <prvHeapInit+0xb4>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4a0a      	ldr	r2, [pc, #40]	@ (800749c <prvHeapInit+0xb8>)
 8007472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <prvHeapInit+0xbc>)
 800747a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800747c:	4b09      	ldr	r3, [pc, #36]	@ (80074a4 <prvHeapInit+0xc0>)
 800747e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	2000130c 	.word	0x2000130c
 8007494:	20001f0c 	.word	0x20001f0c
 8007498:	20001f14 	.word	0x20001f14
 800749c:	20001f1c 	.word	0x20001f1c
 80074a0:	20001f18 	.word	0x20001f18
 80074a4:	20001f20 	.word	0x20001f20

080074a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074b0:	4b28      	ldr	r3, [pc, #160]	@ (8007554 <prvInsertBlockIntoFreeList+0xac>)
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e002      	b.n	80074bc <prvInsertBlockIntoFreeList+0x14>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d8f7      	bhi.n	80074b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4413      	add	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d108      	bne.n	80074ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	441a      	add	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d118      	bne.n	8007530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b15      	ldr	r3, [pc, #84]	@ (8007558 <prvInsertBlockIntoFreeList+0xb0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d00d      	beq.n	8007526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e008      	b.n	8007538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007526:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <prvInsertBlockIntoFreeList+0xb0>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e003      	b.n	8007538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d002      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20001f0c 	.word	0x20001f0c
 8007558:	20001f14 	.word	0x20001f14

0800755c <memset>:
 800755c:	4402      	add	r2, r0
 800755e:	4603      	mov	r3, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <_reclaim_reent>:
 800756c:	4b2d      	ldr	r3, [pc, #180]	@ (8007624 <_reclaim_reent+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4283      	cmp	r3, r0
 8007572:	b570      	push	{r4, r5, r6, lr}
 8007574:	4604      	mov	r4, r0
 8007576:	d053      	beq.n	8007620 <_reclaim_reent+0xb4>
 8007578:	69c3      	ldr	r3, [r0, #28]
 800757a:	b31b      	cbz	r3, 80075c4 <_reclaim_reent+0x58>
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	b163      	cbz	r3, 800759a <_reclaim_reent+0x2e>
 8007580:	2500      	movs	r5, #0
 8007582:	69e3      	ldr	r3, [r4, #28]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	5959      	ldr	r1, [r3, r5]
 8007588:	b9b1      	cbnz	r1, 80075b8 <_reclaim_reent+0x4c>
 800758a:	3504      	adds	r5, #4
 800758c:	2d80      	cmp	r5, #128	@ 0x80
 800758e:	d1f8      	bne.n	8007582 <_reclaim_reent+0x16>
 8007590:	69e3      	ldr	r3, [r4, #28]
 8007592:	4620      	mov	r0, r4
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	f000 f87b 	bl	8007690 <_free_r>
 800759a:	69e3      	ldr	r3, [r4, #28]
 800759c:	6819      	ldr	r1, [r3, #0]
 800759e:	b111      	cbz	r1, 80075a6 <_reclaim_reent+0x3a>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 f875 	bl	8007690 <_free_r>
 80075a6:	69e3      	ldr	r3, [r4, #28]
 80075a8:	689d      	ldr	r5, [r3, #8]
 80075aa:	b15d      	cbz	r5, 80075c4 <_reclaim_reent+0x58>
 80075ac:	4629      	mov	r1, r5
 80075ae:	4620      	mov	r0, r4
 80075b0:	682d      	ldr	r5, [r5, #0]
 80075b2:	f000 f86d 	bl	8007690 <_free_r>
 80075b6:	e7f8      	b.n	80075aa <_reclaim_reent+0x3e>
 80075b8:	680e      	ldr	r6, [r1, #0]
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 f868 	bl	8007690 <_free_r>
 80075c0:	4631      	mov	r1, r6
 80075c2:	e7e1      	b.n	8007588 <_reclaim_reent+0x1c>
 80075c4:	6961      	ldr	r1, [r4, #20]
 80075c6:	b111      	cbz	r1, 80075ce <_reclaim_reent+0x62>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 f861 	bl	8007690 <_free_r>
 80075ce:	69e1      	ldr	r1, [r4, #28]
 80075d0:	b111      	cbz	r1, 80075d8 <_reclaim_reent+0x6c>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f85c 	bl	8007690 <_free_r>
 80075d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80075da:	b111      	cbz	r1, 80075e2 <_reclaim_reent+0x76>
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 f857 	bl	8007690 <_free_r>
 80075e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e4:	b111      	cbz	r1, 80075ec <_reclaim_reent+0x80>
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f852 	bl	8007690 <_free_r>
 80075ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075ee:	b111      	cbz	r1, 80075f6 <_reclaim_reent+0x8a>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 f84d 	bl	8007690 <_free_r>
 80075f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80075f8:	b111      	cbz	r1, 8007600 <_reclaim_reent+0x94>
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f848 	bl	8007690 <_free_r>
 8007600:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007602:	b111      	cbz	r1, 800760a <_reclaim_reent+0x9e>
 8007604:	4620      	mov	r0, r4
 8007606:	f000 f843 	bl	8007690 <_free_r>
 800760a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800760c:	b111      	cbz	r1, 8007614 <_reclaim_reent+0xa8>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f83e 	bl	8007690 <_free_r>
 8007614:	6a23      	ldr	r3, [r4, #32]
 8007616:	b11b      	cbz	r3, 8007620 <_reclaim_reent+0xb4>
 8007618:	4620      	mov	r0, r4
 800761a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800761e:	4718      	bx	r3
 8007620:	bd70      	pop	{r4, r5, r6, pc}
 8007622:	bf00      	nop
 8007624:	20000010 	.word	0x20000010

08007628 <__libc_init_array>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4d0d      	ldr	r5, [pc, #52]	@ (8007660 <__libc_init_array+0x38>)
 800762c:	4c0d      	ldr	r4, [pc, #52]	@ (8007664 <__libc_init_array+0x3c>)
 800762e:	1b64      	subs	r4, r4, r5
 8007630:	10a4      	asrs	r4, r4, #2
 8007632:	2600      	movs	r6, #0
 8007634:	42a6      	cmp	r6, r4
 8007636:	d109      	bne.n	800764c <__libc_init_array+0x24>
 8007638:	4d0b      	ldr	r5, [pc, #44]	@ (8007668 <__libc_init_array+0x40>)
 800763a:	4c0c      	ldr	r4, [pc, #48]	@ (800766c <__libc_init_array+0x44>)
 800763c:	f000 f87e 	bl	800773c <_init>
 8007640:	1b64      	subs	r4, r4, r5
 8007642:	10a4      	asrs	r4, r4, #2
 8007644:	2600      	movs	r6, #0
 8007646:	42a6      	cmp	r6, r4
 8007648:	d105      	bne.n	8007656 <__libc_init_array+0x2e>
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007650:	4798      	blx	r3
 8007652:	3601      	adds	r6, #1
 8007654:	e7ee      	b.n	8007634 <__libc_init_array+0xc>
 8007656:	f855 3b04 	ldr.w	r3, [r5], #4
 800765a:	4798      	blx	r3
 800765c:	3601      	adds	r6, #1
 800765e:	e7f2      	b.n	8007646 <__libc_init_array+0x1e>
 8007660:	08007820 	.word	0x08007820
 8007664:	08007820 	.word	0x08007820
 8007668:	08007820 	.word	0x08007820
 800766c:	08007824 	.word	0x08007824

08007670 <__retarget_lock_acquire_recursive>:
 8007670:	4770      	bx	lr

08007672 <__retarget_lock_release_recursive>:
 8007672:	4770      	bx	lr

08007674 <memcpy>:
 8007674:	440a      	add	r2, r1
 8007676:	4291      	cmp	r1, r2
 8007678:	f100 33ff 	add.w	r3, r0, #4294967295
 800767c:	d100      	bne.n	8007680 <memcpy+0xc>
 800767e:	4770      	bx	lr
 8007680:	b510      	push	{r4, lr}
 8007682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800768a:	4291      	cmp	r1, r2
 800768c:	d1f9      	bne.n	8007682 <memcpy+0xe>
 800768e:	bd10      	pop	{r4, pc}

08007690 <_free_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4605      	mov	r5, r0
 8007694:	2900      	cmp	r1, #0
 8007696:	d041      	beq.n	800771c <_free_r+0x8c>
 8007698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769c:	1f0c      	subs	r4, r1, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfb8      	it	lt
 80076a2:	18e4      	addlt	r4, r4, r3
 80076a4:	f000 f83e 	bl	8007724 <__malloc_lock>
 80076a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <_free_r+0x90>)
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	b933      	cbnz	r3, 80076bc <_free_r+0x2c>
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	6014      	str	r4, [r2, #0]
 80076b2:	4628      	mov	r0, r5
 80076b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076b8:	f000 b83a 	b.w	8007730 <__malloc_unlock>
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d908      	bls.n	80076d2 <_free_r+0x42>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	1821      	adds	r1, r4, r0
 80076c4:	428b      	cmp	r3, r1
 80076c6:	bf01      	itttt	eq
 80076c8:	6819      	ldreq	r1, [r3, #0]
 80076ca:	685b      	ldreq	r3, [r3, #4]
 80076cc:	1809      	addeq	r1, r1, r0
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	e7ed      	b.n	80076ae <_free_r+0x1e>
 80076d2:	461a      	mov	r2, r3
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b10b      	cbz	r3, 80076dc <_free_r+0x4c>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d9fa      	bls.n	80076d2 <_free_r+0x42>
 80076dc:	6811      	ldr	r1, [r2, #0]
 80076de:	1850      	adds	r0, r2, r1
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d10b      	bne.n	80076fc <_free_r+0x6c>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	4401      	add	r1, r0
 80076e8:	1850      	adds	r0, r2, r1
 80076ea:	4283      	cmp	r3, r0
 80076ec:	6011      	str	r1, [r2, #0]
 80076ee:	d1e0      	bne.n	80076b2 <_free_r+0x22>
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	6053      	str	r3, [r2, #4]
 80076f6:	4408      	add	r0, r1
 80076f8:	6010      	str	r0, [r2, #0]
 80076fa:	e7da      	b.n	80076b2 <_free_r+0x22>
 80076fc:	d902      	bls.n	8007704 <_free_r+0x74>
 80076fe:	230c      	movs	r3, #12
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	e7d6      	b.n	80076b2 <_free_r+0x22>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	1821      	adds	r1, r4, r0
 8007708:	428b      	cmp	r3, r1
 800770a:	bf04      	itt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	6063      	str	r3, [r4, #4]
 8007712:	bf04      	itt	eq
 8007714:	1809      	addeq	r1, r1, r0
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	6054      	str	r4, [r2, #4]
 800771a:	e7ca      	b.n	80076b2 <_free_r+0x22>
 800771c:	bd38      	pop	{r3, r4, r5, pc}
 800771e:	bf00      	nop
 8007720:	20002060 	.word	0x20002060

08007724 <__malloc_lock>:
 8007724:	4801      	ldr	r0, [pc, #4]	@ (800772c <__malloc_lock+0x8>)
 8007726:	f7ff bfa3 	b.w	8007670 <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	2000205c 	.word	0x2000205c

08007730 <__malloc_unlock>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__malloc_unlock+0x8>)
 8007732:	f7ff bf9e 	b.w	8007672 <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	2000205c 	.word	0x2000205c

0800773c <_init>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr

08007748 <_fini>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr
