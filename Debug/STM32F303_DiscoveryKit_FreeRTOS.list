
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007484  08007484  00008484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800752c  0800752c  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800752c  0800752c  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800752c  0800752c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800752c  0800752c  0000852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007530  08007530  00008530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007534  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00001ffc  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000205c  2000205c  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000229d9  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043dc  00000000  00000000  0002ba69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  000319d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b0  00000000  00000000  00032f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002228a  00000000  00000000  00037025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7926  00000000  00000000  000592af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120bd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078c8  00000000  00000000  00120c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001284e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800746c 	.word	0x0800746c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800746c 	.word	0x0800746c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcfc 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82e 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9a4 	bl	8000578 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f892 	bl	8000358 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f910 	bl	8000458 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f97c 	bl	8000534 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8cc 	bl	80003d8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f948 	bl	80004d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9aa 	bl	800459c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <main+0x50>)
 800024a:	2100      	movs	r1, #0
 800024c:	4809      	ldr	r0, [pc, #36]	@ (8000274 <main+0x54>)
 800024e:	f004 fa0d 	bl	800466c <osThreadNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a08      	ldr	r2, [pc, #32]	@ (8000278 <main+0x58>)
 8000256:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <main+0x5c>)
 800025a:	2100      	movs	r1, #0
 800025c:	4808      	ldr	r0, [pc, #32]	@ (8000280 <main+0x60>)
 800025e:	f004 fa05 	bl	800466c <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <main+0x64>)
 8000266:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000268:	f004 f9cc 	bl	8004604 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <main+0x4c>
 8000270:	080074ac 	.word	0x080074ac
 8000274:	080006a9 	.word	0x080006a9
 8000278:	200004e4 	.word	0x200004e4
 800027c:	080074d0 	.word	0x080074d0
 8000280:	080006f5 	.word	0x080006f5
 8000284:	200004e8 	.word	0x200004e8

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09e      	sub	sp, #120	@ 0x78
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f006 fff8 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	223c      	movs	r2, #60	@ 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f006 ffea 	bl	800728c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b8:	2303      	movs	r3, #3
 80002ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fa02 	bl	80016ec <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ee:	f000 fa35 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000302:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f9fa 	bl	8002708 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031a:	f000 fa1f 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <SystemClock_Config+0xcc>)
 8000320:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800032e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000332:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fc62 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000342:	f000 fa0b 	bl	800075c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000346:	f002 fb4d 	bl	80029e4 <HAL_RCC_EnableCSS>
}
 800034a:	bf00      	nop
 800034c:	3778      	adds	r7, #120	@ 0x78
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	00020062 	.word	0x00020062

08000358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_I2C1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	@ (80003d0 <MX_I2C1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000362:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000364:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <MX_I2C1_Init+0x7c>)
 8000366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036e:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	480e      	ldr	r0, [pc, #56]	@ (80003cc <MX_I2C1_Init+0x74>)
 8000394:	f000 ffb1 	bl	80012fa <HAL_I2C_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800039e:	f000 f9dd 	bl	800075c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4809      	ldr	r0, [pc, #36]	@ (80003cc <MX_I2C1_Init+0x74>)
 80003a6:	f001 f843 	bl	8001430 <HAL_I2CEx_ConfigAnalogFilter>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b0:	f000 f9d4 	bl	800075c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b4:	2100      	movs	r1, #0
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_I2C1_Init+0x74>)
 80003b8:	f001 f885 	bl	80014c6 <HAL_I2CEx_ConfigDigitalFilter>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f9cb 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000007c 	.word	0x2000007c
 80003d0:	40005400 	.word	0x40005400
 80003d4:	00201d2b 	.word	0x00201d2b

080003d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <MX_I2C2_Init+0x74>)
 80003de:	4a1c      	ldr	r2, [pc, #112]	@ (8000450 <MX_I2C2_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_I2C2_Init+0x74>)
 80003e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000454 <MX_I2C2_Init+0x7c>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003e8:	4b18      	ldr	r3, [pc, #96]	@ (800044c <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_I2C2_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_I2C2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000400:	4b12      	ldr	r3, [pc, #72]	@ (800044c <MX_I2C2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_I2C2_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_I2C2_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000412:	480e      	ldr	r0, [pc, #56]	@ (800044c <MX_I2C2_Init+0x74>)
 8000414:	f000 ff71 	bl	80012fa <HAL_I2C_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800041e:	f000 f99d 	bl	800075c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4809      	ldr	r0, [pc, #36]	@ (800044c <MX_I2C2_Init+0x74>)
 8000426:	f001 f803 	bl	8001430 <HAL_I2CEx_ConfigAnalogFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000430:	f000 f994 	bl	800075c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000434:	2100      	movs	r1, #0
 8000436:	4805      	ldr	r0, [pc, #20]	@ (800044c <MX_I2C2_Init+0x74>)
 8000438:	f001 f845 	bl	80014c6 <HAL_I2CEx_ConfigDigitalFilter>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f98b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000d0 	.word	0x200000d0
 8000450:	40005800 	.word	0x40005800
 8000454:	00201d2b 	.word	0x00201d2b

08000458 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <MX_SPI1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <MX_SPI1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000464:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000470:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000472:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_SPI1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047e:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800048a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_SPI1_Init+0x74>)
 800048e:	2208      	movs	r2, #8
 8000490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_SPI1_Init+0x74>)
 80004b8:	f002 fd50 	bl	8002f5c <HAL_SPI_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f94b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000124 	.word	0x20000124
 80004d0:	40013000 	.word	0x40013000

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004da:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <MX_USART2_UART_Init+0x5c>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b11      	ldr	r3, [pc, #68]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_USART2_UART_Init+0x58>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_USART2_UART_Init+0x58>)
 8000518:	f003 f87a 	bl	8003610 <HAL_UART_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000522:	f000 f91b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000188 	.word	0x20000188
 8000530:	40004400 	.word	0x40004400

08000534 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <MX_USB_PCD_Init+0x40>)
 800053c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000540:	2208      	movs	r2, #8
 8000542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000546:	2202      	movs	r2, #2
 8000548:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800054c:	2202      	movs	r2, #2
 800054e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 8000558:	2200      	movs	r2, #0
 800055a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_USB_PCD_Init+0x3c>)
 800055e:	f000 fffe 	bl	800155e <HAL_PCD_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000568:	f000 f8f8 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000210 	.word	0x20000210
 8000574:	40005c00 	.word	0x40005c00

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058e:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <MX_GPIO_Init+0x108>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x108>)
 8000594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <MX_GPIO_Init+0x108>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b36      	ldr	r3, [pc, #216]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a35      	ldr	r2, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a23      	ldr	r2, [pc, #140]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_GPIO_Init+0x108>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000606:	2200      	movs	r2, #0
 8000608:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800060c:	481d      	ldr	r0, [pc, #116]	@ (8000684 <MX_GPIO_Init+0x10c>)
 800060e:	f000 fe39 	bl	8001284 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000612:	2336      	movs	r3, #54	@ 0x36
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000616:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4817      	ldr	r0, [pc, #92]	@ (8000684 <MX_GPIO_Init+0x10c>)
 8000628:	f000 fcb2 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800062c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000630:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <MX_GPIO_Init+0x10c>)
 8000646:	f000 fca3 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fc95 	bl	8000f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2105      	movs	r1, #5
 800066a:	2006      	movs	r0, #6
 800066c:	f000 fbea 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000670:	2006      	movs	r0, #6
 8000672:	f000 fc03 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	48001000 	.word	0x48001000

08000688 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd9b 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 800069a:	200a      	movs	r0, #10
 800069c:	f7ff fd98 	bl	80001d0 <ITM_SendChar>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  osPriority_t prioTask2;

  /* Infinite loop */
  for(;;)
  {
	prioTask2 = osThreadGetPriority(Task2Handle);
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <StartTask1+0x44>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 f8bf 	bl	8004838 <osThreadGetPriority>
 80006ba:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c2:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <StartTask1+0x48>)
 80006c4:	f000 fdde 	bl	8001284 <HAL_GPIO_WritePin>
	Task_action('1');
 80006c8:	2031      	movs	r0, #49	@ 0x31
 80006ca:	f7ff ffdd 	bl	8000688 <Task_action>

	osThreadSetPriority(Task2Handle, prioTask2+1);
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <StartTask1+0x44>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	4610      	mov	r0, r2
 80006da:	f004 f871 	bl	80047c0 <osThreadSetPriority>

    HAL_Delay(1000); // keep task 1 busy for 1s - usually not good practice
 80006de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e2:	f000 fad3 	bl	8000c8c <HAL_Delay>
	prioTask2 = osThreadGetPriority(Task2Handle);
 80006e6:	bf00      	nop
 80006e8:	e7e2      	b.n	80006b0 <StartTask1+0x8>
 80006ea:	bf00      	nop
 80006ec:	200004e8 	.word	0x200004e8
 80006f0:	48001000 	.word	0x48001000

080006f4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  osPriority_t myPrio;

  /* Infinite loop */
  for(;;)
  {
	myPrio = osThreadGetPriority(Task2Handle);
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <StartTask2+0x3c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f004 f899 	bl	8004838 <osThreadGetPriority>
 8000706:	60f8      	str	r0, [r7, #12]

    HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <StartTask2+0x40>)
 8000710:	f000 fdb8 	bl	8001284 <HAL_GPIO_WritePin>
	Task_action('2');
 8000714:	2032      	movs	r0, #50	@ 0x32
 8000716:	f7ff ffb7 	bl	8000688 <Task_action>

	osThreadSetPriority(Task2Handle, myPrio-2);
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <StartTask2+0x3c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3b02      	subs	r3, #2
 8000722:	4619      	mov	r1, r3
 8000724:	4610      	mov	r0, r2
 8000726:	f004 f84b 	bl	80047c0 <osThreadSetPriority>
	myPrio = osThreadGetPriority(Task2Handle);
 800072a:	bf00      	nop
 800072c:	e7e6      	b.n	80006fc <StartTask2+0x8>
 800072e:	bf00      	nop
 8000730:	200004e8 	.word	0x200004e8
 8000734:	48001000 	.word	0x48001000

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800074a:	f000 fa7f 	bl	8000c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40001000 	.word	0x40001000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_MspInit+0x4c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 fb4d 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	@ 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000894 <HAL_I2C_MspInit+0xdc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d128      	bne.n	800082c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a2e      	ldr	r2, [pc, #184]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 80007e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007f2:	23c0      	movs	r3, #192	@ 0xc0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f6:	2312      	movs	r3, #18
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000802:	2304      	movs	r3, #4
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4823      	ldr	r0, [pc, #140]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800080e:	f000 fbbf 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800082a:	e02e      	b.n	800088a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <HAL_I2C_MspInit+0xe8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d129      	bne.n	800088a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	2312      	movs	r3, #18
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000860:	2304      	movs	r3, #4
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f000 fb8f 	bl	8000f90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400
 80008a0:	40005800 	.word	0x40005800

080008a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <HAL_SPI_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d128      	bne.n	8000918 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_SPI_MspInit+0x80>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008f6:	23e0      	movs	r3, #224	@ 0xe0
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000914:	f000 fb3c 	bl	8000f90 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013000 	.word	0x40013000
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d130      	bne.n	80009ac <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a1a      	ldr	r2, [pc, #104]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097a:	230c      	movs	r3, #12
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f000 fafa 	bl	8000f90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2105      	movs	r1, #5
 80009a0:	2026      	movs	r0, #38	@ 0x26
 80009a2:	f000 fa4f 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009a6:	2026      	movs	r0, #38	@ 0x26
 80009a8:	f000 fa68 	bl	8000e7c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <HAL_PCD_MspInit+0x80>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d129      	bne.n	8000a32 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a17      	ldr	r2, [pc, #92]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a08:	230e      	movs	r3, #14
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f000 fabb 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 8000a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_PCD_MspInit+0x84>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40005c00 	.word	0x40005c00
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	@ 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a54:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a32      	ldr	r2, [pc, #200]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f874 	bl	8002b64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a86:	f002 f829 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8000a8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8e:	f002 f825 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8000a92:	4603      	mov	r3, r0
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a9a:	4a23      	ldr	r2, [pc, #140]	@ (8000b28 <HAL_InitTick+0xe4>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	0c9b      	lsrs	r3, r3, #18
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <HAL_InitTick+0xec>)
 8000aaa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000acc:	4817      	ldr	r0, [pc, #92]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ace:	f002 faf0 	bl	80030b2 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11b      	bne.n	8000b18 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ae0:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ae2:	f002 fb47 	bl	8003174 <HAL_TIM_Base_Start_IT>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d111      	bne.n	8000b18 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af4:	2036      	movs	r0, #54	@ 0x36
 8000af6:	f000 f9c1 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d808      	bhi.n	8000b12 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2036      	movs	r0, #54	@ 0x36
 8000b06:	f000 f99d 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e002      	b.n	8000b18 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	@ 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	200004ec 	.word	0x200004ec
 8000b30:	40001000 	.word	0x40001000
 8000b34:	20000004 	.word	0x20000004

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b3c:	f002 f844 	bl	8002bc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x8>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fb9c 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <USART2_IRQHandler+0x10>)
 8000b86:	f002 fd91 	bl	80036ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000188 	.word	0x20000188

08000b94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <TIM6_DAC_IRQHandler+0x10>)
 8000b9a:	f002 fb55 	bl	8003248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200004ec 	.word	0x200004ec

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f006 fbad 	bl	8007358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fb0f 	bl	8000220 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c04:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c10:	08007534 	.word	0x08007534
  ldr r2, =_sbss
 8000c14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c18:	2000205c 	.word	0x2000205c

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f8fc 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f7ff ff04 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fd94 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000538 	.word	0x20000538

08000c74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000538 	.word	0x20000538

08000c8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e02e      	b.n	8000f08 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d008      	beq.n	8000ec6 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e020      	b.n	8000f08 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020e 	bic.w	r2, r2, #14
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d005      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e027      	b.n	8000f86 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020e 	bic.w	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	4798      	blx	r3
    }
  }
  return status;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e154      	b.n	800124a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8146 	beq.w	8001244 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80a0 	beq.w	8001244 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b58      	ldr	r3, [pc, #352]	@ (8001268 <HAL_GPIO_Init+0x2d8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a57      	ldr	r2, [pc, #348]	@ (8001268 <HAL_GPIO_Init+0x2d8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b55      	ldr	r3, [pc, #340]	@ (8001268 <HAL_GPIO_Init+0x2d8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111c:	4a53      	ldr	r2, [pc, #332]	@ (800126c <HAL_GPIO_Init+0x2dc>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001146:	d019      	beq.n	800117c <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_GPIO_Init+0x2e0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <HAL_GPIO_Init+0x2e4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a47      	ldr	r2, [pc, #284]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a46      	ldr	r2, [pc, #280]	@ (800127c <HAL_GPIO_Init+0x2ec>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1dc>
 8001168:	2304      	movs	r3, #4
 800116a:	e008      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800116c:	2305      	movs	r3, #5
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001170:	2303      	movs	r3, #3
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118e:	4937      	ldr	r1, [pc, #220]	@ (800126c <HAL_GPIO_Init+0x2dc>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001214:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f aea3 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	48000c00 	.word	0x48000c00
 800127c:	48001000 	.word	0x48001000
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f806 	bl	80012e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e08d      	b.n	8001428 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fa49 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2224      	movs	r2, #36	@ 0x24
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800134a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800135a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	e006      	b.n	8001382 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001380:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d108      	bne.n	800139c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	e007      	b.n	80013ac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69d9      	ldr	r1, [r3, #28]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	d138      	bne.n	80014b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e032      	b.n	80014ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	@ 0x24
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2220      	movs	r2, #32
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e000      	b.n	80014ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014b8:	2302      	movs	r3, #2
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d139      	bne.n	8001550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e033      	b.n	8001552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2224      	movs	r2, #36	@ 0x24
 80014f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b9      	b.n	80016e4 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fa19 	bl	80009bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 ffc7 	bl	800452a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e03e      	b.n	8001620 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	3311      	adds	r3, #17
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3310      	adds	r3, #16
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	3313      	adds	r3, #19
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3320      	adds	r3, #32
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3324      	adds	r3, #36	@ 0x24
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	3301      	adds	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	791b      	ldrb	r3, [r3, #4]
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3bb      	bcc.n	80015a2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e044      	b.n	80016ba <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	791b      	ldrb	r3, [r3, #4]
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3b5      	bcc.n	8001630 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3304      	adds	r3, #4
 80016cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016d0:	f002 ff46 	bl	8004560 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f000 bff4 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 816d 	beq.w	8001a02 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001728:	4bb4      	ldr	r3, [pc, #720]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4bb1      	ldr	r3, [pc, #708]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d157      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 8001740:	4bae      	ldr	r3, [pc, #696]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800174c:	d150      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 800174e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001752:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001762:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b3f      	cmp	r3, #63	@ 0x3f
 800176e:	d802      	bhi.n	8001776 <HAL_RCC_OscConfig+0x8a>
 8001770:	4ba2      	ldr	r3, [pc, #648]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0xb6>
 8001776:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800178a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001792:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800179e:	4b97      	ldr	r3, [pc, #604]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017a6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017ae:	fa92 f2a2 	rbit	r2, r2
 80017b2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017ba:	fab2 f282 	clz	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f042 0220 	orr.w	r2, r2, #32
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	f002 021f 	and.w	r2, r2, #31
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8114 	beq.w	8001a00 <HAL_RCC_OscConfig+0x314>
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 810b 	bne.w	8001a00 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f000 bf85 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
 8001802:	4b7e      	ldr	r3, [pc, #504]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7d      	ldr	r2, [pc, #500]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e036      	b.n	800187e <HAL_RCC_OscConfig+0x192>
 8001810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001814:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x14e>
 8001820:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a75      	ldr	r2, [pc, #468]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b73      	ldr	r3, [pc, #460]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a72      	ldr	r2, [pc, #456]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e021      	b.n	800187e <HAL_RCC_OscConfig+0x192>
 800183a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x17a>
 800184c:	4b6b      	ldr	r3, [pc, #428]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6a      	ldr	r2, [pc, #424]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b68      	ldr	r3, [pc, #416]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e00b      	b.n	800187e <HAL_RCC_OscConfig+0x192>
 8001866:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a64      	ldr	r2, [pc, #400]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800186c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b62      	ldr	r3, [pc, #392]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a61      	ldr	r2, [pc, #388]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800187e:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f023 020f 	bic.w	r2, r3, #15
 8001886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	495a      	ldr	r1, [pc, #360]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001894:	4313      	orrs	r3, r2
 8001896:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d054      	beq.n	8001952 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f9e4 	bl	8000c74 <HAL_GetTick>
 80018ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff f9df 	bl	8000c74 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d902      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	f000 bf19 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 80018c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80018dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80018e8:	d802      	bhi.n	80018f0 <HAL_RCC_OscConfig+0x204>
 80018ea:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x230>
 80018f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001908:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800190c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001918:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001920:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001924:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001928:	fa92 f2a2 	rbit	r2, r2
 800192c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001930:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f002 021f 	and.w	r2, r2, #31
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0b0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1c6>
 8001950:	e057      	b.n	8001a02 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f98f 	bl	8000c74 <HAL_GetTick>
 8001956:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f98a 	bl	8000c74 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	@ 0x64
 800196a:	d902      	bls.n	8001972 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	f000 bec4 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 8001972:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001976:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001986:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b3f      	cmp	r3, #63	@ 0x3f
 8001992:	d802      	bhi.n	800199a <HAL_RCC_OscConfig+0x2ae>
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x2da>
 800199a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_RCC_OscConfig+0x310>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ca:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80019ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80019d2:	fa92 f2a2 	rbit	r2, r2
 80019d6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80019da:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1b0      	bne.n	800195c <HAL_RCC_OscConfig+0x270>
 80019fa:	e002      	b.n	8001a02 <HAL_RCC_OscConfig+0x316>
 80019fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 816c 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a18:	4bcc      	ldr	r3, [pc, #816]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a24:	4bc9      	ldr	r3, [pc, #804]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d16d      	bne.n	8001b0c <HAL_RCC_OscConfig+0x420>
 8001a30:	4bc6      	ldr	r3, [pc, #792]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d167      	bne.n	8001b0c <HAL_RCC_OscConfig+0x420>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5a:	d802      	bhi.n	8001a62 <HAL_RCC_OscConfig+0x376>
 8001a5c:	4bbb      	ldr	r3, [pc, #748]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e013      	b.n	8001a8a <HAL_RCC_OscConfig+0x39e>
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001a86:	4bb1      	ldr	r3, [pc, #708]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001a90:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a94:	fa92 f2a2 	rbit	r2, r2
 8001a98:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001a9c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001aa0:	fab2 f282 	clz	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f002 021f 	and.w	r2, r2, #31
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00a      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3e6>
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f000 be14 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	21f8      	movs	r1, #248	@ 0xf8
 8001ae8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001af0:	fa91 f1a1 	rbit	r1, r1
 8001af4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001af8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001afc:	fab1 f181 	clz	r1, r1
 8001b00:	b2c9      	uxtb	r1, r1
 8001b02:	408b      	lsls	r3, r1
 8001b04:	4991      	ldr	r1, [pc, #580]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e0f1      	b.n	8001cf0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8083 	beq.w	8001c24 <HAL_RCC_OscConfig+0x538>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b30:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	461a      	mov	r2, r3
 8001b46:	2301      	movs	r3, #1
 8001b48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f893 	bl	8000c74 <HAL_GetTick>
 8001b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff f88e 	bl	8000c74 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d902      	bls.n	8001b6a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	f000 bdc8 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001b7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b88:	d802      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x4a4>
 8001b8a:	4b70      	ldr	r3, [pc, #448]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4cc>
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ba8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bb4:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001bbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001bca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0b4      	beq.n	8001b54 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	21f8      	movs	r1, #248	@ 0xf8
 8001c00:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c08:	fa91 f1a1 	rbit	r1, r1
 8001c0c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c10:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c14:	fab1 f181 	clz	r1, r1
 8001c18:	b2c9      	uxtb	r1, r1
 8001c1a:	408b      	lsls	r3, r1
 8001c1c:	494b      	ldr	r1, [pc, #300]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
 8001c22:	e065      	b.n	8001cf0 <HAL_RCC_OscConfig+0x604>
 8001c24:	2301      	movs	r3, #1
 8001c26:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f810 	bl	8000c74 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f80b 	bl	8000c74 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d902      	bls.n	8001c70 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f000 bd45 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c8e:	d802      	bhi.n	8001c96 <HAL_RCC_OscConfig+0x5aa>
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e013      	b.n	8001cbe <HAL_RCC_OscConfig+0x5d2>
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001cba:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_RCC_OscConfig+0x660>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001cc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001cd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1b4      	bne.n	8001c5a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8115 	beq.w	8001f30 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d07e      	beq.n	8001e14 <HAL_RCC_OscConfig+0x728>
 8001d16:	2301      	movs	r3, #1
 8001d18:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_OscConfig+0x664>)
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe ff98 	bl	8000c74 <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d48:	e00f      	b.n	8001d6a <HAL_RCC_OscConfig+0x67e>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe ff8e 	bl	8000c74 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d902      	bls.n	8001d6a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f000 bcc8 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	4bb0      	ldr	r3, [pc, #704]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	6019      	str	r1, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f1a3 	rbit	r1, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dea:	6019      	str	r1, [r3, #0]
  return result;
 8001dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0a0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x668>
 8001e12:	e08d      	b.n	8001f30 <HAL_RCC_OscConfig+0x844>
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e36:	601a      	str	r2, [r3, #0]
  return result;
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b90      	ldr	r3, [pc, #576]	@ (800208c <HAL_RCC_OscConfig+0x9a0>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	461a      	mov	r2, r3
 8001e52:	2300      	movs	r3, #0
 8001e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe ff0d 	bl	8000c74 <HAL_GetTick>
 8001e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe ff08 	bl	8000c74 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d902      	bls.n	8001e76 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f000 bc42 	b.w	80026fa <HAL_RCC_OscConfig+0x100e>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e7e:	2202      	movs	r2, #2
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	4b69      	ldr	r3, [pc, #420]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001eee:	2102      	movs	r1, #2
 8001ef0:	6019      	str	r1, [r3, #0]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f1a3 	rbit	r1, r3
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f08:	6019      	str	r1, [r3, #0]
  return result;
 8001f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d197      	bne.n	8001e60 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 819e 	beq.w	8002282 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b4b      	ldr	r3, [pc, #300]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	61d3      	str	r3, [r2, #28]
 8001f64:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b42      	ldr	r3, [pc, #264]	@ (8002090 <HAL_RCC_OscConfig+0x9a4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b3f      	ldr	r3, [pc, #252]	@ (8002090 <HAL_RCC_OscConfig+0x9a4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <HAL_RCC_OscConfig+0x9a4>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fe69 	bl	8000c74 <HAL_GetTick>
 8001fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7fe fe64 	bl	8000c74 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	@ 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e39e      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_RCC_OscConfig+0x9a4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ef      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x8fa>
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x966>
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x924>
 8001ff6:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	e020      	b.n	8002052 <HAL_RCC_OscConfig+0x966>
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x94e>
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a18      	ldr	r2, [pc, #96]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x966>
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a0f      	ldr	r2, [pc, #60]	@ (8002088 <HAL_RCC_OscConfig+0x99c>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fe06 	bl	8000c74 <HAL_GetTick>
 8002068:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	e012      	b.n	8002094 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fe01 	bl	8000c74 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e339      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	10908120 	.word	0x10908120
 8002090:	40007000 	.word	0x40007000
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020da:	601a      	str	r2, [r3, #0]
  return result;
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0xa10>
 80020f6:	4b98      	ldr	r3, [pc, #608]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	e013      	b.n	8002124 <HAL_RCC_OscConfig+0xa38>
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002128:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800212c:	2102      	movs	r1, #2
 800212e:	6011      	str	r1, [r2, #0]
 8002130:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002134:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	fa92 f1a2 	rbit	r1, r2
 800213e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002142:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002146:	6011      	str	r1, [r2, #0]
  return result;
 8002148:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	f43f af7f 	beq.w	800206e <HAL_RCC_OscConfig+0x982>
 8002170:	e07d      	b.n	800226e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fd7f 	bl	8000c74 <HAL_GetTick>
 8002176:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fd7a 	bl	8000c74 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e2b2      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021da:	601a      	str	r2, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_OscConfig+0xb10>
 80021f6:	4b58      	ldr	r3, [pc, #352]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	e013      	b.n	8002224 <HAL_RCC_OscConfig+0xb38>
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002228:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800222c:	2102      	movs	r1, #2
 800222e:	6011      	str	r1, [r2, #0]
 8002230:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002234:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	fa92 f1a2 	rbit	r1, r2
 800223e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002242:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002246:	6011      	str	r1, [r2, #0]
  return result;
 8002248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800224c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d186      	bne.n	800217c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800226e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a37      	ldr	r2, [pc, #220]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8232 	beq.w	80026f8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	f000 8201 	beq.w	80026a4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f040 8157 	bne.w	8002562 <HAL_RCC_OscConfig+0xe76>
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022d8:	601a      	str	r2, [r3, #0]
  return result;
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2300      	movs	r3, #0
 80022f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fcbb 	bl	8000c74 <HAL_GetTick>
 80022fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	e009      	b.n	8002318 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fcb6 	bl	8000c74 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1f0      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002320:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002346:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002350:	d804      	bhi.n	800235c <HAL_RCC_OscConfig+0xc70>
 8002352:	4b01      	ldr	r3, [pc, #4]	@ (8002358 <HAL_RCC_OscConfig+0xc6c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	e029      	b.n	80023ac <HAL_RCC_OscConfig+0xcc0>
 8002358:	40021000 	.word	0x40021000
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800238a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	4bc3      	ldr	r3, [pc, #780]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023be:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	fa92 f1a2 	rbit	r1, r2
 80023c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023cc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023d0:	6011      	str	r1, [r2, #0]
  return result;
 80023d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f042 0220 	orr.w	r2, r2, #32
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d185      	bne.n	8002304 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	4baf      	ldr	r3, [pc, #700]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	430b      	orrs	r3, r1
 800241a:	49a7      	ldr	r1, [pc, #668]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002444:	601a      	str	r2, [r3, #0]
  return result;
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800244e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800245a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fc05 	bl	8000c74 <HAL_GetTick>
 800246a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fc00 	bl	8000c74 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e13a      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800248c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80024bc:	d802      	bhi.n	80024c4 <HAL_RCC_OscConfig+0xdd8>
 80024be:	4b7e      	ldr	r3, [pc, #504]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e027      	b.n	8002514 <HAL_RCC_OscConfig+0xe28>
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4b69      	ldr	r3, [pc, #420]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002518:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800251c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002526:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fa92 f1a2 	rbit	r1, r2
 8002530:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002534:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002538:	6011      	str	r1, [r2, #0]
  return result;
 800253a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	fab2 f282 	clz	r2, r2
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f042 0220 	orr.w	r2, r2, #32
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f002 021f 	and.w	r2, r2, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f202 	lsl.w	r2, r1, r2
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d087      	beq.n	8002470 <HAL_RCC_OscConfig+0xd84>
 8002560:	e0ca      	b.n	80026f8 <HAL_RCC_OscConfig+0x100c>
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800256a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800256e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002586:	601a      	str	r2, [r3, #0]
  return result;
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002590:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800259c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fb64 	bl	8000c74 <HAL_GetTick>
 80025ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fb5f 	bl	8000c74 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e099      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025ea:	601a      	str	r2, [r3, #0]
  return result;
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80025fe:	d802      	bhi.n	8002606 <HAL_RCC_OscConfig+0xf1a>
 8002600:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e027      	b.n	8002656 <HAL_RCC_OscConfig+0xf6a>
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800260e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002634:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_OscConfig+0xfcc>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800265e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002662:	6011      	str	r1, [r2, #0]
 8002664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002668:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	fa92 f1a2 	rbit	r1, r2
 8002672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002676:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800267a:	6011      	str	r1, [r2, #0]
  return result;
 800267c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002680:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	fab2 f282 	clz	r2, r2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f042 0220 	orr.w	r2, r2, #32
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f002 021f 	and.w	r2, r2, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d187      	bne.n	80025b2 <HAL_RCC_OscConfig+0xec6>
 80026a2:	e029      	b.n	80026f8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d103      	bne.n	80026bc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e020      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
 80026b8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_RCC_OscConfig+0x1018>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10b      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026e0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b09e      	sub	sp, #120	@ 0x78
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e154      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b89      	ldr	r3, [pc, #548]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d910      	bls.n	8002750 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b86      	ldr	r3, [pc, #536]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4984      	ldr	r1, [pc, #528]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e13c      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4978      	ldr	r1, [pc, #480]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80cd 	beq.w	8002916 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d137      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xec>
 8002784:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002788:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b3f      	cmp	r3, #63	@ 0x3f
 800279c:	d802      	bhi.n	80027a4 <HAL_RCC_ClockConfig+0x9c>
 800279e:	4b6b      	ldr	r3, [pc, #428]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_ClockConfig+0xbc>
 80027a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80027b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c0:	4b62      	ldr	r3, [pc, #392]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d171      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0ea      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d137      	bne.n	800286c <HAL_RCC_ClockConfig+0x164>
 80027fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002800:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800280a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b3f      	cmp	r3, #63	@ 0x3f
 8002814:	d802      	bhi.n	800281c <HAL_RCC_ClockConfig+0x114>
 8002816:	4b4d      	ldr	r3, [pc, #308]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e00f      	b.n	800283c <HAL_RCC_ClockConfig+0x134>
 800281c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002820:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	647b      	str	r3, [r7, #68]	@ 0x44
 800282a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800282e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002838:	4b44      	ldr	r3, [pc, #272]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002840:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800284a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f042 0220 	orr.w	r2, r2, #32
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d135      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ae      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
 800286c:	2302      	movs	r3, #2
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b3f      	cmp	r3, #63	@ 0x3f
 8002882:	d802      	bhi.n	800288a <HAL_RCC_ClockConfig+0x182>
 8002884:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e00d      	b.n	80028a6 <HAL_RCC_ClockConfig+0x19e>
 800288a:	2302      	movs	r3, #2
 800288c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	2202      	movs	r2, #2
 80028a8:	61ba      	str	r2, [r7, #24]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	617a      	str	r2, [r7, #20]
  return result;
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f042 0220 	orr.w	r2, r2, #32
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e07a      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 0203 	bic.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	491a      	ldr	r1, [pc, #104]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e6:	f7fe f9c5 	bl	8000c74 <HAL_GetTick>
 80028ea:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ee:	f7fe f9c1 	bl	8000c74 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e062      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 020c 	and.w	r2, r3, #12
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	429a      	cmp	r2, r3
 8002914:	d1eb      	bne.n	80028ee <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d215      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 0207 	bic.w	r2, r3, #7
 800292c:	4906      	ldr	r1, [pc, #24]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d006      	beq.n	8002950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e041      	b.n	80029ca <HAL_RCC_ClockConfig+0x2c2>
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_RCC_ClockConfig+0x2cc>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	491a      	ldr	r1, [pc, #104]	@ (80029d4 <HAL_RCC_ClockConfig+0x2cc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_RCC_ClockConfig+0x2cc>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4912      	ldr	r1, [pc, #72]	@ (80029d4 <HAL_RCC_ClockConfig+0x2cc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800298e:	f000 f845 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002992:	4601      	mov	r1, r0
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_RCC_ClockConfig+0x2cc>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800299c:	22f0      	movs	r2, #240	@ 0xf0
 800299e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	60fa      	str	r2, [r7, #12]
  return result;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	40d3      	lsrs	r3, r2
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x2d0>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ba:	4a08      	ldr	r2, [pc, #32]	@ (80029dc <HAL_RCC_ClockConfig+0x2d4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCC_ClockConfig+0x2d8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f83e 	bl	8000a44 <HAL_InitTick>
  
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3778      	adds	r7, #120	@ 0x78
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080074f4 	.word	0x080074f4
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80029ee:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	603b      	str	r3, [r7, #0]
  return result;
 80029f8:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x30>
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x36>
 8002a4a:	e026      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4e:	613b      	str	r3, [r7, #16]
      break;
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a17      	ldr	r2, [pc, #92]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a78:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e004      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	e002      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9c:	613b      	str	r3, [r7, #16]
      break;
 8002a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa0:	693b      	ldr	r3, [r7, #16]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	007a1200 	.word	0x007a1200
 8002ab8:	0800750c 	.word	0x0800750c
 8002abc:	0800751c 	.word	0x0800751c
 8002ac0:	003d0900 	.word	0x003d0900

08002ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	@ (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ae2:	f7ff ffef 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002af0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	603a      	str	r2, [r7, #0]
  return result;
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	40d3      	lsrs	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08007504 	.word	0x08007504

08002b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b26:	f7ff ffcd 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	fa92 f2a2 	rbit	r2, r2
 8002b40:	603a      	str	r2, [r7, #0]
  return result;
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08007504 	.word	0x08007504

08002b64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	220f      	movs	r2, #15
 8002b72:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b80:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_RCC_GetClockConfig+0x60>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0207 	and.w	r2, r3, #7
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40022000 	.word	0x40022000

08002bc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd4:	2b80      	cmp	r3, #128	@ 0x80
 8002bd6:	d104      	bne.n	8002be2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002bd8:	f000 f80a 	bl	8002bf0 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <HAL_RCC_NMI_IRQHandler+0x24>)
 8002bde:	2280      	movs	r2, #128	@ 0x80
 8002be0:	701a      	strb	r2, [r3, #0]
  }
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	4002100a 	.word	0x4002100a

08002bf0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b092      	sub	sp, #72	@ 0x48
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80d2 	beq.w	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c24:	4b4d      	ldr	r3, [pc, #308]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10e      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b4a      	ldr	r3, [pc, #296]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a49      	ldr	r2, [pc, #292]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
 8002c3c:	4b47      	ldr	r3, [pc, #284]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a40      	ldr	r2, [pc, #256]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe f805 	bl	8000c74 <HAL_GetTick>
 8002c6a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe f801 	bl	8000c74 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	@ 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e167      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8c:	4b33      	ldr	r3, [pc, #204]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8082 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d07a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cac:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cfe:	4a17      	ldr	r2, [pc, #92]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d049      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fd ffb1 	bl	8000c74 <HAL_GetTick>
 8002d12:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fd ffad 	bl	8000c74 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e111      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]
  return result;
 8002d44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d56:	4b01      	ldr	r3, [pc, #4]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	e00d      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
 8002d64:	10908100 	.word	0x10908100
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	4b78      	ldr	r3, [pc, #480]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	613a      	str	r2, [r7, #16]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	fa92 f2a2 	rbit	r2, r2
 8002d82:	60fa      	str	r2, [r7, #12]
  return result;
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0b9      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	496a      	ldr	r1, [pc, #424]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd4:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	495d      	ldr	r1, [pc, #372]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4956      	ldr	r1, [pc, #344]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e10:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	494e      	ldr	r1, [pc, #312]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f023 0210 	bic.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4947      	ldr	r1, [pc, #284]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e4c:	4b42      	ldr	r3, [pc, #264]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	493f      	ldr	r1, [pc, #252]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f023 0220 	bic.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4938      	ldr	r1, [pc, #224]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e88:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4929      	ldr	r1, [pc, #164]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec4:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	4921      	ldr	r1, [pc, #132]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	491a      	ldr	r1, [pc, #104]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	490b      	ldr	r1, [pc, #44]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3748      	adds	r7, #72	@ 0x48
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e09d      	b.n	80030aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f7e:	d009      	beq.n	8002f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
 8002f86:	e005      	b.n	8002f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fc78 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd4:	d902      	bls.n	8002fdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e002      	b.n	8002fe2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fea:	d007      	beq.n	8002ffc <HAL_SPI_Init+0xa0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	ea42 0103 	orr.w	r1, r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	f003 0204 	and.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003078:	ea42 0103 	orr.w	r1, r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e049      	b.n	8003158 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f841 	bl	8003160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 f9d3 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04a      	b.n	8003222 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <HAL_TIM_Base_Start_IT+0xbc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d013      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_TIM_Base_Start_IT+0xc0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_TIM_Base_Start_IT+0xc4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_TIM_Base_Start_IT+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <HAL_TIM_Base_Start_IT+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d115      	bne.n	800320c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <HAL_TIM_Base_Start_IT+0xd0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d015      	beq.n	800321e <HAL_TIM_Base_Start_IT+0xaa>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d011      	beq.n	800321e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	e008      	b.n	800321e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e000      	b.n	8003220 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40013400 	.word	0x40013400
 8003240:	40014000 	.word	0x40014000
 8003244:	00010007 	.word	0x00010007

08003248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0202 	mvn.w	r2, #2
 800327c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8e4 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8d6 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8e7 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0204 	mvn.w	r2, #4
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8be 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8b0 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8c1 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0208 	mvn.w	r2, #8
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f898 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f88a 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f89b 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d020      	beq.n	8003390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0210 	mvn.w	r2, #16
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2208      	movs	r2, #8
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f872 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f864 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f875 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0201 	mvn.w	r2, #1
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd f9c2 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f908 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f900 	bl	80035fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f834 	bl	8003488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8c8 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a42      	ldr	r2, [pc, #264]	@ (80035b8 <TIM_Base_SetConfig+0x11c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3f      	ldr	r2, [pc, #252]	@ (80035bc <TIM_Base_SetConfig+0x120>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3e      	ldr	r2, [pc, #248]	@ (80035c0 <TIM_Base_SetConfig+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3d      	ldr	r2, [pc, #244]	@ (80035c4 <TIM_Base_SetConfig+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <TIM_Base_SetConfig+0x11c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <TIM_Base_SetConfig+0x120>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2f      	ldr	r2, [pc, #188]	@ (80035c0 <TIM_Base_SetConfig+0x124>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2e      	ldr	r2, [pc, #184]	@ (80035c4 <TIM_Base_SetConfig+0x128>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <TIM_Base_SetConfig+0x12c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <TIM_Base_SetConfig+0x130>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2b      	ldr	r2, [pc, #172]	@ (80035d0 <TIM_Base_SetConfig+0x134>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <TIM_Base_SetConfig+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0xe8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <TIM_Base_SetConfig+0x128>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0xe8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <TIM_Base_SetConfig+0x12c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0xe8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <TIM_Base_SetConfig+0x130>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0xe8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <TIM_Base_SetConfig+0x134>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
  }
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e040      	b.n	80036a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd f978 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2224      	movs	r2, #36	@ 0x24
 800363c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fd02 	bl	8004060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb2b 	bl	8003cb8 <UART_SetConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01b      	b.n	80036a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800367a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800368a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fd81 	bl	80041a4 <UART_CheckIdleState>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b0ba      	sub	sp, #232	@ 0xe8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036da:	4013      	ands	r3, r2
 80036dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00f      	beq.n	8003714 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 82ab 	beq.w	8003c60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
      }
      return;
 8003712:	e2a5      	b.n	8003c60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8117 	beq.w	800394c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800372a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800372e:	4b85      	ldr	r3, [pc, #532]	@ (8003944 <HAL_UART_IRQHandler+0x298>)
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 810a 	beq.w	800394c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d011      	beq.n	8003768 <HAL_UART_IRQHandler+0xbc>
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <HAL_UART_IRQHandler+0xec>
 8003774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2202      	movs	r2, #2
 8003786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378e:	f043 0204 	orr.w	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d011      	beq.n	80037c8 <HAL_UART_IRQHandler+0x11c>
 80037a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2204      	movs	r2, #4
 80037b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d017      	beq.n	8003804 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2208      	movs	r2, #8
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <HAL_UART_IRQHandler+0x18a>
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8211 	beq.w	8003c64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800384e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003870:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003886:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04f      	beq.n	800392e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fd9d 	bl	80043ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b40      	cmp	r3, #64	@ 0x40
 80038a0:	d141      	bne.n	8003926 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1d9      	bne.n	80038a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <HAL_UART_IRQHandler+0x29c>)
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fb06 	bl	8000f14 <HAL_DMA_Abort_IT>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e00f      	b.n	800393e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9b4 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00b      	b.n	800393e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9b0 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e007      	b.n	800393e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9ac 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800393c:	e192      	b.n	8003c64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	bf00      	nop
    return;
 8003940:	e190      	b.n	8003c64 <HAL_UART_IRQHandler+0x5b8>
 8003942:	bf00      	nop
 8003944:	04000120 	.word	0x04000120
 8003948:	08004497 	.word	0x08004497

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 814b 	bne.w	8003bec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8144 	beq.w	8003bec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 813d 	beq.w	8003bec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2210      	movs	r2, #16
 8003978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	f040 80b5 	bne.w	8003af4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003996:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8164 	beq.w	8003c68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f080 815c 	bcs.w	8003c68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	f000 8086 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1da      	bne.n	80039c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e1      	bne.n	8003a10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e3      	bne.n	8003a4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ab6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd f9e3 	bl	8000e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8d7 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af2:	e0b9      	b.n	8003c68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80ab 	beq.w	8003c6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a6 	beq.w	8003c6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e4      	bne.n	8003b20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	623b      	str	r3, [r7, #32]
   return(result);
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	69b9      	ldr	r1, [r7, #24]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e4      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f85b 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bea:	e03f      	b.n	8003c6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_UART_IRQHandler+0x56a>
 8003bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fc81 	bl	8004516 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c14:	e02d      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01c      	beq.n	8003c70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
    }
    return;
 8003c3e:	e017      	b.n	8003c70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d012      	beq.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fc32 	bl	80044c2 <UART_EndTransmit_IT>
    return;
 8003c5e:	e008      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c60:	bf00      	nop
 8003c62:	e006      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c64:	bf00      	nop
 8003c66:	e004      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c68:	bf00      	nop
 8003c6a:	e002      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c70:	bf00      	nop
  }

}
 8003c72:	37e8      	adds	r7, #232	@ 0xe8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003ce6:	f023 030c 	bic.w	r3, r3, #12
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	6979      	ldr	r1, [r7, #20]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4aa7      	ldr	r2, [pc, #668]	@ (8003fd0 <UART_SetConfig+0x318>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d120      	bne.n	8003d7a <UART_SetConfig+0xc2>
 8003d38:	4ba6      	ldr	r3, [pc, #664]	@ (8003fd4 <UART_SetConfig+0x31c>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d817      	bhi.n	8003d74 <UART_SetConfig+0xbc>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <UART_SetConfig+0x94>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d69 	.word	0x08003d69
 8003d54:	08003d6f 	.word	0x08003d6f
 8003d58:	08003d63 	.word	0x08003d63
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e0b5      	b.n	8003ece <UART_SetConfig+0x216>
 8003d62:	2302      	movs	r3, #2
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e0b2      	b.n	8003ece <UART_SetConfig+0x216>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e0af      	b.n	8003ece <UART_SetConfig+0x216>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e0ac      	b.n	8003ece <UART_SetConfig+0x216>
 8003d74:	2310      	movs	r3, #16
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e0a9      	b.n	8003ece <UART_SetConfig+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a96      	ldr	r2, [pc, #600]	@ (8003fd8 <UART_SetConfig+0x320>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d124      	bne.n	8003dce <UART_SetConfig+0x116>
 8003d84:	4b93      	ldr	r3, [pc, #588]	@ (8003fd4 <UART_SetConfig+0x31c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d90:	d011      	beq.n	8003db6 <UART_SetConfig+0xfe>
 8003d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0x110>
 8003d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d9c:	d011      	beq.n	8003dc2 <UART_SetConfig+0x10a>
 8003d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da2:	d811      	bhi.n	8003dc8 <UART_SetConfig+0x110>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0xf8>
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x104>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x110>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e08b      	b.n	8003ece <UART_SetConfig+0x216>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e088      	b.n	8003ece <UART_SetConfig+0x216>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e085      	b.n	8003ece <UART_SetConfig+0x216>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e082      	b.n	8003ece <UART_SetConfig+0x216>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e07f      	b.n	8003ece <UART_SetConfig+0x216>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a82      	ldr	r2, [pc, #520]	@ (8003fdc <UART_SetConfig+0x324>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d124      	bne.n	8003e22 <UART_SetConfig+0x16a>
 8003dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd4 <UART_SetConfig+0x31c>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003de0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0x152>
 8003de6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dea:	d817      	bhi.n	8003e1c <UART_SetConfig+0x164>
 8003dec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003df0:	d011      	beq.n	8003e16 <UART_SetConfig+0x15e>
 8003df2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003df6:	d811      	bhi.n	8003e1c <UART_SetConfig+0x164>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0x14c>
 8003dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x158>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x164>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e061      	b.n	8003ece <UART_SetConfig+0x216>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e05e      	b.n	8003ece <UART_SetConfig+0x216>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e05b      	b.n	8003ece <UART_SetConfig+0x216>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e058      	b.n	8003ece <UART_SetConfig+0x216>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e055      	b.n	8003ece <UART_SetConfig+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe0 <UART_SetConfig+0x328>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d124      	bne.n	8003e76 <UART_SetConfig+0x1be>
 8003e2c:	4b69      	ldr	r3, [pc, #420]	@ (8003fd4 <UART_SetConfig+0x31c>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x1a6>
 8003e3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e3e:	d817      	bhi.n	8003e70 <UART_SetConfig+0x1b8>
 8003e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e44:	d011      	beq.n	8003e6a <UART_SetConfig+0x1b2>
 8003e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4a:	d811      	bhi.n	8003e70 <UART_SetConfig+0x1b8>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <UART_SetConfig+0x1a0>
 8003e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x1ac>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x1b8>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e037      	b.n	8003ece <UART_SetConfig+0x216>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e034      	b.n	8003ece <UART_SetConfig+0x216>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e031      	b.n	8003ece <UART_SetConfig+0x216>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e02e      	b.n	8003ece <UART_SetConfig+0x216>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e02b      	b.n	8003ece <UART_SetConfig+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe4 <UART_SetConfig+0x32c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d124      	bne.n	8003eca <UART_SetConfig+0x212>
 8003e80:	4b54      	ldr	r3, [pc, #336]	@ (8003fd4 <UART_SetConfig+0x31c>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x1fa>
 8003e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e92:	d817      	bhi.n	8003ec4 <UART_SetConfig+0x20c>
 8003e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e98:	d011      	beq.n	8003ebe <UART_SetConfig+0x206>
 8003e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e9e:	d811      	bhi.n	8003ec4 <UART_SetConfig+0x20c>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <UART_SetConfig+0x1f4>
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea8:	d006      	beq.n	8003eb8 <UART_SetConfig+0x200>
 8003eaa:	e00b      	b.n	8003ec4 <UART_SetConfig+0x20c>
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x216>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e00a      	b.n	8003ece <UART_SetConfig+0x216>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e007      	b.n	8003ece <UART_SetConfig+0x216>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e004      	b.n	8003ece <UART_SetConfig+0x216>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e001      	b.n	8003ece <UART_SetConfig+0x216>
 8003eca:	2310      	movs	r3, #16
 8003ecc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed6:	d15b      	bne.n	8003f90 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d827      	bhi.n	8003f2e <UART_SetConfig+0x276>
 8003ede:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0x22c>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f1f 	.word	0x08003f1f
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7fe fde8 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8003f0c:	61b8      	str	r0, [r7, #24]
        break;
 8003f0e:	e013      	b.n	8003f38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fe fe06 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <UART_SetConfig+0x330>)
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e00c      	b.n	8003f38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7fe fd7d 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8003f22:	61b8      	str	r0, [r7, #24]
        break;
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77bb      	strb	r3, [r7, #30]
        break;
 8003f36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8082 	beq.w	8004044 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	005a      	lsls	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d916      	bls.n	8003f8a <UART_SetConfig+0x2d2>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d212      	bcs.n	8003f8a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f023 030f 	bic.w	r3, r3, #15
 8003f6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	89fa      	ldrh	r2, [r7, #14]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e05c      	b.n	8004044 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77bb      	strb	r3, [r7, #30]
 8003f8e:	e059      	b.n	8004044 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f90:	7ffb      	ldrb	r3, [r7, #31]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d835      	bhi.n	8004002 <UART_SetConfig+0x34a>
 8003f96:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <UART_SetConfig+0x2e4>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fed 	.word	0x08003fed
 8003fa8:	08004003 	.word	0x08004003
 8003fac:	08003ff3 	.word	0x08003ff3
 8003fb0:	08004003 	.word	0x08004003
 8003fb4:	08004003 	.word	0x08004003
 8003fb8:	08004003 	.word	0x08004003
 8003fbc:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fd8c 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8003fc4:	61b8      	str	r0, [r7, #24]
        break;
 8003fc6:	e021      	b.n	800400c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7fe fdaa 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	61b8      	str	r0, [r7, #24]
        break;
 8003fce:	e01d      	b.n	800400c <UART_SetConfig+0x354>
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40004400 	.word	0x40004400
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	40004c00 	.word	0x40004c00
 8003fe4:	40005000 	.word	0x40005000
 8003fe8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <UART_SetConfig+0x3a4>)
 8003fee:	61bb      	str	r3, [r7, #24]
        break;
 8003ff0:	e00c      	b.n	800400c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7fe fd13 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8003ff6:	61b8      	str	r0, [r7, #24]
        break;
 8003ff8:	e008      	b.n	800400c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	61bb      	str	r3, [r7, #24]
        break;
 8004000:	e004      	b.n	800400c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	77bb      	strb	r3, [r7, #30]
        break;
 800400a:	bf00      	nop
    }

    if (pclk != 0U)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085a      	lsrs	r2, r3, #1
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	441a      	add	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d909      	bls.n	8004040 <UART_SetConfig+0x388>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004032:	d205      	bcs.n	8004040 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e001      	b.n	8004044 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004050:	7fbb      	ldrb	r3, [r7, #30]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	007a1200 	.word	0x007a1200

08004060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01a      	beq.n	8004176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415e:	d10a      	bne.n	8004176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b098      	sub	sp, #96	@ 0x60
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b4:	f7fc fd5e 	bl	8000c74 <HAL_GetTick>
 80041b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d12e      	bne.n	8004226 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f88c 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e062      	b.n	80042ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d149      	bne.n	80042c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f856 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03c      	beq.n	80042c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	623b      	str	r3, [r7, #32]
   return(result);
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426c:	633b      	str	r3, [r7, #48]	@ 0x30
 800426e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e6      	bne.n	800424e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69b9      	ldr	r1, [r7, #24]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	617b      	str	r3, [r7, #20]
   return(result);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e011      	b.n	80042ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3758      	adds	r7, #88	@ 0x58
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e04f      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d04b      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fc fcb1 	bl	8000c74 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e04e      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d037      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d034      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b40      	cmp	r3, #64	@ 0x40
 8004340:	d031      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d110      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2208      	movs	r2, #8
 8004356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f838 	bl	80043ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2208      	movs	r2, #8
 8004362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e029      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	d111      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f81e 	bl	80043ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e00f      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d0a0      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b095      	sub	sp, #84	@ 0x54
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	61fb      	str	r3, [r7, #28]
   return(result);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004428:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800442e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004440:	2b01      	cmp	r3, #1
 8004442:	d118      	bne.n	8004476 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	60bb      	str	r3, [r7, #8]
   return(result);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	647b      	str	r3, [r7, #68]	@ 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	613b      	str	r3, [r7, #16]
   return(result);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e6      	bne.n	8004444 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800448a:	bf00      	nop
 800448c:	3754      	adds	r7, #84	@ 0x54
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fbe9 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b088      	sub	sp, #32
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	613b      	str	r3, [r7, #16]
   return(result);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fbb5 	bl	8003c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004532:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004536:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	b29b      	uxth	r3, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	b29b      	uxth	r3, r3
 8004548:	4013      	ands	r3, r2
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a2:	f3ef 8305 	mrs	r3, IPSR
 80045a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ae:	f3ef 8310 	mrs	r3, PRIMASK
 80045b2:	607b      	str	r3, [r7, #4]
  return(result);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <osKernelInitialize+0x32>
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <osKernelInitialize+0x64>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d109      	bne.n	80045d6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045c2:	f3ef 8311 	mrs	r3, BASEPRI
 80045c6:	603b      	str	r3, [r7, #0]
  return(result);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045ce:	f06f 0305 	mvn.w	r3, #5
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e00c      	b.n	80045f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <osKernelInitialize+0x64>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <osKernelInitialize+0x64>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e002      	b.n	80045f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045f0:	68fb      	ldr	r3, [r7, #12]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	2000053c 	.word	0x2000053c

08004604 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800460a:	f3ef 8305 	mrs	r3, IPSR
 800460e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004616:	f3ef 8310 	mrs	r3, PRIMASK
 800461a:	607b      	str	r3, [r7, #4]
  return(result);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <osKernelStart+0x32>
 8004622:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <osKernelStart+0x64>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d109      	bne.n	800463e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800462a:	f3ef 8311 	mrs	r3, BASEPRI
 800462e:	603b      	str	r3, [r7, #0]
  return(result);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004636:	f06f 0305 	mvn.w	r3, #5
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e00e      	b.n	800465c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <osKernelStart+0x64>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004646:	4b08      	ldr	r3, [pc, #32]	@ (8004668 <osKernelStart+0x64>)
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800464c:	f001 f976 	bl	800593c <vTaskStartScheduler>
      stat = osOK;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000053c 	.word	0x2000053c

0800466c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b092      	sub	sp, #72	@ 0x48
 8004670:	af04      	add	r7, sp, #16
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467c:	f3ef 8305 	mrs	r3, IPSR
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8094 	bne.w	80047b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	623b      	str	r3, [r7, #32]
  return(result);
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f040 808d 	bne.w	80047b2 <osThreadNew+0x146>
 8004698:	4b48      	ldr	r3, [pc, #288]	@ (80047bc <osThreadNew+0x150>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d106      	bne.n	80046ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a0:	f3ef 8311 	mrs	r3, BASEPRI
 80046a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 8082 	bne.w	80047b2 <osThreadNew+0x146>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d07e      	beq.n	80047b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046b8:	2318      	movs	r3, #24
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80046bc:	2300      	movs	r3, #0
 80046be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80046c0:	f107 031b 	add.w	r3, r7, #27
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d045      	beq.n	800475e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <osThreadNew+0x74>
        name = attr->name;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <osThreadNew+0x9a>
 80046f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f6:	2b38      	cmp	r3, #56	@ 0x38
 80046f8:	d805      	bhi.n	8004706 <osThreadNew+0x9a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <osThreadNew+0x9e>
        return (NULL);
 8004706:	2300      	movs	r3, #0
 8004708:	e054      	b.n	80047b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <osThreadNew+0xd4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2ba7      	cmp	r3, #167	@ 0xa7
 8004728:	d90a      	bls.n	8004740 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <osThreadNew+0xd4>
        mem = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473e:	e010      	b.n	8004762 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <osThreadNew+0xf6>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <osThreadNew+0xf6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <osThreadNew+0xf6>
          mem = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475c:	e001      	b.n	8004762 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2b01      	cmp	r3, #1
 8004766:	d110      	bne.n	800478a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004770:	9202      	str	r2, [sp, #8]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800477c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fe6a 	bl	8005458 <xTaskCreateStatic>
 8004784:	4603      	mov	r3, r0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e013      	b.n	80047b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d110      	bne.n	80047b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	b29a      	uxth	r2, r3
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 feb7 	bl	8005516 <xTaskCreate>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <osThreadNew+0x146>
          hTask = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3738      	adds	r7, #56	@ 0x38
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	2000053c 	.word	0x2000053c

080047c0 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ce:	f3ef 8305 	mrs	r3, IPSR
 80047d2:	617b      	str	r3, [r7, #20]
  return(result);
 80047d4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047da:	f3ef 8310 	mrs	r3, PRIMASK
 80047de:	613b      	str	r3, [r7, #16]
  return(result);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <osThreadSetPriority+0x3a>
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <osThreadSetPriority+0x74>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d109      	bne.n	8004802 <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ee:	f3ef 8311 	mrs	r3, BASEPRI
 80047f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <osThreadSetPriority+0x42>
    stat = osErrorISR;
 80047fa:	f06f 0305 	mvn.w	r3, #5
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e013      	b.n	800482a <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <osThreadSetPriority+0x54>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	dd02      	ble.n	8004814 <osThreadSetPriority+0x54>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b38      	cmp	r3, #56	@ 0x38
 8004812:	dd03      	ble.n	800481c <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8004814:	f06f 0303 	mvn.w	r3, #3
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e006      	b.n	800482a <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	69b8      	ldr	r0, [r7, #24]
 8004826:	f000 ffe5 	bl	80057f4 <vTaskPrioritySet>
  }

  return (stat);
 800482a:	69fb      	ldr	r3, [r7, #28]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2000053c 	.word	0x2000053c

08004838 <osThreadGetPriority>:

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004844:	f3ef 8305 	mrs	r3, IPSR
 8004848:	617b      	str	r3, [r7, #20]
  return(result);
 800484a:	697b      	ldr	r3, [r7, #20]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	d112      	bne.n	8004876 <osThreadGetPriority+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004850:	f3ef 8310 	mrs	r3, PRIMASK
 8004854:	613b      	str	r3, [r7, #16]
  return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10c      	bne.n	8004876 <osThreadGetPriority+0x3e>
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <osThreadGetPriority+0x5c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d105      	bne.n	8004870 <osThreadGetPriority+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004864:	f3ef 8311 	mrs	r3, BASEPRI
 8004868:	60fb      	str	r3, [r7, #12]
  return(result);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <osThreadGetPriority+0x3e>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <osThreadGetPriority+0x46>
    prio = osPriorityError;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e004      	b.n	8004888 <osThreadGetPriority+0x50>
  } else {
    prio = (osPriority_t)uxTaskPriorityGet (hTask);
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f000 ff9e 	bl	80057c0 <uxTaskPriorityGet>
 8004884:	4603      	mov	r3, r0
 8004886:	61fb      	str	r3, [r7, #28]
  }

  return (prio);
 8004888:	69fb      	ldr	r3, [r7, #28]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000053c 	.word	0x2000053c

08004898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a07      	ldr	r2, [pc, #28]	@ (80048c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80048a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a06      	ldr	r2, [pc, #24]	@ (80048c8 <vApplicationGetIdleTaskMemory+0x30>)
 80048ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2280      	movs	r2, #128	@ 0x80
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000540 	.word	0x20000540
 80048c8:	200005e8 	.word	0x200005e8

080048cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a07      	ldr	r2, [pc, #28]	@ (80048f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80048dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <vApplicationGetTimerTaskMemory+0x30>)
 80048e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	200007e8 	.word	0x200007e8
 80048fc:	20000890 	.word	0x20000890

08004900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f04f 32ff 	mov.w	r2, #4294967295
 8004918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0208 	add.w	r2, r3, #8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 0208 	add.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e00c      	b.n	80049dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3308      	adds	r3, #8
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <vListInsert+0x2e>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d2f6      	bcs.n	80049ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6892      	ldr	r2, [r2, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d103      	bne.n	8004a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a94:	f002 f8f8 	bl	8006c88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	22ff      	movs	r2, #255	@ 0xff
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	22ff      	movs	r2, #255	@ 0xff
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d114      	bne.n	8004b14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01a      	beq.n	8004b28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3310      	adds	r3, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f9c4 	bl	8005e84 <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <xQueueGenericReset+0xd0>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	e009      	b.n	8004b28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3310      	adds	r3, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fef1 	bl	8004900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3324      	adds	r3, #36	@ 0x24
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff feec 	bl	8004900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b28:	f002 f8e0 	bl	8006cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b2c:	2301      	movs	r3, #1
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	@ 0x38
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <xQueueGenericCreateStatic+0x56>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <xQueueGenericCreateStatic+0x5a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <xQueueGenericCreateStatic+0x5c>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <xQueueGenericCreateStatic+0x84>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <xQueueGenericCreateStatic+0x88>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <xQueueGenericCreateStatic+0x8a>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	61fb      	str	r3, [r7, #28]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004be2:	2350      	movs	r3, #80	@ 0x50
 8004be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b50      	cmp	r3, #80	@ 0x50
 8004bea:	d00b      	beq.n	8004c04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	61bb      	str	r3, [r7, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c16:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f805 	bl	8004c34 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3730      	adds	r7, #48	@ 0x30
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c62:	2101      	movs	r1, #1
 8004c64:	69b8      	ldr	r0, [r7, #24]
 8004c66:	f7ff feff 	bl	8004a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	@ 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xQueueGenericSend+0x34>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSend+0x42>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <xQueueGenericSend+0x46>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueGenericSend+0x48>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <xQueueGenericSend+0x64>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSend+0x72>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <xQueueGenericSend+0x76>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueGenericSend+0x78>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xQueueGenericSend+0x94>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d10:	f001 fa84 	bl	800621c <xTaskGetSchedulerState>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <xQueueGenericSend+0xa4>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <xQueueGenericSend+0xa8>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <xQueueGenericSend+0xaa>
 8004d24:	2300      	movs	r3, #0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	61fb      	str	r3, [r7, #28]
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	e7fd      	b.n	8004d3e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d42:	f001 ffa1 	bl	8006c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <xQueueGenericSend+0xdc>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d129      	bne.n	8004dac <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d5e:	f000 fa0d 	bl	800517c <prvCopyDataToQueue>
 8004d62:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	3324      	adds	r3, #36	@ 0x24
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f887 	bl	8005e84 <xTaskRemoveFromEventList>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e7c <xQueueGenericSend+0x200>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	e00a      	b.n	8004da4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d94:	4b39      	ldr	r3, [pc, #228]	@ (8004e7c <xQueueGenericSend+0x200>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004da4:	f001 ffa2 	bl	8006cec <vPortExitCritical>
				return pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e063      	b.n	8004e74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004db2:	f001 ff9b 	bl	8006cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e05c      	b.n	8004e74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 f8c1 	bl	8005f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dce:	f001 ff8d 	bl	8006cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dd2:	f000 fe23 	bl	8005a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dd6:	f001 ff57 	bl	8006c88 <vPortEnterCritical>
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004de0:	b25b      	sxtb	r3, r3
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d103      	bne.n	8004df0 <xQueueGenericSend+0x174>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSend+0x18a>
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e06:	f001 ff71 	bl	8006cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0a:	1d3a      	adds	r2, r7, #4
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 f8b0 	bl	8005f78 <xTaskCheckForTimeOut>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d124      	bne.n	8004e68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e20:	f000 faa4 	bl	800536c <prvIsQueueFull>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 ffd4 	bl	8005de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e3a:	f000 fa2f 	bl	800529c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e3e:	f000 fdfb 	bl	8005a38 <xTaskResumeAll>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f af7c 	bne.w	8004d42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <xQueueGenericSend+0x200>)
 8004e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	e772      	b.n	8004d42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e5e:	f000 fa1d 	bl	800529c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e62:	f000 fde9 	bl	8005a38 <xTaskResumeAll>
 8004e66:	e76c      	b.n	8004d42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e6a:	f000 fa17 	bl	800529c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e6e:	f000 fde3 	bl	8005a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e72:	2300      	movs	r3, #0
		}
	}
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3738      	adds	r7, #56	@ 0x38
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08e      	sub	sp, #56	@ 0x38
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <xQueueGenericSendFromISR+0x3e>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x42>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericSendFromISR+0x44>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	623b      	str	r3, [r7, #32]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSendFromISR+0x6e>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <xQueueGenericSendFromISR+0x72>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueGenericSendFromISR+0x74>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	61fb      	str	r3, [r7, #28]
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f10:	f001 ff9a 	bl	8006e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f14:	f3ef 8211 	mrs	r2, BASEPRI
 8004f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61ba      	str	r2, [r7, #24]
 8004f2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <xQueueGenericSendFromISR+0xc2>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d12c      	bne.n	8004f9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f52:	f000 f913 	bl	800517c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f56:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d112      	bne.n	8004f86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d016      	beq.n	8004f96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	3324      	adds	r3, #36	@ 0x24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff89 	bl	8005e84 <xTaskRemoveFromEventList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00e      	beq.n	8004f96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e007      	b.n	8004f96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	b25a      	sxtb	r2, r3
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f96:	2301      	movs	r3, #1
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004f9a:	e001      	b.n	8004fa0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004faa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3738      	adds	r7, #56	@ 0x38
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	@ 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <xQueueReceive+0x32>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	623b      	str	r3, [r7, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0x40>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <xQueueReceive+0x44>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <xQueueReceive+0x46>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <xQueueReceive+0x62>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61fb      	str	r3, [r7, #28]
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	e7fd      	b.n	8005016 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800501a:	f001 f8ff 	bl	800621c <xTaskGetSchedulerState>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <xQueueReceive+0x72>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueReceive+0x76>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueReceive+0x78>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <xQueueReceive+0x94>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	61bb      	str	r3, [r7, #24]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800504c:	f001 fe1c 	bl	8006c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01f      	beq.n	800509c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005060:	f000 f8f6 	bl	8005250 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00f      	beq.n	8005094 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	3310      	adds	r3, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f000 ff03 	bl	8005e84 <xTaskRemoveFromEventList>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005084:	4b3c      	ldr	r3, [pc, #240]	@ (8005178 <xQueueReceive+0x1c0>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005094:	f001 fe2a 	bl	8006cec <vPortExitCritical>
				return pdPASS;
 8005098:	2301      	movs	r3, #1
 800509a:	e069      	b.n	8005170 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050a2:	f001 fe23 	bl	8006cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e062      	b.n	8005170 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b0:	f107 0310 	add.w	r3, r7, #16
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ff49 	bl	8005f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050be:	f001 fe15 	bl	8006cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c2:	f000 fcab 	bl	8005a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050c6:	f001 fddf 	bl	8006c88 <vPortEnterCritical>
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050d0:	b25b      	sxtb	r3, r3
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d103      	bne.n	80050e0 <xQueueReceive+0x128>
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d103      	bne.n	80050f6 <xQueueReceive+0x13e>
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f6:	f001 fdf9 	bl	8006cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050fa:	1d3a      	adds	r2, r7, #4
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 ff38 	bl	8005f78 <xTaskCheckForTimeOut>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d123      	bne.n	8005156 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800510e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005110:	f000 f916 	bl	8005340 <prvIsQueueEmpty>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	3324      	adds	r3, #36	@ 0x24
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fe5c 	bl	8005de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512a:	f000 f8b7 	bl	800529c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800512e:	f000 fc83 	bl	8005a38 <xTaskResumeAll>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d189      	bne.n	800504c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <xQueueReceive+0x1c0>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	e780      	b.n	800504c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800514a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800514c:	f000 f8a6 	bl	800529c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005150:	f000 fc72 	bl	8005a38 <xTaskResumeAll>
 8005154:	e77a      	b.n	800504c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005158:	f000 f8a0 	bl	800529c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800515c:	f000 fc6c 	bl	8005a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005162:	f000 f8ed 	bl	8005340 <prvIsQueueEmpty>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f43f af6f 	beq.w	800504c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800516e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	@ 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10d      	bne.n	80051b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d14d      	bne.n	800523e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f856 	bl	8006258 <xTaskPriorityDisinherit>
 80051ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e043      	b.n	800523e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d119      	bne.n	80051f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6898      	ldr	r0, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	461a      	mov	r2, r3
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	f002 f8ec 	bl	80073a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	441a      	add	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d32b      	bcc.n	800523e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	e026      	b.n	800523e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68d8      	ldr	r0, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	461a      	mov	r2, r3
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	f002 f8d2 	bl	80073a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	425b      	negs	r3, r3
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d207      	bcs.n	800522c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	425b      	negs	r3, r3
 8005226:	441a      	add	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d105      	bne.n	800523e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3b01      	subs	r3, #1
 800523c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005246:	697b      	ldr	r3, [r7, #20]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d303      	bcc.n	8005284 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68d9      	ldr	r1, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	461a      	mov	r2, r3
 800528e:	6838      	ldr	r0, [r7, #0]
 8005290:	f002 f888 	bl	80073a4 <memcpy>
	}
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052a4:	f001 fcf0 	bl	8006c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b0:	e011      	b.n	80052d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3324      	adds	r3, #36	@ 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fde0 	bl	8005e84 <xTaskRemoveFromEventList>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052ca:	f000 feb9 	bl	8006040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dce9      	bgt.n	80052b2 <prvUnlockQueue+0x16>
 80052de:	e000      	b.n	80052e2 <prvUnlockQueue+0x46>
					break;
 80052e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	22ff      	movs	r2, #255	@ 0xff
 80052e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052ea:	f001 fcff 	bl	8006cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052ee:	f001 fccb 	bl	8006c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052fa:	e011      	b.n	8005320 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d012      	beq.n	800532a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3310      	adds	r3, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fdbb 	bl	8005e84 <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005314:	f000 fe94 	bl	8006040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	3b01      	subs	r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005324:	2b00      	cmp	r3, #0
 8005326:	dce9      	bgt.n	80052fc <prvUnlockQueue+0x60>
 8005328:	e000      	b.n	800532c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800532a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005334:	f001 fcda 	bl	8006cec <vPortExitCritical>
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005348:	f001 fc9e 	bl	8006c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e001      	b.n	800535e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f001 fcc5 	bl	8006cec <vPortExitCritical>

	return xReturn;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005374:	f001 fc88 	bl	8006c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	429a      	cmp	r2, r3
 8005382:	d102      	bne.n	800538a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e001      	b.n	800538e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800538e:	f001 fcad 	bl	8006cec <vPortExitCritical>

	return xReturn;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e014      	b.n	80053d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053ac:	4a0f      	ldr	r2, [pc, #60]	@ (80053ec <vQueueAddToRegistry+0x50>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053b8:	490c      	ldr	r1, [pc, #48]	@ (80053ec <vQueueAddToRegistry+0x50>)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053c2:	4a0a      	ldr	r2, [pc, #40]	@ (80053ec <vQueueAddToRegistry+0x50>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053ce:	e006      	b.n	80053de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d9e7      	bls.n	80053ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000c90 	.word	0x20000c90

080053f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005400:	f001 fc42 	bl	8006c88 <vPortEnterCritical>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800540a:	b25b      	sxtb	r3, r3
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d103      	bne.n	800541a <vQueueWaitForMessageRestricted+0x2a>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005420:	b25b      	sxtb	r3, r3
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d103      	bne.n	8005430 <vQueueWaitForMessageRestricted+0x40>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005430:	f001 fc5c 	bl	8006cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3324      	adds	r3, #36	@ 0x24
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fcf1 	bl	8005e2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800544a:	6978      	ldr	r0, [r7, #20]
 800544c:	f7ff ff26 	bl	800529c <prvUnlockQueue>
	}
 8005450:	bf00      	nop
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	@ 0x38
 800545c:	af04      	add	r7, sp, #16
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <xTaskCreateStatic+0x2c>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	623b      	str	r3, [r7, #32]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	61fb      	str	r3, [r7, #28]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054a2:	23a8      	movs	r3, #168	@ 0xa8
 80054a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80054aa:	d00b      	beq.n	80054c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	61bb      	str	r3, [r7, #24]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01e      	beq.n	8005508 <xTaskCreateStatic+0xb0>
 80054ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054e2:	2300      	movs	r3, #0
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	9302      	str	r3, [sp, #8]
 80054ea:	f107 0314 	add.w	r3, r7, #20
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f850 	bl	80055a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005502:	f000 f8ed 	bl	80056e0 <prvAddNewTaskToReadyList>
 8005506:	e001      	b.n	800550c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800550c:	697b      	ldr	r3, [r7, #20]
	}
 800550e:	4618      	mov	r0, r3
 8005510:	3728      	adds	r7, #40	@ 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005516:	b580      	push	{r7, lr}
 8005518:	b08c      	sub	sp, #48	@ 0x30
 800551a:	af04      	add	r7, sp, #16
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fcce 	bl	8006ecc <pvPortMalloc>
 8005530:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00e      	beq.n	8005556 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005538:	20a8      	movs	r0, #168	@ 0xa8
 800553a:	f001 fcc7 	bl	8006ecc <pvPortMalloc>
 800553e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
 800554c:	e005      	b.n	800555a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f001 fd84 	bl	800705c <vPortFree>
 8005554:	e001      	b.n	800555a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d017      	beq.n	8005590 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	2300      	movs	r3, #0
 800556c:	9303      	str	r3, [sp, #12]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f80e 	bl	80055a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005584:	69f8      	ldr	r0, [r7, #28]
 8005586:	f000 f8ab 	bl	80056e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800558a:	2301      	movs	r3, #1
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	e002      	b.n	8005596 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005596:	69bb      	ldr	r3, [r7, #24]
	}
 8005598:	4618      	mov	r0, r3
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	461a      	mov	r2, r3
 80055b8:	21a5      	movs	r1, #165	@ 0xa5
 80055ba:	f001 fe67 	bl	800728c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	3b01      	subs	r3, #1
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	617b      	str	r3, [r7, #20]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e012      	b.n	8005626 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	7819      	ldrb	r1, [r3, #0]
 8005608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	3334      	adds	r3, #52	@ 0x34
 8005610:	460a      	mov	r2, r1
 8005612:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d9e9      	bls.n	8005600 <prvInitialiseNewTask+0x60>
 800562c:	e000      	b.n	8005630 <prvInitialiseNewTask+0x90>
		{
			break;
 800562e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	2b37      	cmp	r3, #55	@ 0x37
 800563c:	d901      	bls.n	8005642 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800563e:	2337      	movs	r3, #55	@ 0x37
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	2200      	movs	r2, #0
 8005652:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	3304      	adds	r3, #4
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff f971 	bl	8004940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	3318      	adds	r3, #24
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff f96c 	bl	8004940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	2200      	movs	r2, #0
 800568a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	3354      	adds	r3, #84	@ 0x54
 8005692:	224c      	movs	r2, #76	@ 0x4c
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f001 fdf8 	bl	800728c <memset>
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	4a0d      	ldr	r2, [pc, #52]	@ (80056d4 <prvInitialiseNewTask+0x134>)
 80056a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <prvInitialiseNewTask+0x138>)
 80056a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	4a0c      	ldr	r2, [pc, #48]	@ (80056dc <prvInitialiseNewTask+0x13c>)
 80056ac:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68f9      	ldr	r1, [r7, #12]
 80056b2:	69b8      	ldr	r0, [r7, #24]
 80056b4:	f001 f9b4 	bl	8006a20 <pxPortInitialiseStack>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ca:	bf00      	nop
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20001f1c 	.word	0x20001f1c
 80056d8:	20001f84 	.word	0x20001f84
 80056dc:	20001fec 	.word	0x20001fec

080056e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056e8:	f001 face 	bl	8006c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056ec:	4b2d      	ldr	r3, [pc, #180]	@ (80057a4 <prvAddNewTaskToReadyList+0xc4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3301      	adds	r3, #1
 80056f2:	4a2c      	ldr	r2, [pc, #176]	@ (80057a4 <prvAddNewTaskToReadyList+0xc4>)
 80056f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056f6:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <prvAddNewTaskToReadyList+0xc8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056fe:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <prvAddNewTaskToReadyList+0xc8>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005704:	4b27      	ldr	r3, [pc, #156]	@ (80057a4 <prvAddNewTaskToReadyList+0xc4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d110      	bne.n	800572e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800570c:	f000 fcbc 	bl	8006088 <prvInitialiseTaskLists>
 8005710:	e00d      	b.n	800572e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005712:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <prvAddNewTaskToReadyList+0xcc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800571a:	4b23      	ldr	r3, [pc, #140]	@ (80057a8 <prvAddNewTaskToReadyList+0xc8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d802      	bhi.n	800572e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005728:	4a1f      	ldr	r2, [pc, #124]	@ (80057a8 <prvAddNewTaskToReadyList+0xc8>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800572e:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <prvAddNewTaskToReadyList+0xd0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	4a1e      	ldr	r2, [pc, #120]	@ (80057b0 <prvAddNewTaskToReadyList+0xd0>)
 8005736:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005738:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <prvAddNewTaskToReadyList+0xd0>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005744:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <prvAddNewTaskToReadyList+0xd4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d903      	bls.n	8005754 <prvAddNewTaskToReadyList+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <prvAddNewTaskToReadyList+0xd4>)
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4a15      	ldr	r2, [pc, #84]	@ (80057b8 <prvAddNewTaskToReadyList+0xd8>)
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7ff f8f5 	bl	800495a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005770:	f001 fabc 	bl	8006cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005774:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <prvAddNewTaskToReadyList+0xcc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <prvAddNewTaskToReadyList+0xc8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	429a      	cmp	r2, r3
 8005788:	d207      	bcs.n	800579a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800578a:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <prvAddNewTaskToReadyList+0xdc>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200011a4 	.word	0x200011a4
 80057a8:	20000cd0 	.word	0x20000cd0
 80057ac:	200011b0 	.word	0x200011b0
 80057b0:	200011c0 	.word	0x200011c0
 80057b4:	200011ac 	.word	0x200011ac
 80057b8:	20000cd4 	.word	0x20000cd4
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80057c8:	f001 fa5e 	bl	8006c88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <uxTaskPriorityGet+0x18>
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <uxTaskPriorityGet+0x30>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	e000      	b.n	80057da <uxTaskPriorityGet+0x1a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80057e2:	f001 fa83 	bl	8006cec <vPortExitCritical>

		return uxReturn;
 80057e6:	68bb      	ldr	r3, [r7, #8]
	}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000cd0 	.word	0x20000cd0

080057f4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b37      	cmp	r3, #55	@ 0x37
 8005806:	d90b      	bls.n	8005820 <vTaskPrioritySet+0x2c>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	60fb      	str	r3, [r7, #12]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b37      	cmp	r3, #55	@ 0x37
 8005824:	d901      	bls.n	800582a <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005826:	2337      	movs	r3, #55	@ 0x37
 8005828:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800582a:	f001 fa2d 	bl	8006c88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <vTaskPrioritySet+0x46>
 8005834:	4b3d      	ldr	r3, [pc, #244]	@ (800592c <vTaskPrioritySet+0x138>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	e000      	b.n	800583c <vTaskPrioritySet+0x48>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005842:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d068      	beq.n	800591e <vTaskPrioritySet+0x12a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	429a      	cmp	r2, r3
 8005852:	d90d      	bls.n	8005870 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8005854:	4b35      	ldr	r3, [pc, #212]	@ (800592c <vTaskPrioritySet+0x138>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	429a      	cmp	r2, r3
 800585c:	d00f      	beq.n	800587e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800585e:	4b33      	ldr	r3, [pc, #204]	@ (800592c <vTaskPrioritySet+0x138>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d309      	bcc.n	800587e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800586a:	2301      	movs	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e006      	b.n	800587e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005870:	4b2e      	ldr	r3, [pc, #184]	@ (800592c <vTaskPrioritySet+0x138>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	429a      	cmp	r2, r3
 8005878:	d101      	bne.n	800587e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005882:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	429a      	cmp	r2, r3
 800588e:	d102      	bne.n	8005896 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db04      	blt.n	80058ae <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005930 <vTaskPrioritySet+0x13c>)
 80058be:	4413      	add	r3, r2
 80058c0:	4299      	cmp	r1, r3
 80058c2:	d101      	bne.n	80058c8 <vTaskPrioritySet+0xd4>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <vTaskPrioritySet+0xd6>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01c      	beq.n	8005908 <vTaskPrioritySet+0x114>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff f89e 	bl	8004a14 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	4b15      	ldr	r3, [pc, #84]	@ (8005934 <vTaskPrioritySet+0x140>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <vTaskPrioritySet+0xf8>
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4a12      	ldr	r2, [pc, #72]	@ (8005934 <vTaskPrioritySet+0x140>)
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005930 <vTaskPrioritySet+0x13c>)
 80058fa:	441a      	add	r2, r3
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f7ff f829 	bl	800495a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <vTaskPrioritySet+0x12a>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <vTaskPrioritySet+0x144>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800591e:	f001 f9e5 	bl	8006cec <vPortExitCritical>
	}
 8005922:	bf00      	nop
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000cd0 	.word	0x20000cd0
 8005930:	20000cd4 	.word	0x20000cd4
 8005934:	200011ac 	.word	0x200011ac
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	@ 0x28
 8005940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800594a:	463a      	mov	r2, r7
 800594c:	1d39      	adds	r1, r7, #4
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ffa0 	bl	8004898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	9202      	str	r2, [sp, #8]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	2300      	movs	r3, #0
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	460a      	mov	r2, r1
 800596a:	4924      	ldr	r1, [pc, #144]	@ (80059fc <vTaskStartScheduler+0xc0>)
 800596c:	4824      	ldr	r0, [pc, #144]	@ (8005a00 <vTaskStartScheduler+0xc4>)
 800596e:	f7ff fd73 	bl	8005458 <xTaskCreateStatic>
 8005972:	4603      	mov	r3, r0
 8005974:	4a23      	ldr	r2, [pc, #140]	@ (8005a04 <vTaskStartScheduler+0xc8>)
 8005976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005978:	4b22      	ldr	r3, [pc, #136]	@ (8005a04 <vTaskStartScheduler+0xc8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e001      	b.n	800598a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005990:	f000 fd26 	bl	80063e0 <xTimerCreateTimerTask>
 8005994:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d11b      	bne.n	80059d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
}
 80059ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059b0:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <vTaskStartScheduler+0xcc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3354      	adds	r3, #84	@ 0x54
 80059b6:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <vTaskStartScheduler+0xd0>)
 80059b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <vTaskStartScheduler+0xd4>)
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059c2:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <vTaskStartScheduler+0xd8>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059c8:	4b13      	ldr	r3, [pc, #76]	@ (8005a18 <vTaskStartScheduler+0xdc>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059ce:	f001 f8b7 	bl	8006b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059d2:	e00f      	b.n	80059f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d10b      	bne.n	80059f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <vTaskStartScheduler+0xb4>
}
 80059f4:	bf00      	nop
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	08007494 	.word	0x08007494
 8005a00:	08006059 	.word	0x08006059
 8005a04:	200011c8 	.word	0x200011c8
 8005a08:	20000cd0 	.word	0x20000cd0
 8005a0c:	20000010 	.word	0x20000010
 8005a10:	200011c4 	.word	0x200011c4
 8005a14:	200011b0 	.word	0x200011b0
 8005a18:	200011a8 	.word	0x200011a8

08005a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a20:	4b04      	ldr	r3, [pc, #16]	@ (8005a34 <vTaskSuspendAll+0x18>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	4a03      	ldr	r2, [pc, #12]	@ (8005a34 <vTaskSuspendAll+0x18>)
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	200011cc 	.word	0x200011cc

08005a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a46:	4b42      	ldr	r3, [pc, #264]	@ (8005b50 <xTaskResumeAll+0x118>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <xTaskResumeAll+0x2e>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	603b      	str	r3, [r7, #0]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a66:	f001 f90f 	bl	8006c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a6a:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <xTaskResumeAll+0x118>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <xTaskResumeAll+0x118>)
 8005a72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a74:	4b36      	ldr	r3, [pc, #216]	@ (8005b50 <xTaskResumeAll+0x118>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d162      	bne.n	8005b42 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a7c:	4b35      	ldr	r3, [pc, #212]	@ (8005b54 <xTaskResumeAll+0x11c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05e      	beq.n	8005b42 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a84:	e02f      	b.n	8005ae6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a86:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <xTaskResumeAll+0x120>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3318      	adds	r3, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe ffbe 	bl	8004a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe ffb9 	bl	8004a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <xTaskResumeAll+0x124>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d903      	bls.n	8005ab6 <xTaskResumeAll+0x7e>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b5c <xTaskResumeAll+0x124>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <xTaskResumeAll+0x128>)
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fe ff44 	bl	800495a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	4b23      	ldr	r3, [pc, #140]	@ (8005b64 <xTaskResumeAll+0x12c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ae0:	4b21      	ldr	r3, [pc, #132]	@ (8005b68 <xTaskResumeAll+0x130>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b58 <xTaskResumeAll+0x120>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1cb      	bne.n	8005a86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005af4:	f000 fb6c 	bl	80061d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005af8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b6c <xTaskResumeAll+0x134>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b04:	f000 f846 	bl	8005b94 <xTaskIncrementTick>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b0e:	4b16      	ldr	r3, [pc, #88]	@ (8005b68 <xTaskResumeAll+0x130>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f1      	bne.n	8005b04 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005b20:	4b12      	ldr	r3, [pc, #72]	@ (8005b6c <xTaskResumeAll+0x134>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b26:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <xTaskResumeAll+0x130>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b32:	4b0f      	ldr	r3, [pc, #60]	@ (8005b70 <xTaskResumeAll+0x138>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b42:	f001 f8d3 	bl	8006cec <vPortExitCritical>

	return xAlreadyYielded;
 8005b46:	68bb      	ldr	r3, [r7, #8]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	200011cc 	.word	0x200011cc
 8005b54:	200011a4 	.word	0x200011a4
 8005b58:	20001164 	.word	0x20001164
 8005b5c:	200011ac 	.word	0x200011ac
 8005b60:	20000cd4 	.word	0x20000cd4
 8005b64:	20000cd0 	.word	0x20000cd0
 8005b68:	200011b8 	.word	0x200011b8
 8005b6c:	200011b4 	.word	0x200011b4
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b7a:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <xTaskGetTickCount+0x1c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b80:	687b      	ldr	r3, [r7, #4]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200011a8 	.word	0x200011a8

08005b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9e:	4b52      	ldr	r3, [pc, #328]	@ (8005ce8 <xTaskIncrementTick+0x154>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 808f 	bne.w	8005cc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ba8:	4b50      	ldr	r3, [pc, #320]	@ (8005cec <xTaskIncrementTick+0x158>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8005cec <xTaskIncrementTick+0x158>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d121      	bne.n	8005c00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf0 <xTaskIncrementTick+0x15c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <xTaskIncrementTick+0x4a>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	603b      	str	r3, [r7, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <xTaskIncrementTick+0x46>
 8005bde:	4b44      	ldr	r3, [pc, #272]	@ (8005cf0 <xTaskIncrementTick+0x15c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	4b43      	ldr	r3, [pc, #268]	@ (8005cf4 <xTaskIncrementTick+0x160>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a41      	ldr	r2, [pc, #260]	@ (8005cf0 <xTaskIncrementTick+0x15c>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	4a41      	ldr	r2, [pc, #260]	@ (8005cf4 <xTaskIncrementTick+0x160>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4b41      	ldr	r3, [pc, #260]	@ (8005cf8 <xTaskIncrementTick+0x164>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf8 <xTaskIncrementTick+0x164>)
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	f000 fae8 	bl	80061d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c00:	4b3e      	ldr	r3, [pc, #248]	@ (8005cfc <xTaskIncrementTick+0x168>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d34e      	bcc.n	8005ca8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0a:	4b39      	ldr	r3, [pc, #228]	@ (8005cf0 <xTaskIncrementTick+0x15c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <xTaskIncrementTick+0x84>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <xTaskIncrementTick+0x86>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1e:	4b37      	ldr	r3, [pc, #220]	@ (8005cfc <xTaskIncrementTick+0x168>)
 8005c20:	f04f 32ff 	mov.w	r2, #4294967295
 8005c24:	601a      	str	r2, [r3, #0]
					break;
 8005c26:	e03f      	b.n	8005ca8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c28:	4b31      	ldr	r3, [pc, #196]	@ (8005cf0 <xTaskIncrementTick+0x15c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d203      	bcs.n	8005c48 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c40:	4a2e      	ldr	r2, [pc, #184]	@ (8005cfc <xTaskIncrementTick+0x168>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6013      	str	r3, [r2, #0]
						break;
 8005c46:	e02f      	b.n	8005ca8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fee1 	bl	8004a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3318      	adds	r3, #24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fed8 	bl	8004a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c68:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <xTaskIncrementTick+0x16c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d903      	bls.n	8005c78 <xTaskIncrementTick+0xe4>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <xTaskIncrementTick+0x16c>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4a1f      	ldr	r2, [pc, #124]	@ (8005d04 <xTaskIncrementTick+0x170>)
 8005c86:	441a      	add	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f7fe fe63 	bl	800495a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c98:	4b1b      	ldr	r3, [pc, #108]	@ (8005d08 <xTaskIncrementTick+0x174>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3b3      	bcc.n	8005c0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca6:	e7b0      	b.n	8005c0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ca8:	4b17      	ldr	r3, [pc, #92]	@ (8005d08 <xTaskIncrementTick+0x174>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cae:	4915      	ldr	r1, [pc, #84]	@ (8005d04 <xTaskIncrementTick+0x170>)
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d907      	bls.n	8005cd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e004      	b.n	8005cd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <xTaskIncrementTick+0x178>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8005d0c <xTaskIncrementTick+0x178>)
 8005cce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d10 <xTaskIncrementTick+0x17c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cdc:	697b      	ldr	r3, [r7, #20]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200011cc 	.word	0x200011cc
 8005cec:	200011a8 	.word	0x200011a8
 8005cf0:	2000115c 	.word	0x2000115c
 8005cf4:	20001160 	.word	0x20001160
 8005cf8:	200011bc 	.word	0x200011bc
 8005cfc:	200011c4 	.word	0x200011c4
 8005d00:	200011ac 	.word	0x200011ac
 8005d04:	20000cd4 	.word	0x20000cd4
 8005d08:	20000cd0 	.word	0x20000cd0
 8005d0c:	200011b4 	.word	0x200011b4
 8005d10:	200011b8 	.word	0x200011b8

08005d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005dc8 <vTaskSwitchContext+0xb4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d22:	4b2a      	ldr	r3, [pc, #168]	@ (8005dcc <vTaskSwitchContext+0xb8>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d28:	e047      	b.n	8005dba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005d2a:	4b28      	ldr	r3, [pc, #160]	@ (8005dcc <vTaskSwitchContext+0xb8>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d30:	4b27      	ldr	r3, [pc, #156]	@ (8005dd0 <vTaskSwitchContext+0xbc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e011      	b.n	8005d5c <vTaskSwitchContext+0x48>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <vTaskSwitchContext+0x42>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <vTaskSwitchContext+0x3e>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	491d      	ldr	r1, [pc, #116]	@ (8005dd4 <vTaskSwitchContext+0xc0>)
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0e3      	beq.n	8005d38 <vTaskSwitchContext+0x24>
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <vTaskSwitchContext+0xc0>)
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	3308      	adds	r3, #8
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d104      	bne.n	8005da0 <vTaskSwitchContext+0x8c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd8 <vTaskSwitchContext+0xc4>)
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <vTaskSwitchContext+0xbc>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db0:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <vTaskSwitchContext+0xc4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3354      	adds	r3, #84	@ 0x54
 8005db6:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <vTaskSwitchContext+0xc8>)
 8005db8:	6013      	str	r3, [r2, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	200011cc 	.word	0x200011cc
 8005dcc:	200011b8 	.word	0x200011b8
 8005dd0:	200011ac 	.word	0x200011ac
 8005dd4:	20000cd4 	.word	0x20000cd4
 8005dd8:	20000cd0 	.word	0x20000cd0
 8005ddc:	20000010 	.word	0x20000010

08005de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e08:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <vTaskPlaceOnEventList+0x48>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3318      	adds	r3, #24
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fe fdc6 	bl	80049a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e16:	2101      	movs	r1, #1
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f000 fa8d 	bl	8006338 <prvAddCurrentTaskToDelayedList>
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000cd0 	.word	0x20000cd0

08005e2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	617b      	str	r3, [r7, #20]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3318      	adds	r3, #24
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7fe fd7b 	bl	800495a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f000 fa60 	bl	8006338 <prvAddCurrentTaskToDelayedList>
	}
 8005e78:	bf00      	nop
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000cd0 	.word	0x20000cd0

08005e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fdac 	bl	8004a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <xTaskRemoveFromEventList+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11d      	bne.n	8005f00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fda3 	bl	8004a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed2:	4b19      	ldr	r3, [pc, #100]	@ (8005f38 <xTaskRemoveFromEventList+0xb4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d903      	bls.n	8005ee2 <xTaskRemoveFromEventList+0x5e>
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <xTaskRemoveFromEventList+0xb4>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <xTaskRemoveFromEventList+0xb8>)
 8005ef0:	441a      	add	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fe fd2e 	bl	800495a <vListInsertEnd>
 8005efe:	e005      	b.n	8005f0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	3318      	adds	r3, #24
 8005f04:	4619      	mov	r1, r3
 8005f06:	480e      	ldr	r0, [pc, #56]	@ (8005f40 <xTaskRemoveFromEventList+0xbc>)
 8005f08:	f7fe fd27 	bl	800495a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f10:	4b0c      	ldr	r3, [pc, #48]	@ (8005f44 <xTaskRemoveFromEventList+0xc0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d905      	bls.n	8005f26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <xTaskRemoveFromEventList+0xc4>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e001      	b.n	8005f2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	200011cc 	.word	0x200011cc
 8005f38:	200011ac 	.word	0x200011ac
 8005f3c:	20000cd4 	.word	0x20000cd4
 8005f40:	20001164 	.word	0x20001164
 8005f44:	20000cd0 	.word	0x20000cd0
 8005f48:	200011b8 	.word	0x200011b8

08005f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <vTaskInternalSetTimeOutState+0x24>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <vTaskInternalSetTimeOutState+0x28>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200011bc 	.word	0x200011bc
 8005f74:	200011a8 	.word	0x200011a8

08005f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	613b      	str	r3, [r7, #16]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60fb      	str	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005fbe:	f000 fe63 	bl	8006c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <xTaskCheckForTimeOut+0xc0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d102      	bne.n	8005fe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e023      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <xTaskCheckForTimeOut+0xc4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d007      	beq.n	8005ffe <xTaskCheckForTimeOut+0x86>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e015      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	d20b      	bcs.n	8006020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff99 	bl	8005f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e004      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f000 fe5f 	bl	8006cec <vPortExitCritical>

	return xReturn;
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	200011a8 	.word	0x200011a8
 800603c:	200011bc 	.word	0x200011bc

08006040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006044:	4b03      	ldr	r3, [pc, #12]	@ (8006054 <vTaskMissedYield+0x14>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	200011b8 	.word	0x200011b8

08006058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006060:	f000 f852 	bl	8006108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006064:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <prvIdleTask+0x28>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d9f9      	bls.n	8006060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800606c:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <prvIdleTask+0x2c>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800607c:	e7f0      	b.n	8006060 <prvIdleTask+0x8>
 800607e:	bf00      	nop
 8006080:	20000cd4 	.word	0x20000cd4
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e00c      	b.n	80060ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <prvInitialiseTaskLists+0x60>)
 80060a0:	4413      	add	r3, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fc2c 	bl	8004900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b37      	cmp	r3, #55	@ 0x37
 80060b2:	d9ef      	bls.n	8006094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b4:	480d      	ldr	r0, [pc, #52]	@ (80060ec <prvInitialiseTaskLists+0x64>)
 80060b6:	f7fe fc23 	bl	8004900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060ba:	480d      	ldr	r0, [pc, #52]	@ (80060f0 <prvInitialiseTaskLists+0x68>)
 80060bc:	f7fe fc20 	bl	8004900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c0:	480c      	ldr	r0, [pc, #48]	@ (80060f4 <prvInitialiseTaskLists+0x6c>)
 80060c2:	f7fe fc1d 	bl	8004900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060c6:	480c      	ldr	r0, [pc, #48]	@ (80060f8 <prvInitialiseTaskLists+0x70>)
 80060c8:	f7fe fc1a 	bl	8004900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060cc:	480b      	ldr	r0, [pc, #44]	@ (80060fc <prvInitialiseTaskLists+0x74>)
 80060ce:	f7fe fc17 	bl	8004900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <prvInitialiseTaskLists+0x78>)
 80060d4:	4a05      	ldr	r2, [pc, #20]	@ (80060ec <prvInitialiseTaskLists+0x64>)
 80060d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <prvInitialiseTaskLists+0x7c>)
 80060da:	4a05      	ldr	r2, [pc, #20]	@ (80060f0 <prvInitialiseTaskLists+0x68>)
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000cd4 	.word	0x20000cd4
 80060ec:	20001134 	.word	0x20001134
 80060f0:	20001148 	.word	0x20001148
 80060f4:	20001164 	.word	0x20001164
 80060f8:	20001178 	.word	0x20001178
 80060fc:	20001190 	.word	0x20001190
 8006100:	2000115c 	.word	0x2000115c
 8006104:	20001160 	.word	0x20001160

08006108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800610e:	e019      	b.n	8006144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006110:	f000 fdba 	bl	8006c88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006114:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <prvCheckTasksWaitingTermination+0x50>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fc77 	bl	8004a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <prvCheckTasksWaitingTermination+0x54>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a0b      	ldr	r2, [pc, #44]	@ (800615c <prvCheckTasksWaitingTermination+0x54>)
 800612e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006130:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3b01      	subs	r3, #1
 8006136:	4a0a      	ldr	r2, [pc, #40]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800613a:	f000 fdd7 	bl	8006cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f810 	bl	8006164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e1      	bne.n	8006110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20001178 	.word	0x20001178
 800615c:	200011a4 	.word	0x200011a4
 8006160:	2000118c 	.word	0x2000118c

08006164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3354      	adds	r3, #84	@ 0x54
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f893 	bl	800729c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	4618      	mov	r0, r3
 8006186:	f000 ff69 	bl	800705c <vPortFree>
				vPortFree( pxTCB );
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 ff66 	bl	800705c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006190:	e019      	b.n	80061c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006198:	2b01      	cmp	r3, #1
 800619a:	d103      	bne.n	80061a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 ff5d 	bl	800705c <vPortFree>
	}
 80061a2:	e010      	b.n	80061c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d00b      	beq.n	80061c6 <prvDeleteTCB+0x62>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <prvDeleteTCB+0x5e>
	}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <prvResetNextTaskUnblockTime+0x44>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <prvResetNextTaskUnblockTime+0x14>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <prvResetNextTaskUnblockTime+0x16>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006218 <prvResetNextTaskUnblockTime+0x48>)
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061f2:	e008      	b.n	8006206 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061f4:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <prvResetNextTaskUnblockTime+0x44>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4a05      	ldr	r2, [pc, #20]	@ (8006218 <prvResetNextTaskUnblockTime+0x48>)
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000115c 	.word	0x2000115c
 8006218:	200011c4 	.word	0x200011c4

0800621c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <xTaskGetSchedulerState+0x34>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800622a:	2301      	movs	r3, #1
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	e008      	b.n	8006242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <xTaskGetSchedulerState+0x38>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006238:	2302      	movs	r3, #2
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	e001      	b.n	8006242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800623e:	2300      	movs	r3, #0
 8006240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006242:	687b      	ldr	r3, [r7, #4]
	}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	200011b0 	.word	0x200011b0
 8006254:	200011cc 	.word	0x200011cc

08006258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d058      	beq.n	8006320 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800626e:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <xTaskPriorityDisinherit+0xd4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	429a      	cmp	r2, r3
 8006276:	d00b      	beq.n	8006290 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10b      	bne.n	80062b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60bb      	str	r3, [r7, #8]
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d02c      	beq.n	8006320 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d128      	bne.n	8006320 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fb9e 	bl	8004a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <xTaskPriorityDisinherit+0xd8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d903      	bls.n	8006300 <xTaskPriorityDisinherit+0xa8>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006330 <xTaskPriorityDisinherit+0xd8>)
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4a09      	ldr	r2, [pc, #36]	@ (8006334 <xTaskPriorityDisinherit+0xdc>)
 800630e:	441a      	add	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fe fb1f 	bl	800495a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006320:	697b      	ldr	r3, [r7, #20]
	}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000cd0 	.word	0x20000cd0
 8006330:	200011ac 	.word	0x200011ac
 8006334:	20000cd4 	.word	0x20000cd4

08006338 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006342:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006348:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x94>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3304      	adds	r3, #4
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fb60 	bl	8004a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d10a      	bne.n	8006372 <prvAddCurrentTaskToDelayedList+0x3a>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3304      	adds	r3, #4
 8006368:	4619      	mov	r1, r3
 800636a:	4819      	ldr	r0, [pc, #100]	@ (80063d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800636c:	f7fe faf5 	bl	800495a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006370:	e026      	b.n	80063c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800637a:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x94>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d209      	bcs.n	800639e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638a:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b0f      	ldr	r3, [pc, #60]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fe fb03 	bl	80049a2 <vListInsert>
}
 800639c:	e010      	b.n	80063c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800639e:	4b0e      	ldr	r3, [pc, #56]	@ (80063d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x94>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe faf9 	bl	80049a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063b0:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d202      	bcs.n	80063c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063ba:	4a08      	ldr	r2, [pc, #32]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6013      	str	r3, [r2, #0]
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200011a8 	.word	0x200011a8
 80063cc:	20000cd0 	.word	0x20000cd0
 80063d0:	20001190 	.word	0x20001190
 80063d4:	20001160 	.word	0x20001160
 80063d8:	2000115c 	.word	0x2000115c
 80063dc:	200011c4 	.word	0x200011c4

080063e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	@ 0x28
 80063e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063ea:	f000 fad9 	bl	80069a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <xTimerCreateTimerTask+0x84>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d021      	beq.n	800643a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063fe:	1d3a      	adds	r2, r7, #4
 8006400:	f107 0108 	add.w	r1, r7, #8
 8006404:	f107 030c 	add.w	r3, r7, #12
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fa5f 	bl	80048cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	9202      	str	r2, [sp, #8]
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	2302      	movs	r3, #2
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2300      	movs	r3, #0
 800641e:	460a      	mov	r2, r1
 8006420:	4911      	ldr	r1, [pc, #68]	@ (8006468 <xTimerCreateTimerTask+0x88>)
 8006422:	4812      	ldr	r0, [pc, #72]	@ (800646c <xTimerCreateTimerTask+0x8c>)
 8006424:	f7ff f818 	bl	8005458 <xTaskCreateStatic>
 8006428:	4603      	mov	r3, r0
 800642a:	4a11      	ldr	r2, [pc, #68]	@ (8006470 <xTimerCreateTimerTask+0x90>)
 800642c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <xTimerCreateTimerTask+0x90>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006458:	697b      	ldr	r3, [r7, #20]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20001200 	.word	0x20001200
 8006468:	0800749c 	.word	0x0800749c
 800646c:	08006595 	.word	0x08006595
 8006470:	20001204 	.word	0x20001204

08006474 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	@ 0x28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006482:	2300      	movs	r3, #0
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064a4:	4b19      	ldr	r3, [pc, #100]	@ (800650c <xTimerGenericCommand+0x98>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d02a      	beq.n	8006502 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	dc18      	bgt.n	80064f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064be:	f7ff fead 	bl	800621c <xTaskGetSchedulerState>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d109      	bne.n	80064dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064c8:	4b10      	ldr	r3, [pc, #64]	@ (800650c <xTimerGenericCommand+0x98>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f107 0110 	add.w	r1, r7, #16
 80064d0:	2300      	movs	r3, #0
 80064d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d4:	f7fe fbd2 	bl	8004c7c <xQueueGenericSend>
 80064d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80064da:	e012      	b.n	8006502 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064dc:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <xTimerGenericCommand+0x98>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	f107 0110 	add.w	r1, r7, #16
 80064e4:	2300      	movs	r3, #0
 80064e6:	2200      	movs	r2, #0
 80064e8:	f7fe fbc8 	bl	8004c7c <xQueueGenericSend>
 80064ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80064ee:	e008      	b.n	8006502 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064f0:	4b06      	ldr	r3, [pc, #24]	@ (800650c <xTimerGenericCommand+0x98>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	f107 0110 	add.w	r1, r7, #16
 80064f8:	2300      	movs	r3, #0
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	f7fe fcc0 	bl	8004e80 <xQueueGenericSendFromISR>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006504:	4618      	mov	r0, r3
 8006506:	3728      	adds	r7, #40	@ 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20001200 	.word	0x20001200

08006510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800651a:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <prvProcessExpiredTimer+0x80>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fa73 	bl	8004a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d123      	bne.n	800657e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	18d1      	adds	r1, r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	6978      	ldr	r0, [r7, #20]
 8006544:	f000 f8cc 	bl	80066e0 <prvInsertTimerInActiveList>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d017      	beq.n	800657e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	2100      	movs	r1, #0
 8006558:	6978      	ldr	r0, [r7, #20]
 800655a:	f7ff ff8b 	bl	8006474 <xTimerGenericCommand>
 800655e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60fb      	str	r3, [r7, #12]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006582:	6978      	ldr	r0, [r7, #20]
 8006584:	4798      	blx	r3
}
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200011f8 	.word	0x200011f8

08006594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 f859 	bl	8006658 <prvGetNextExpireTime>
 80065a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4619      	mov	r1, r3
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f805 	bl	80065bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065b2:	f000 f8d7 	bl	8006764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065b6:	bf00      	nop
 80065b8:	e7f0      	b.n	800659c <prvTimerTask+0x8>
	...

080065bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065c6:	f7ff fa29 	bl	8005a1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ca:	f107 0308 	add.w	r3, r7, #8
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f866 	bl	80066a0 <prvSampleTimeNow>
 80065d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d130      	bne.n	800663e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <prvProcessTimerOrBlockTask+0x3c>
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d806      	bhi.n	80065f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065ea:	f7ff fa25 	bl	8005a38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ff8d 	bl	8006510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065f6:	e024      	b.n	8006642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065fe:	4b13      	ldr	r3, [pc, #76]	@ (800664c <prvProcessTimerOrBlockTask+0x90>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006610:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <prvProcessTimerOrBlockTask+0x94>)
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	4619      	mov	r1, r3
 800661e:	f7fe fee7 	bl	80053f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006622:	f7ff fa09 	bl	8005a38 <xTaskResumeAll>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800662c:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <prvProcessTimerOrBlockTask+0x98>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
}
 800663c:	e001      	b.n	8006642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800663e:	f7ff f9fb 	bl	8005a38 <xTaskResumeAll>
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200011fc 	.word	0x200011fc
 8006650:	20001200 	.word	0x20001200
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006660:	4b0e      	ldr	r3, [pc, #56]	@ (800669c <prvGetNextExpireTime+0x44>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d105      	bne.n	800668a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800667e:	4b07      	ldr	r3, [pc, #28]	@ (800669c <prvGetNextExpireTime+0x44>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e001      	b.n	800668e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	200011f8 	.word	0x200011f8

080066a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066a8:	f7ff fa64 	bl	8005b74 <xTaskGetTickCount>
 80066ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <prvSampleTimeNow+0x3c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d205      	bcs.n	80066c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066b8:	f000 f910 	bl	80068dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e002      	b.n	80066ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066ca:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <prvSampleTimeNow+0x3c>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20001208 	.word	0x20001208

080066e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d812      	bhi.n	800672c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	429a      	cmp	r2, r3
 8006712:	d302      	bcc.n	800671a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006714:	2301      	movs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e01b      	b.n	8006752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800671a:	4b10      	ldr	r3, [pc, #64]	@ (800675c <prvInsertTimerInActiveList+0x7c>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe f93c 	bl	80049a2 <vListInsert>
 800672a:	e012      	b.n	8006752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d206      	bcs.n	8006742 <prvInsertTimerInActiveList+0x62>
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d302      	bcc.n	8006742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e007      	b.n	8006752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <prvInsertTimerInActiveList+0x80>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe f928 	bl	80049a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200011fc 	.word	0x200011fc
 8006760:	200011f8 	.word	0x200011f8

08006764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	@ 0x38
 8006768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800676a:	e0a5      	b.n	80068b8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	da19      	bge.n	80067a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	3304      	adds	r3, #4
 8006776:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61fb      	str	r3, [r7, #28]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800679c:	6850      	ldr	r0, [r2, #4]
 800679e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f2c0 8085 	blt.w	80068b8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f928 	bl	8004a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067c4:	463b      	mov	r3, r7
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff ff6a 	bl	80066a0 <prvSampleTimeNow>
 80067cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b09      	cmp	r3, #9
 80067d2:	d86c      	bhi.n	80068ae <prvProcessReceivedCommands+0x14a>
 80067d4:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <prvProcessReceivedCommands+0x78>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	08006805 	.word	0x08006805
 80067e0:	08006805 	.word	0x08006805
 80067e4:	08006805 	.word	0x08006805
 80067e8:	080068af 	.word	0x080068af
 80067ec:	08006863 	.word	0x08006863
 80067f0:	0800689d 	.word	0x0800689d
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006805 	.word	0x08006805
 80067fc:	080068af 	.word	0x080068af
 8006800:	08006863 	.word	0x08006863
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	18d1      	adds	r1, r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006812:	f7ff ff65 	bl	80066e0 <prvInsertTimerInActiveList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d04a      	beq.n	80068b2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006822:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d142      	bne.n	80068b2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	441a      	add	r2, r3
 8006834:	2300      	movs	r3, #0
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	2100      	movs	r1, #0
 800683c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800683e:	f7ff fe19 	bl	8006474 <xTimerGenericCommand>
 8006842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d133      	bne.n	80068b2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	61bb      	str	r3, [r7, #24]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	617b      	str	r3, [r7, #20]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	18d1      	adds	r1, r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006896:	f7ff ff23 	bl	80066e0 <prvInsertTimerInActiveList>
					break;
 800689a:	e00d      	b.n	80068b8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80068a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068a8:	f000 fbd8 	bl	800705c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ac:	e003      	b.n	80068b6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <prvProcessReceivedCommands+0x154>
					break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <prvProcessReceivedCommands+0x154>
					break;
 80068b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068b8:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <prvProcessReceivedCommands+0x174>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	1d39      	adds	r1, r7, #4
 80068be:	2200      	movs	r2, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe fb79 	bl	8004fb8 <xQueueReceive>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f47f af4f 	bne.w	800676c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	3730      	adds	r7, #48	@ 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20001200 	.word	0x20001200

080068dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068e2:	e046      	b.n	8006972 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe f889 	bl	8004a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d12f      	bne.n	8006972 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d90e      	bls.n	8006942 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006930:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7fe f831 	bl	80049a2 <vListInsert>
 8006940:	e017      	b.n	8006972 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006942:	2300      	movs	r3, #0
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	2100      	movs	r1, #0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fd91 	bl	8006474 <xTimerGenericCommand>
 8006952:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <prvSwitchTimerLists+0x96>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006972:	4b09      	ldr	r3, [pc, #36]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1b3      	bne.n	80068e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <prvSwitchTimerLists+0xc0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a04      	ldr	r2, [pc, #16]	@ (8006998 <prvSwitchTimerLists+0xbc>)
 8006988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800698a:	4a04      	ldr	r2, [pc, #16]	@ (800699c <prvSwitchTimerLists+0xc0>)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6013      	str	r3, [r2, #0]
}
 8006990:	bf00      	nop
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200011f8 	.word	0x200011f8
 800699c:	200011fc 	.word	0x200011fc

080069a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069a6:	f000 f96f 	bl	8006c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069aa:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d120      	bne.n	80069f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069b2:	4814      	ldr	r0, [pc, #80]	@ (8006a04 <prvCheckForValidListAndQueue+0x64>)
 80069b4:	f7fd ffa4 	bl	8004900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069b8:	4813      	ldr	r0, [pc, #76]	@ (8006a08 <prvCheckForValidListAndQueue+0x68>)
 80069ba:	f7fd ffa1 	bl	8004900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069be:	4b13      	ldr	r3, [pc, #76]	@ (8006a0c <prvCheckForValidListAndQueue+0x6c>)
 80069c0:	4a10      	ldr	r2, [pc, #64]	@ (8006a04 <prvCheckForValidListAndQueue+0x64>)
 80069c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069c4:	4b12      	ldr	r3, [pc, #72]	@ (8006a10 <prvCheckForValidListAndQueue+0x70>)
 80069c6:	4a10      	ldr	r2, [pc, #64]	@ (8006a08 <prvCheckForValidListAndQueue+0x68>)
 80069c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <prvCheckForValidListAndQueue+0x74>)
 80069d0:	4a11      	ldr	r2, [pc, #68]	@ (8006a18 <prvCheckForValidListAndQueue+0x78>)
 80069d2:	2110      	movs	r1, #16
 80069d4:	200a      	movs	r0, #10
 80069d6:	f7fe f8b1 	bl	8004b3c <xQueueGenericCreateStatic>
 80069da:	4603      	mov	r3, r0
 80069dc:	4a08      	ldr	r2, [pc, #32]	@ (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069e0:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069e8:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	490b      	ldr	r1, [pc, #44]	@ (8006a1c <prvCheckForValidListAndQueue+0x7c>)
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fcd4 	bl	800539c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f4:	f000 f97a 	bl	8006cec <vPortExitCritical>
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20001200 	.word	0x20001200
 8006a04:	200011d0 	.word	0x200011d0
 8006a08:	200011e4 	.word	0x200011e4
 8006a0c:	200011f8 	.word	0x200011f8
 8006a10:	200011fc 	.word	0x200011fc
 8006a14:	200012ac 	.word	0x200012ac
 8006a18:	2000120c 	.word	0x2000120c
 8006a1c:	080074a4 	.word	0x080074a4

08006a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a50:	4a0c      	ldr	r2, [pc, #48]	@ (8006a84 <pxPortInitialiseStack+0x64>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3b14      	subs	r3, #20
 8006a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3b04      	subs	r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f06f 0202 	mvn.w	r2, #2
 8006a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3b20      	subs	r3, #32
 8006a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	08006a89 	.word	0x08006a89

08006a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a92:	4b13      	ldr	r3, [pc, #76]	@ (8006ae0 <prvTaskExitError+0x58>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d00b      	beq.n	8006ab4 <prvTaskExitError+0x2c>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <prvTaskExitError+0x28>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60bb      	str	r3, [r7, #8]
}
 8006ac6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ac8:	bf00      	nop
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0fc      	beq.n	8006aca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	2000000c 	.word	0x2000000c
	...

08006af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006af0:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <pxCurrentTCBConst2>)
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	f380 8809 	msr	PSP, r0
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	4770      	bx	lr
 8006b0c:	f3af 8000 	nop.w

08006b10 <pxCurrentTCBConst2>:
 8006b10:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b18:	4808      	ldr	r0, [pc, #32]	@ (8006b3c <prvPortStartFirstTask+0x24>)
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f380 8808 	msr	MSP, r0
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8814 	msr	CONTROL, r0
 8006b2a:	b662      	cpsie	i
 8006b2c:	b661      	cpsie	f
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	df00      	svc	0
 8006b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b3a:	bf00      	nop
 8006b3c:	e000ed08 	.word	0xe000ed08

08006b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b46:	4b47      	ldr	r3, [pc, #284]	@ (8006c64 <xPortStartScheduler+0x124>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a47      	ldr	r2, [pc, #284]	@ (8006c68 <xPortStartScheduler+0x128>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10b      	bne.n	8006b68 <xPortStartScheduler+0x28>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60fb      	str	r3, [r7, #12]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b68:	4b3e      	ldr	r3, [pc, #248]	@ (8006c64 <xPortStartScheduler+0x124>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c6c <xPortStartScheduler+0x12c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10b      	bne.n	8006b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	613b      	str	r3, [r7, #16]
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	e7fd      	b.n	8006b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b8a:	4b39      	ldr	r3, [pc, #228]	@ (8006c70 <xPortStartScheduler+0x130>)
 8006b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	22ff      	movs	r2, #255	@ 0xff
 8006b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <xPortStartScheduler+0x134>)
 8006bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bb2:	4b31      	ldr	r3, [pc, #196]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bb8:	e009      	b.n	8006bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006bba:	4b2f      	ldr	r3, [pc, #188]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd6:	2b80      	cmp	r3, #128	@ 0x80
 8006bd8:	d0ef      	beq.n	8006bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bda:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1c3 0307 	rsb	r3, r3, #7
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d00b      	beq.n	8006bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	4a1c      	ldr	r2, [pc, #112]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c08:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c10:	4a19      	ldr	r2, [pc, #100]	@ (8006c78 <xPortStartScheduler+0x138>)
 8006c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c1c:	4b17      	ldr	r3, [pc, #92]	@ (8006c7c <xPortStartScheduler+0x13c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a16      	ldr	r2, [pc, #88]	@ (8006c7c <xPortStartScheduler+0x13c>)
 8006c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c28:	4b14      	ldr	r3, [pc, #80]	@ (8006c7c <xPortStartScheduler+0x13c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <xPortStartScheduler+0x13c>)
 8006c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c34:	f000 f8da 	bl	8006dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c38:	4b11      	ldr	r3, [pc, #68]	@ (8006c80 <xPortStartScheduler+0x140>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c3e:	f000 f8f9 	bl	8006e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <xPortStartScheduler+0x144>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a0f      	ldr	r2, [pc, #60]	@ (8006c84 <xPortStartScheduler+0x144>)
 8006c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c4e:	f7ff ff63 	bl	8006b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c52:	f7ff f85f 	bl	8005d14 <vTaskSwitchContext>
	prvTaskExitError();
 8006c56:	f7ff ff17 	bl	8006a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	e000ed00 	.word	0xe000ed00
 8006c68:	410fc271 	.word	0x410fc271
 8006c6c:	410fc270 	.word	0x410fc270
 8006c70:	e000e400 	.word	0xe000e400
 8006c74:	200012fc 	.word	0x200012fc
 8006c78:	20001300 	.word	0x20001300
 8006c7c:	e000ed20 	.word	0xe000ed20
 8006c80:	2000000c 	.word	0x2000000c
 8006c84:	e000ef34 	.word	0xe000ef34

08006c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ca2:	4b10      	ldr	r3, [pc, #64]	@ (8006ce4 <vPortEnterCritical+0x5c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ce4 <vPortEnterCritical+0x5c>)
 8006caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <vPortEnterCritical+0x5c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d110      	bne.n	8006cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <vPortEnterCritical+0x60>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	603b      	str	r3, [r7, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <vPortEnterCritical+0x4a>
	}
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000000c 	.word	0x2000000c
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cf2:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <vPortExitCritical+0x50>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <vPortExitCritical+0x26>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	607b      	str	r3, [r7, #4]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d12:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <vPortExitCritical+0x44>
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d40:	f3ef 8009 	mrs	r0, PSP
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <pxCurrentTCBConst>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	f01e 0f10 	tst.w	lr, #16
 8006d50:	bf08      	it	eq
 8006d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	6010      	str	r0, [r2, #0]
 8006d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d64:	f380 8811 	msr	BASEPRI, r0
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f7fe ffd0 	bl	8005d14 <vTaskSwitchContext>
 8006d74:	f04f 0000 	mov.w	r0, #0
 8006d78:	f380 8811 	msr	BASEPRI, r0
 8006d7c:	bc09      	pop	{r0, r3}
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	6808      	ldr	r0, [r1, #0]
 8006d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d86:	f01e 0f10 	tst.w	lr, #16
 8006d8a:	bf08      	it	eq
 8006d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d90:	f380 8809 	msr	PSP, r0
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w

08006da0 <pxCurrentTCBConst>:
 8006da0:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dc2:	f7fe fee7 	bl	8005b94 <xTaskIncrementTick>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <SysTick_Handler+0x40>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006df0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <vPortSetupTimerInterrupt+0x38>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <vPortSetupTimerInterrupt+0x3c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	@ (8006e2c <vPortSetupTimerInterrupt+0x40>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	4a09      	ldr	r2, [pc, #36]	@ (8006e30 <vPortSetupTimerInterrupt+0x44>)
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e0e:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	e000e010 	.word	0xe000e010
 8006e24:	e000e018 	.word	0xe000e018
 8006e28:	20000000 	.word	0x20000000
 8006e2c:	10624dd3 	.word	0x10624dd3
 8006e30:	e000e014 	.word	0xe000e014

08006e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e44 <vPortEnableVFP+0x10>
 8006e38:	6801      	ldr	r1, [r0, #0]
 8006e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e3e:	6001      	str	r1, [r0, #0]
 8006e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e42:	bf00      	nop
 8006e44:	e000ed88 	.word	0xe000ed88

08006e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e4e:	f3ef 8305 	mrs	r3, IPSR
 8006e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d915      	bls.n	8006e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e5a:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <vPortValidateInterruptPriority+0x74>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e64:	4b16      	ldr	r3, [pc, #88]	@ (8006ec0 <vPortValidateInterruptPriority+0x78>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	7afa      	ldrb	r2, [r7, #11]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d20b      	bcs.n	8006e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec4 <vPortValidateInterruptPriority+0x7c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec8 <vPortValidateInterruptPriority+0x80>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90b      	bls.n	8006eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	603b      	str	r3, [r7, #0]
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	e7fd      	b.n	8006eaa <vPortValidateInterruptPriority+0x62>
	}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	e000e3f0 	.word	0xe000e3f0
 8006ec0:	200012fc 	.word	0x200012fc
 8006ec4:	e000ed0c 	.word	0xe000ed0c
 8006ec8:	20001300 	.word	0x20001300

08006ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	@ 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ed8:	f7fe fda0 	bl	8005a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006edc:	4b5a      	ldr	r3, [pc, #360]	@ (8007048 <pvPortMalloc+0x17c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ee4:	f000 f916 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ee8:	4b58      	ldr	r3, [pc, #352]	@ (800704c <pvPortMalloc+0x180>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 8090 	bne.w	8007016 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01e      	beq.n	8006f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006efc:	2208      	movs	r2, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4413      	add	r3, r2
 8006f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d015      	beq.n	8006f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	3308      	adds	r3, #8
 8006f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <pvPortMalloc+0x6e>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	617b      	str	r3, [r7, #20]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d06a      	beq.n	8007016 <pvPortMalloc+0x14a>
 8006f40:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <pvPortMalloc+0x184>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d865      	bhi.n	8007016 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f4a:	4b42      	ldr	r3, [pc, #264]	@ (8007054 <pvPortMalloc+0x188>)
 8006f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f4e:	4b41      	ldr	r3, [pc, #260]	@ (8007054 <pvPortMalloc+0x188>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f54:	e004      	b.n	8006f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d903      	bls.n	8006f72 <pvPortMalloc+0xa6>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f1      	bne.n	8006f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f72:	4b35      	ldr	r3, [pc, #212]	@ (8007048 <pvPortMalloc+0x17c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d04c      	beq.n	8007016 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2208      	movs	r2, #8
 8006f82:	4413      	add	r3, r2
 8006f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	2308      	movs	r3, #8
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d920      	bls.n	8006fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fda:	69b8      	ldr	r0, [r7, #24]
 8006fdc:	f000 f8fc 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <pvPortMalloc+0x184>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	4a19      	ldr	r2, [pc, #100]	@ (8007050 <pvPortMalloc+0x184>)
 8006fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fee:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <pvPortMalloc+0x184>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b19      	ldr	r3, [pc, #100]	@ (8007058 <pvPortMalloc+0x18c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d203      	bcs.n	8007002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ffa:	4b15      	ldr	r3, [pc, #84]	@ (8007050 <pvPortMalloc+0x184>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a16      	ldr	r2, [pc, #88]	@ (8007058 <pvPortMalloc+0x18c>)
 8007000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b11      	ldr	r3, [pc, #68]	@ (800704c <pvPortMalloc+0x180>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	431a      	orrs	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007016:	f7fe fd0f 	bl	8005a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <pvPortMalloc+0x170>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <pvPortMalloc+0x16c>
	return pvReturn;
 800703c:	69fb      	ldr	r3, [r7, #28]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	@ 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20001f0c 	.word	0x20001f0c
 800704c:	20001f18 	.word	0x20001f18
 8007050:	20001f10 	.word	0x20001f10
 8007054:	20001f04 	.word	0x20001f04
 8007058:	20001f14 	.word	0x20001f14

0800705c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d04a      	beq.n	8007104 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706e:	2308      	movs	r3, #8
 8007070:	425b      	negs	r3, r3
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4b22      	ldr	r3, [pc, #136]	@ (800710c <vPortFree+0xb0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <vPortFree+0x46>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60fb      	str	r3, [r7, #12]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <vPortFree+0x66>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b11      	ldr	r3, [pc, #68]	@ (800710c <vPortFree+0xb0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d019      	beq.n	8007104 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d115      	bne.n	8007104 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <vPortFree+0xb0>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e8:	f7fe fc98 	bl	8005a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b07      	ldr	r3, [pc, #28]	@ (8007110 <vPortFree+0xb4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a06      	ldr	r2, [pc, #24]	@ (8007110 <vPortFree+0xb4>)
 80070f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f000 f86c 	bl	80071d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007100:	f7fe fc9a 	bl	8005a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20001f18 	.word	0x20001f18
 8007110:	20001f10 	.word	0x20001f10

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	@ (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	@ (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	@ (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	@ (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	@ (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	@ (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20001304 	.word	0x20001304
 80071c4:	20001f04 	.word	0x20001f04
 80071c8:	20001f0c 	.word	0x20001f0c
 80071cc:	20001f14 	.word	0x20001f14
 80071d0:	20001f10 	.word	0x20001f10
 80071d4:	20001f18 	.word	0x20001f18

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20001f04 	.word	0x20001f04
 8007288:	20001f0c 	.word	0x20001f0c

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <_reclaim_reent>:
 800729c:	4b2d      	ldr	r3, [pc, #180]	@ (8007354 <_reclaim_reent+0xb8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4283      	cmp	r3, r0
 80072a2:	b570      	push	{r4, r5, r6, lr}
 80072a4:	4604      	mov	r4, r0
 80072a6:	d053      	beq.n	8007350 <_reclaim_reent+0xb4>
 80072a8:	69c3      	ldr	r3, [r0, #28]
 80072aa:	b31b      	cbz	r3, 80072f4 <_reclaim_reent+0x58>
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	b163      	cbz	r3, 80072ca <_reclaim_reent+0x2e>
 80072b0:	2500      	movs	r5, #0
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	5959      	ldr	r1, [r3, r5]
 80072b8:	b9b1      	cbnz	r1, 80072e8 <_reclaim_reent+0x4c>
 80072ba:	3504      	adds	r5, #4
 80072bc:	2d80      	cmp	r5, #128	@ 0x80
 80072be:	d1f8      	bne.n	80072b2 <_reclaim_reent+0x16>
 80072c0:	69e3      	ldr	r3, [r4, #28]
 80072c2:	4620      	mov	r0, r4
 80072c4:	68d9      	ldr	r1, [r3, #12]
 80072c6:	f000 f87b 	bl	80073c0 <_free_r>
 80072ca:	69e3      	ldr	r3, [r4, #28]
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	b111      	cbz	r1, 80072d6 <_reclaim_reent+0x3a>
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 f875 	bl	80073c0 <_free_r>
 80072d6:	69e3      	ldr	r3, [r4, #28]
 80072d8:	689d      	ldr	r5, [r3, #8]
 80072da:	b15d      	cbz	r5, 80072f4 <_reclaim_reent+0x58>
 80072dc:	4629      	mov	r1, r5
 80072de:	4620      	mov	r0, r4
 80072e0:	682d      	ldr	r5, [r5, #0]
 80072e2:	f000 f86d 	bl	80073c0 <_free_r>
 80072e6:	e7f8      	b.n	80072da <_reclaim_reent+0x3e>
 80072e8:	680e      	ldr	r6, [r1, #0]
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f868 	bl	80073c0 <_free_r>
 80072f0:	4631      	mov	r1, r6
 80072f2:	e7e1      	b.n	80072b8 <_reclaim_reent+0x1c>
 80072f4:	6961      	ldr	r1, [r4, #20]
 80072f6:	b111      	cbz	r1, 80072fe <_reclaim_reent+0x62>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 f861 	bl	80073c0 <_free_r>
 80072fe:	69e1      	ldr	r1, [r4, #28]
 8007300:	b111      	cbz	r1, 8007308 <_reclaim_reent+0x6c>
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f85c 	bl	80073c0 <_free_r>
 8007308:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800730a:	b111      	cbz	r1, 8007312 <_reclaim_reent+0x76>
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f857 	bl	80073c0 <_free_r>
 8007312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007314:	b111      	cbz	r1, 800731c <_reclaim_reent+0x80>
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f852 	bl	80073c0 <_free_r>
 800731c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800731e:	b111      	cbz	r1, 8007326 <_reclaim_reent+0x8a>
 8007320:	4620      	mov	r0, r4
 8007322:	f000 f84d 	bl	80073c0 <_free_r>
 8007326:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007328:	b111      	cbz	r1, 8007330 <_reclaim_reent+0x94>
 800732a:	4620      	mov	r0, r4
 800732c:	f000 f848 	bl	80073c0 <_free_r>
 8007330:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007332:	b111      	cbz	r1, 800733a <_reclaim_reent+0x9e>
 8007334:	4620      	mov	r0, r4
 8007336:	f000 f843 	bl	80073c0 <_free_r>
 800733a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800733c:	b111      	cbz	r1, 8007344 <_reclaim_reent+0xa8>
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f83e 	bl	80073c0 <_free_r>
 8007344:	6a23      	ldr	r3, [r4, #32]
 8007346:	b11b      	cbz	r3, 8007350 <_reclaim_reent+0xb4>
 8007348:	4620      	mov	r0, r4
 800734a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800734e:	4718      	bx	r3
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	bf00      	nop
 8007354:	20000010 	.word	0x20000010

08007358 <__libc_init_array>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4d0d      	ldr	r5, [pc, #52]	@ (8007390 <__libc_init_array+0x38>)
 800735c:	4c0d      	ldr	r4, [pc, #52]	@ (8007394 <__libc_init_array+0x3c>)
 800735e:	1b64      	subs	r4, r4, r5
 8007360:	10a4      	asrs	r4, r4, #2
 8007362:	2600      	movs	r6, #0
 8007364:	42a6      	cmp	r6, r4
 8007366:	d109      	bne.n	800737c <__libc_init_array+0x24>
 8007368:	4d0b      	ldr	r5, [pc, #44]	@ (8007398 <__libc_init_array+0x40>)
 800736a:	4c0c      	ldr	r4, [pc, #48]	@ (800739c <__libc_init_array+0x44>)
 800736c:	f000 f87e 	bl	800746c <_init>
 8007370:	1b64      	subs	r4, r4, r5
 8007372:	10a4      	asrs	r4, r4, #2
 8007374:	2600      	movs	r6, #0
 8007376:	42a6      	cmp	r6, r4
 8007378:	d105      	bne.n	8007386 <__libc_init_array+0x2e>
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007380:	4798      	blx	r3
 8007382:	3601      	adds	r6, #1
 8007384:	e7ee      	b.n	8007364 <__libc_init_array+0xc>
 8007386:	f855 3b04 	ldr.w	r3, [r5], #4
 800738a:	4798      	blx	r3
 800738c:	3601      	adds	r6, #1
 800738e:	e7f2      	b.n	8007376 <__libc_init_array+0x1e>
 8007390:	0800752c 	.word	0x0800752c
 8007394:	0800752c 	.word	0x0800752c
 8007398:	0800752c 	.word	0x0800752c
 800739c:	08007530 	.word	0x08007530

080073a0 <__retarget_lock_acquire_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <__retarget_lock_release_recursive>:
 80073a2:	4770      	bx	lr

080073a4 <memcpy>:
 80073a4:	440a      	add	r2, r1
 80073a6:	4291      	cmp	r1, r2
 80073a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ac:	d100      	bne.n	80073b0 <memcpy+0xc>
 80073ae:	4770      	bx	lr
 80073b0:	b510      	push	{r4, lr}
 80073b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d1f9      	bne.n	80073b2 <memcpy+0xe>
 80073be:	bd10      	pop	{r4, pc}

080073c0 <_free_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4605      	mov	r5, r0
 80073c4:	2900      	cmp	r1, #0
 80073c6:	d041      	beq.n	800744c <_free_r+0x8c>
 80073c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073cc:	1f0c      	subs	r4, r1, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bfb8      	it	lt
 80073d2:	18e4      	addlt	r4, r4, r3
 80073d4:	f000 f83e 	bl	8007454 <__malloc_lock>
 80073d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007450 <_free_r+0x90>)
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	b933      	cbnz	r3, 80073ec <_free_r+0x2c>
 80073de:	6063      	str	r3, [r4, #4]
 80073e0:	6014      	str	r4, [r2, #0]
 80073e2:	4628      	mov	r0, r5
 80073e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e8:	f000 b83a 	b.w	8007460 <__malloc_unlock>
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d908      	bls.n	8007402 <_free_r+0x42>
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	1821      	adds	r1, r4, r0
 80073f4:	428b      	cmp	r3, r1
 80073f6:	bf01      	itttt	eq
 80073f8:	6819      	ldreq	r1, [r3, #0]
 80073fa:	685b      	ldreq	r3, [r3, #4]
 80073fc:	1809      	addeq	r1, r1, r0
 80073fe:	6021      	streq	r1, [r4, #0]
 8007400:	e7ed      	b.n	80073de <_free_r+0x1e>
 8007402:	461a      	mov	r2, r3
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b10b      	cbz	r3, 800740c <_free_r+0x4c>
 8007408:	42a3      	cmp	r3, r4
 800740a:	d9fa      	bls.n	8007402 <_free_r+0x42>
 800740c:	6811      	ldr	r1, [r2, #0]
 800740e:	1850      	adds	r0, r2, r1
 8007410:	42a0      	cmp	r0, r4
 8007412:	d10b      	bne.n	800742c <_free_r+0x6c>
 8007414:	6820      	ldr	r0, [r4, #0]
 8007416:	4401      	add	r1, r0
 8007418:	1850      	adds	r0, r2, r1
 800741a:	4283      	cmp	r3, r0
 800741c:	6011      	str	r1, [r2, #0]
 800741e:	d1e0      	bne.n	80073e2 <_free_r+0x22>
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	6053      	str	r3, [r2, #4]
 8007426:	4408      	add	r0, r1
 8007428:	6010      	str	r0, [r2, #0]
 800742a:	e7da      	b.n	80073e2 <_free_r+0x22>
 800742c:	d902      	bls.n	8007434 <_free_r+0x74>
 800742e:	230c      	movs	r3, #12
 8007430:	602b      	str	r3, [r5, #0]
 8007432:	e7d6      	b.n	80073e2 <_free_r+0x22>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	1821      	adds	r1, r4, r0
 8007438:	428b      	cmp	r3, r1
 800743a:	bf04      	itt	eq
 800743c:	6819      	ldreq	r1, [r3, #0]
 800743e:	685b      	ldreq	r3, [r3, #4]
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	bf04      	itt	eq
 8007444:	1809      	addeq	r1, r1, r0
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	6054      	str	r4, [r2, #4]
 800744a:	e7ca      	b.n	80073e2 <_free_r+0x22>
 800744c:	bd38      	pop	{r3, r4, r5, pc}
 800744e:	bf00      	nop
 8007450:	20002058 	.word	0x20002058

08007454 <__malloc_lock>:
 8007454:	4801      	ldr	r0, [pc, #4]	@ (800745c <__malloc_lock+0x8>)
 8007456:	f7ff bfa3 	b.w	80073a0 <__retarget_lock_acquire_recursive>
 800745a:	bf00      	nop
 800745c:	20002054 	.word	0x20002054

08007460 <__malloc_unlock>:
 8007460:	4801      	ldr	r0, [pc, #4]	@ (8007468 <__malloc_unlock+0x8>)
 8007462:	f7ff bf9e 	b.w	80073a2 <__retarget_lock_release_recursive>
 8007466:	bf00      	nop
 8007468:	20002054 	.word	0x20002054

0800746c <_init>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr

08007478 <_fini>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr
