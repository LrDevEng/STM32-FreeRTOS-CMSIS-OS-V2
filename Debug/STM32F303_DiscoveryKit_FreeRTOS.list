
STM32F303_DiscoveryKit_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f68  08007f68  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f68  08007f68  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f68  08007f68  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f68  08007f68  00008f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007f70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00002408  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002468  20002468  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022b26  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043d6  00000000  00000000  0002bbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015aa  00000000  00000000  00031b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b0  00000000  00000000  000330da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222c0  00000000  00000000  0003718a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7989  00000000  00000000  0005944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120dd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000790c  00000000  00000000  00120e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00128724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e5c 	.word	0x08007e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007e5c 	.word	0x08007e5c

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd3a 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f848 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9be 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f92a 	bl	800048c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f996 	bl	8000568 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800023c:	f000 f8e6 	bl	800040c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f962 	bl	8000508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000244:	f004 f9d4 	bl	80045f0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <main+0x70>)
 800024a:	2100      	movs	r1, #0
 800024c:	2002      	movs	r0, #2
 800024e:	f004 fb0f 	bl	8004870 <osSemaphoreNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <main+0x74>)
 8000256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 8000258:	4a0f      	ldr	r2, [pc, #60]	@ (8000298 <main+0x78>)
 800025a:	2100      	movs	r1, #0
 800025c:	480f      	ldr	r0, [pc, #60]	@ (800029c <main+0x7c>)
 800025e:	f004 fa2f 	bl	80046c0 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <main+0x80>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, NULL, &Sender2_attributes);
 8000268:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <main+0x84>)
 800026a:	2100      	movs	r1, #0
 800026c:	480e      	ldr	r0, [pc, #56]	@ (80002a8 <main+0x88>)
 800026e:	f004 fa27 	bl	80046c0 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <main+0x8c>)
 8000276:	6013      	str	r3, [r2, #0]

  /* creation of Blinker */
  BlinkerHandle = osThreadNew(StartBlinker, NULL, &Blinker_attributes);
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <main+0x90>)
 800027a:	2100      	movs	r1, #0
 800027c:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <main+0x94>)
 800027e:	f004 fa1f 	bl	80046c0 <osThreadNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0c      	ldr	r2, [pc, #48]	@ (80002b8 <main+0x98>)
 8000286:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000288:	f004 f9e6 	bl	8004658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0x6c>
 8000290:	08007f20 	.word	0x08007f20
 8000294:	200004f0 	.word	0x200004f0
 8000298:	08007eb4 	.word	0x08007eb4
 800029c:	0800070d 	.word	0x0800070d
 80002a0:	200004e4 	.word	0x200004e4
 80002a4:	08007ed8 	.word	0x08007ed8
 80002a8:	08000735 	.word	0x08000735
 80002ac:	200004e8 	.word	0x200004e8
 80002b0:	08007efc 	.word	0x08007efc
 80002b4:	0800075d 	.word	0x0800075d
 80002b8:	200004ec 	.word	0x200004ec

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	@ 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f007 fcd6 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	223c      	movs	r2, #60	@ 0x3c
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f007 fcc8 	bl	8007c7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002ec:	2303      	movs	r3, #3
 80002ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800030c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000310:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fa12 	bl	8001740 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000322:	f000 fa59 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fa0a 	bl	800275c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800034e:	f000 fa43 	bl	80007d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <SystemClock_Config+0xcc>)
 8000354:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800035e:	2300      	movs	r3, #0
 8000360:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000362:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000366:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fc72 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000376:	f000 fa2f 	bl	80007d8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800037a:	f002 fb5d 	bl	8002a38 <HAL_RCC_EnableCSS>
}
 800037e:	bf00      	nop
 8000380:	3778      	adds	r7, #120	@ 0x78
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	00020062 	.word	0x00020062

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <MX_I2C1_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	@ (8000408 <MX_I2C1_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	480e      	ldr	r0, [pc, #56]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c8:	f000 ffc0 	bl	800134c <HAL_I2C_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 fa01 	bl	80007d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4809      	ldr	r0, [pc, #36]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003da:	f001 f852 	bl	8001482 <HAL_I2CEx_ConfigAnalogFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 f9f8 	bl	80007d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003ec:	f001 f894 	bl	8001518 <HAL_I2CEx_ConfigDigitalFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f9ef 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000007c 	.word	0x2000007c
 8000404:	40005400 	.word	0x40005400
 8000408:	00201d2b 	.word	0x00201d2b

0800040c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	@ (8000484 <MX_I2C2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 8000416:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	@ (8000488 <MX_I2C2_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <MX_I2C2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <MX_I2C2_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_I2C2_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	@ (8000480 <MX_I2C2_Init+0x74>)
 8000448:	f000 ff80 	bl	800134c <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f9c1 	bl	80007d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	@ (8000480 <MX_I2C2_Init+0x74>)
 800045a:	f001 f812 	bl	8001482 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f9b8 	bl	80007d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_I2C2_Init+0x74>)
 800046c:	f001 f854 	bl	8001518 <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f9af 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000d0 	.word	0x200000d0
 8000484:	40005800 	.word	0x40005800
 8000488:	00201d2b 	.word	0x00201d2b

0800048c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_SPI1_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	@ (8000504 <MX_SPI1_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_SPI1_Init+0x74>)
 8000498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800049c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004da:	2207      	movs	r2, #7
 80004dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_SPI1_Init+0x74>)
 80004ec:	f002 fd60 	bl	8002fb0 <HAL_SPI_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f96f 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000124 	.word	0x20000124
 8000504:	40013000 	.word	0x40013000

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800050e:	4a15      	ldr	r2, [pc, #84]	@ (8000564 <MX_USART2_UART_Init+0x5c>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_USART2_UART_Init+0x58>)
 800054c:	f003 f88a 	bl	8003664 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000556:	f000 f93f 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000188 	.word	0x20000188
 8000564:	40004400 	.word	0x40004400

08000568 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <MX_USB_PCD_Init+0x40>)
 8000570:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000574:	2208      	movs	r2, #8
 8000576:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800057a:	2202      	movs	r2, #2
 800057c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000580:	2202      	movs	r2, #2
 8000582:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000586:	2200      	movs	r2, #0
 8000588:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 800058c:	2200      	movs	r2, #0
 800058e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_USB_PCD_Init+0x3c>)
 8000592:	f001 f80d 	bl	80015b0 <HAL_PCD_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800059c:	f000 f91c 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000210 	.word	0x20000210
 80005a8:	40005c00 	.word	0x40005c00

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c2:	4b3c      	ldr	r3, [pc, #240]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a3b      	ldr	r2, [pc, #236]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b39      	ldr	r3, [pc, #228]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b36      	ldr	r3, [pc, #216]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a35      	ldr	r2, [pc, #212]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <MX_GPIO_Init+0x108>)
 80005f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b2a      	ldr	r3, [pc, #168]	@ (80006b4 <MX_GPIO_Init+0x108>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a23      	ldr	r2, [pc, #140]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <MX_GPIO_Init+0x108>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000640:	481d      	ldr	r0, [pc, #116]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 8000642:	f000 fe39 	bl	80012b8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000646:	2336      	movs	r3, #54	@ 0x36
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 800065c:	f000 fcb2 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000660:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000664:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	480f      	ldr	r0, [pc, #60]	@ (80006b8 <MX_GPIO_Init+0x10c>)
 800067a:	f000 fca3 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f000 fc95 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 fbea 	bl	8000e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f000 fc03 	bl	8000eb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	@ 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48001000 	.word	0x48001000

080006bc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  ITM_SendChar(message);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd81 	bl	80001d0 <ITM_SendChar>
  ITM_SendChar('\n');
 80006ce:	200a      	movs	r0, #10
 80006d0:	f7ff fd7e 	bl	80001d0 <ITM_SendChar>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
  Task_action('!');
 80006e6:	2021      	movs	r0, #33	@ 0x21
 80006e8:	f7ff ffe8 	bl	80006bc <Task_action>
  osSemaphoreRelease(myCountingSem01Handle);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_GPIO_EXTI_Callback+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 f9bf 	bl	8004a74 <osSemaphoreRelease>
  osSemaphoreRelease(myCountingSem01Handle);
 80006f6:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <HAL_GPIO_EXTI_Callback+0x2c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f9ba 	bl	8004a74 <osSemaphoreRelease>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200004f0 	.word	0x200004f0

0800070c <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
      Task_action('1');
 8000714:	2031      	movs	r0, #49	@ 0x31
 8000716:	f7ff ffd1 	bl	80006bc <Task_action>
      osSemaphoreRelease(myCountingSem01Handle);
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <StartSender1+0x24>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f9a8 	bl	8004a74 <osSemaphoreRelease>
      osDelay(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000728:	f004 f874 	bl	8004814 <osDelay>
      Task_action('1');
 800072c:	bf00      	nop
 800072e:	e7f1      	b.n	8000714 <StartSender1+0x8>
 8000730:	200004f0 	.word	0x200004f0

08000734 <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */

  /* Infinite loop */
  for(;;)
  {
      Task_action('2');
 800073c:	2032      	movs	r0, #50	@ 0x32
 800073e:	f7ff ffbd 	bl	80006bc <Task_action>
      osSemaphoreRelease(myCountingSem01Handle);
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <StartSender2+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f004 f994 	bl	8004a74 <osSemaphoreRelease>
      osDelay(2000);
 800074c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000750:	f004 f860 	bl	8004814 <osDelay>
      Task_action('2');
 8000754:	bf00      	nop
 8000756:	e7f1      	b.n	800073c <StartSender2+0x8>
 8000758:	200004f0 	.word	0x200004f0

0800075c <StartBlinker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker */
void StartBlinker(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  static uint8_t cnt = 0;

  /* Infinite loop */
  for(;;)
  {
      osStatus_t status = osSemaphoreAcquire(myCountingSem01Handle,osWaitForever);
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <StartBlinker+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f91b 	bl	80049a8 <osSemaphoreAcquire>
 8000772:	60f8      	str	r0, [r7, #12]
      if(status == 0)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d105      	bne.n	8000786 <StartBlinker+0x2a>
      {
	  cnt++;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <StartBlinker+0x50>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <StartBlinker+0x50>)
 8000784:	701a      	strb	r2, [r3, #0]
      }
      if(cnt > 1)
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <StartBlinker+0x50>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d9ea      	bls.n	8000764 <StartBlinker+0x8>
      {
	  Task_action('3');
 800078e:	2033      	movs	r0, #51	@ 0x33
 8000790:	f7ff ff94 	bl	80006bc <Task_action>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <StartBlinker+0x54>)
 800079a:	f000 fda5 	bl	80012e8 <HAL_GPIO_TogglePin>
	  cnt = 0;
 800079e:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <StartBlinker+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  {
 80007a4:	e7de      	b.n	8000764 <StartBlinker+0x8>
 80007a6:	bf00      	nop
 80007a8:	200004f0 	.word	0x200004f0
 80007ac:	200004f4 	.word	0x200004f4
 80007b0:	48001000 	.word	0x48001000

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007c6:	f000 fa7f 	bl	8000cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40001000 	.word	0x40001000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <Error_Handler+0x8>

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_MspInit+0x4c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <HAL_MspInit+0x4c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <HAL_MspInit+0x4c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 fb29 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2f      	ldr	r2, [pc, #188]	@ (8000910 <HAL_I2C_MspInit+0xdc>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d128      	bne.n	80008a8 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 800085c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800086e:	23c0      	movs	r3, #192	@ 0xc0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087e:	2304      	movs	r3, #4
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4823      	ldr	r0, [pc, #140]	@ (8000918 <HAL_I2C_MspInit+0xe4>)
 800088a:	f000 fb9b 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088e:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a20      	ldr	r2, [pc, #128]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008a6:	e02e      	b.n	8000906 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <HAL_I2C_MspInit+0xe8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d129      	bne.n	8000906 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d0:	2312      	movs	r3, #18
 80008d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008dc:	2304      	movs	r3, #4
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ea:	f000 fb6b 	bl	8000fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_I2C_MspInit+0xe0>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	@ 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400
 800091c:	40005800 	.word	0x40005800

08000920 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a17      	ldr	r2, [pc, #92]	@ (800099c <HAL_SPI_MspInit+0x7c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d128      	bne.n	8000994 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a16      	ldr	r2, [pc, #88]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 8000948:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_SPI_MspInit+0x80>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000972:	23e0      	movs	r3, #224	@ 0xe0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f000 fb18 	bl	8000fc4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013000 	.word	0x40013000
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a30 <HAL_UART_MspInit+0x8c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d130      	bne.n	8000a28 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_UART_MspInit+0x90>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f000 fad6 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2026      	movs	r0, #38	@ 0x26
 8000a1e:	f000 fa2b 	bl	8000e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a22:	2026      	movs	r0, #38	@ 0x26
 8000a24:	f000 fa44 	bl	8000eb0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <HAL_PCD_MspInit+0x80>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d129      	bne.n	8000aae <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a84:	230e      	movs	r3, #14
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f000 fa97 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_PCD_MspInit+0x84>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	@ 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <HAL_InitTick+0xe0>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	4a32      	ldr	r2, [pc, #200]	@ (8000ba0 <HAL_InitTick+0xe0>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	61d3      	str	r3, [r2, #28]
 8000adc:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <HAL_InitTick+0xe0>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f860 	bl	8002bb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b02:	f002 f815 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8000b06:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0a:	f002 f811 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b16:	4a23      	ldr	r2, [pc, #140]	@ (8000ba4 <HAL_InitTick+0xe4>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	0c9b      	lsrs	r3, r3, #18
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	@ (8000bac <HAL_InitTick+0xec>)
 8000b26:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b48:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b4a:	f002 fadc 	bl	8003106 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b5c:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b5e:	f002 fb33 	bl	80031c8 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b70:	2036      	movs	r0, #54	@ 0x36
 8000b72:	f000 f99d 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2036      	movs	r0, #54	@ 0x36
 8000b82:	f000 f979 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_InitTick+0xf0>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3738      	adds	r7, #56	@ 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200004f8 	.word	0x200004f8
 8000bac:	40001000 	.word	0x40001000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000bb8:	f002 f830 	bl	8002c1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x8>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fb92 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <USART2_IRQHandler+0x10>)
 8000c02:	f002 fd7d 	bl	8003700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000188 	.word	0x20000188

08000c10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <TIM6_DAC_IRQHandler+0x10>)
 8000c16:	f002 fb41 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200004f8 	.word	0x200004f8

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f007 f867 	bl	8007d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fad1 	bl	8000220 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c80:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c8c:	08007f70 	.word	0x08007f70
  ldr r2, =_sbss
 8000c90:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c94:	20002468 	.word	0x20002468

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_Init+0x28>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_Init+0x28>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f8d8 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff ff04 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fd94 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40022000 	.word	0x40022000

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000544 	.word	0x20000544

08000cf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000544 	.word	0x20000544

08000d08 <__NVIC_SetPriorityGrouping>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e02e      	b.n	8000f3c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d008      	beq.n	8000efa <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2204      	movs	r2, #4
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e020      	b.n	8000f3c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d005      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2204      	movs	r2, #4
 8000f62:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e027      	b.n	8000fba <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 020e 	bic.w	r2, r2, #14
 8000f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0201 	bic.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	4798      	blx	r3
    }
  }
  return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e154      	b.n	800127e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8146 	beq.w	8001278 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b03      	cmp	r3, #3
 8001070:	d017      	beq.n	80010a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d123      	bne.n	80010f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	6939      	ldr	r1, [r7, #16]
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0203 	and.w	r2, r3, #3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80a0 	beq.w	8001278 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001138:	4b58      	ldr	r3, [pc, #352]	@ (800129c <HAL_GPIO_Init+0x2d8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a57      	ldr	r2, [pc, #348]	@ (800129c <HAL_GPIO_Init+0x2d8>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b55      	ldr	r3, [pc, #340]	@ (800129c <HAL_GPIO_Init+0x2d8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001150:	4a53      	ldr	r2, [pc, #332]	@ (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800117a:	d019      	beq.n	80011b0 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a49      	ldr	r2, [pc, #292]	@ (80012a4 <HAL_GPIO_Init+0x2e0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a48      	ldr	r2, [pc, #288]	@ (80012a8 <HAL_GPIO_Init+0x2e4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a47      	ldr	r2, [pc, #284]	@ (80012ac <HAL_GPIO_Init+0x2e8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1e0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <HAL_GPIO_Init+0x2ec>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1dc>
 800119c:	2304      	movs	r3, #4
 800119e:	e008      	b.n	80011b2 <HAL_GPIO_Init+0x1ee>
 80011a0:	2305      	movs	r3, #5
 80011a2:	e006      	b.n	80011b2 <HAL_GPIO_Init+0x1ee>
 80011a4:	2303      	movs	r3, #3
 80011a6:	e004      	b.n	80011b2 <HAL_GPIO_Init+0x1ee>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x1ee>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_Init+0x1ee>
 80011b0:	2300      	movs	r3, #0
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	f002 0203 	and.w	r2, r2, #3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4093      	lsls	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c2:	4937      	ldr	r1, [pc, #220]	@ (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f4:	4a2f      	ldr	r2, [pc, #188]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fa:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800121e:	4a25      	ldr	r2, [pc, #148]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001248:	4a1a      	ldr	r2, [pc, #104]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_GPIO_Init+0x2f0>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	f47f aea3 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000c00 	.word	0x48000c00
 80012b0:	48001000 	.word	0x48001000
 80012b4:	40010400 	.word	0x40010400

080012b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43d9      	mvns	r1, r3
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	400b      	ands	r3, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f9ce 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e08d      	b.n	800147a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fa5e 	bl	8000834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2224      	movs	r2, #36	@ 0x24
 800137c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800139c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e006      	b.n	80013d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d108      	bne.n	80013ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	e007      	b.n	80013fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69d9      	ldr	r1, [r3, #28]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b20      	cmp	r3, #32
 8001496:	d138      	bne.n	800150a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e032      	b.n	800150c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2224      	movs	r2, #36	@ 0x24
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	d139      	bne.n	80015a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e033      	b.n	80015a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800156a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0b9      	b.n	8001736 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fa2e 	bl	8000a38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 ffc8 	bl	800457e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e03e      	b.n	8001672 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3311      	adds	r3, #17
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3310      	adds	r3, #16
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3313      	adds	r3, #19
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3320      	adds	r3, #32
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3324      	adds	r3, #36	@ 0x24
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3bb      	bcc.n	80015f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e044      	b.n	800170c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	791b      	ldrb	r3, [r3, #4]
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3b5      	bcc.n	8001682 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001722:	f002 ff47 	bl	80045b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001746:	af00      	add	r7, sp, #0
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001750:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f000 bff4 	b.w	800274e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 816d 	beq.w	8001a56 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800177c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001788:	4bb1      	ldr	r3, [pc, #708]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d157      	bne.n	8001844 <HAL_RCC_OscConfig+0x104>
 8001794:	4bae      	ldr	r3, [pc, #696]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d150      	bne.n	8001844 <HAL_RCC_OscConfig+0x104>
 80017a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017c2:	d802      	bhi.n	80017ca <HAL_RCC_OscConfig+0x8a>
 80017c4:	4ba2      	ldr	r3, [pc, #648]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0xb6>
 80017ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ce:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017e2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017f2:	4b97      	ldr	r3, [pc, #604]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017fa:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001802:	fa92 f2a2 	rbit	r2, r2
 8001806:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800180a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800180e:	fab2 f282 	clz	r2, r2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f002 021f 	and.w	r2, r2, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8114 	beq.w	8001a54 <HAL_RCC_OscConfig+0x314>
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 810b 	bne.w	8001a54 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f000 bf85 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001848:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x124>
 8001856:	4b7e      	ldr	r3, [pc, #504]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e036      	b.n	80018d2 <HAL_RCC_OscConfig+0x192>
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x14e>
 8001874:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b73      	ldr	r3, [pc, #460]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a72      	ldr	r2, [pc, #456]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e021      	b.n	80018d2 <HAL_RCC_OscConfig+0x192>
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x17a>
 80018a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b68      	ldr	r3, [pc, #416]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a67      	ldr	r2, [pc, #412]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x192>
 80018ba:	4b65      	ldr	r3, [pc, #404]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a64      	ldr	r2, [pc, #400]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b62      	ldr	r3, [pc, #392]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a61      	ldr	r2, [pc, #388]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	f023 020f 	bic.w	r2, r3, #15
 80018da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	495a      	ldr	r1, [pc, #360]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d054      	beq.n	80019a6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f9f8 	bl	8000cf0 <HAL_GetTick>
 8001900:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff f9f3 	bl	8000cf0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d902      	bls.n	800191c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	f000 bf19 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 800191c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001920:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001930:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b3f      	cmp	r3, #63	@ 0x3f
 800193c:	d802      	bhi.n	8001944 <HAL_RCC_OscConfig+0x204>
 800193e:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e015      	b.n	8001970 <HAL_RCC_OscConfig+0x230>
 8001944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001948:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001960:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800196c:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001974:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001978:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800197c:	fa92 f2a2 	rbit	r2, r2
 8001980:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001984:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f042 0220 	orr.w	r2, r2, #32
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0b0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1c6>
 80019a4:	e057      	b.n	8001a56 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff f9a3 	bl	8000cf0 <HAL_GetTick>
 80019aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f99e 	bl	8000cf0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	@ 0x64
 80019be:	d902      	bls.n	80019c6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	f000 bec4 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 80019c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e6:	d802      	bhi.n	80019ee <HAL_RCC_OscConfig+0x2ae>
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x2da>
 80019ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a06:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a0a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_RCC_OscConfig+0x310>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a1e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a22:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a2e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1b0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x270>
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_OscConfig+0x316>
 8001a50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 816c 	beq.w	8001d44 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a6c:	4bcc      	ldr	r3, [pc, #816]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a78:	4bc9      	ldr	r3, [pc, #804]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d16d      	bne.n	8001b60 <HAL_RCC_OscConfig+0x420>
 8001a84:	4bc6      	ldr	r3, [pc, #792]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d167      	bne.n	8001b60 <HAL_RCC_OscConfig+0x420>
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001aa2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aae:	d802      	bhi.n	8001ab6 <HAL_RCC_OscConfig+0x376>
 8001ab0:	4bbb      	ldr	r3, [pc, #748]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e013      	b.n	8001ade <HAL_RCC_OscConfig+0x39e>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ace:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ada:	4bb1      	ldr	r3, [pc, #708]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ae4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ae8:	fa92 f2a2 	rbit	r2, r2
 8001aec:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001af0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00a      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3e6>
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d002      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f000 be14 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b9e      	ldr	r3, [pc, #632]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	21f8      	movs	r1, #248	@ 0xf8
 8001b3c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b44:	fa91 f1a1 	rbit	r1, r1
 8001b48:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b4c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b50:	fab1 f181 	clz	r1, r1
 8001b54:	b2c9      	uxtb	r1, r1
 8001b56:	408b      	lsls	r3, r1
 8001b58:	4991      	ldr	r1, [pc, #580]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e0f1      	b.n	8001d44 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8083 	beq.w	8001c78 <HAL_RCC_OscConfig+0x538>
 8001b72:	2301      	movs	r3, #1
 8001b74:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b84:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b92:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f8a7 	bl	8000cf0 <HAL_GetTick>
 8001ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f8a2 	bl	8000cf0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d902      	bls.n	8001bbe <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	f000 bdc8 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bd0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bdc:	d802      	bhi.n	8001be4 <HAL_RCC_OscConfig+0x4a4>
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e013      	b.n	8001c0c <HAL_RCC_OscConfig+0x4cc>
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c08:	4b65      	ldr	r3, [pc, #404]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c16:	fa92 f2a2 	rbit	r2, r2
 8001c1a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c22:	fab2 f282 	clz	r2, r2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f042 0220 	orr.w	r2, r2, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f002 021f 	and.w	r2, r2, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0b4      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b58      	ldr	r3, [pc, #352]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	21f8      	movs	r1, #248	@ 0xf8
 8001c54:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c5c:	fa91 f1a1 	rbit	r1, r1
 8001c60:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c64:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c68:	fab1 f181 	clz	r1, r1
 8001c6c:	b2c9      	uxtb	r1, r1
 8001c6e:	408b      	lsls	r3, r1
 8001c70:	494b      	ldr	r1, [pc, #300]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
 8001c76:	e065      	b.n	8001d44 <HAL_RCC_OscConfig+0x604>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f824 	bl	8000cf0 <HAL_GetTick>
 8001ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff f81f 	bl	8000cf0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d902      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f000 bd45 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ce2:	d802      	bhi.n	8001cea <HAL_RCC_OscConfig+0x5aa>
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	e013      	b.n	8001d12 <HAL_RCC_OscConfig+0x5d2>
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_RCC_OscConfig+0x660>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	2202      	movs	r2, #2
 8001d14:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d18:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d1c:	fa92 f2a2 	rbit	r2, r2
 8001d20:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d24:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1b4      	bne.n	8001cae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8115 	beq.w	8001f84 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d07e      	beq.n	8001e68 <HAL_RCC_OscConfig+0x728>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_OscConfig+0x664>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2301      	movs	r3, #1
 8001d92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7fe ffac 	bl	8000cf0 <HAL_GetTick>
 8001d98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9c:	e00f      	b.n	8001dbe <HAL_RCC_OscConfig+0x67e>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da8:	f7fe ffa2 	bl	8000cf0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d902      	bls.n	8001dbe <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	f000 bcc8 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd8:	2202      	movs	r2, #2
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e18:	4bb0      	ldr	r3, [pc, #704]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e24:	2102      	movs	r1, #2
 8001e26:	6019      	str	r1, [r3, #0]
 8001e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f1a3 	rbit	r1, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e3e:	6019      	str	r1, [r3, #0]
  return result;
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0a0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x668>
 8001e66:	e08d      	b.n	8001f84 <HAL_RCC_OscConfig+0x844>
 8001e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e8a:	601a      	str	r2, [r3, #0]
  return result;
 8001e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e90:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b90      	ldr	r3, [pc, #576]	@ (80020e0 <HAL_RCC_OscConfig+0x9a0>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff21 	bl	8000cf0 <HAL_GetTick>
 8001eae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7fe ff1c 	bl	8000cf0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d902      	bls.n	8001eca <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f000 bc42 	b.w	800274e <HAL_RCC_OscConfig+0x100e>
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	fa93 f2a3 	rbit	r2, r3
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f2a3 	rbit	r2, r3
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	4b69      	ldr	r3, [pc, #420]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f42:	2102      	movs	r1, #2
 8001f44:	6019      	str	r1, [r3, #0]
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fa93 f1a3 	rbit	r1, r3
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f5c:	6019      	str	r1, [r3, #0]
  return result;
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d197      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 819e 	beq.w	80022d6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b42      	ldr	r3, [pc, #264]	@ (80020e4 <HAL_RCC_OscConfig+0x9a4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11a      	bne.n	800201c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <HAL_RCC_OscConfig+0x9a4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	@ (80020e4 <HAL_RCC_OscConfig+0x9a4>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fe7d 	bl	8000cf0 <HAL_GetTick>
 8001ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	e009      	b.n	8002010 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fe78 	bl	8000cf0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	@ 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e39e      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_OscConfig+0x9a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ef      	beq.n	8001ffc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x8fa>
 800202c:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a2a      	ldr	r2, [pc, #168]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e035      	b.n	80020a6 <HAL_RCC_OscConfig+0x966>
 800203a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x924>
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	e020      	b.n	80020a6 <HAL_RCC_OscConfig+0x966>
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x94e>
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e00b      	b.n	80020a6 <HAL_RCC_OscConfig+0x966>
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <HAL_RCC_OscConfig+0x99c>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7fe fe1a 	bl	8000cf0 <HAL_GetTick>
 80020bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e012      	b.n	80020e8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fe15 	bl	8000cf0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d908      	bls.n	80020e8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e339      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	10908120 	.word	0x10908120
 80020e4:	40007000 	.word	0x40007000
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800212e:	601a      	str	r2, [r3, #0]
  return result;
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002138:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_RCC_OscConfig+0xa10>
 800214a:	4b98      	ldr	r3, [pc, #608]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	e013      	b.n	8002178 <HAL_RCC_OscConfig+0xa38>
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002158:	2202      	movs	r2, #2
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002160:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4b8d      	ldr	r3, [pc, #564]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800217c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002180:	2102      	movs	r1, #2
 8002182:	6011      	str	r1, [r2, #0]
 8002184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002188:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fa92 f1a2 	rbit	r1, r2
 8002192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002196:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800219a:	6011      	str	r1, [r2, #0]
  return result;
 800219c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	fab2 f282 	clz	r2, r2
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f002 021f 	and.w	r2, r2, #31
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f43f af7f 	beq.w	80020c2 <HAL_RCC_OscConfig+0x982>
 80021c4:	e07d      	b.n	80022c2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7fe fd93 	bl	8000cf0 <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fd8e 	bl	8000cf0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e2b2      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800222e:	601a      	str	r2, [r3, #0]
  return result;
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002238:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0xb10>
 800224a:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	e013      	b.n	8002278 <HAL_RCC_OscConfig+0xb38>
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002258:	2202      	movs	r2, #2
 800225a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fa93 f2a3 	rbit	r2, r3
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	4b4d      	ldr	r3, [pc, #308]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800227c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002280:	2102      	movs	r1, #2
 8002282:	6011      	str	r1, [r2, #0]
 8002284:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002288:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	fa92 f1a2 	rbit	r1, r2
 8002292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002296:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800229a:	6011      	str	r1, [r2, #0]
  return result;
 800229c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	fab2 f282 	clz	r2, r2
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f002 021f 	and.w	r2, r2, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d186      	bne.n	80021d0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a37      	ldr	r2, [pc, #220]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8232 	beq.w	800274c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	f000 8201 	beq.w	80026f8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b02      	cmp	r3, #2
 8002304:	f040 8157 	bne.w	80025b6 <HAL_RCC_OscConfig+0xe76>
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800232c:	601a      	str	r2, [r3, #0]
  return result;
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002336:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002342:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	2300      	movs	r3, #0
 800234c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fccf 	bl	8000cf0 <HAL_GetTick>
 8002352:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e009      	b.n	800236c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fcca 	bl	8000cf0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1f0      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002374:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800239a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023a4:	d804      	bhi.n	80023b0 <HAL_RCC_OscConfig+0xc70>
 80023a6:	4b01      	ldr	r3, [pc, #4]	@ (80023ac <HAL_RCC_OscConfig+0xc6c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e029      	b.n	8002400 <HAL_RCC_OscConfig+0xcc0>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	4bc3      	ldr	r3, [pc, #780]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002404:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002408:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002412:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fa92 f1a2 	rbit	r1, r2
 800241c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002420:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002424:	6011      	str	r1, [r2, #0]
  return result;
 8002426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800242a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f042 0220 	orr.w	r2, r2, #32
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f202 	lsl.w	r2, r1, r2
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d185      	bne.n	8002358 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4baf      	ldr	r3, [pc, #700]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	430b      	orrs	r3, r1
 800246e:	49a7      	ldr	r1, [pc, #668]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800247c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002498:	601a      	str	r2, [r3, #0]
  return result;
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fc19 	bl	8000cf0 <HAL_GetTick>
 80024be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c2:	e009      	b.n	80024d8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fc14 	bl	8000cf0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e13a      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024fc:	601a      	str	r2, [r3, #0]
  return result;
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002506:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002510:	d802      	bhi.n	8002518 <HAL_RCC_OscConfig+0xdd8>
 8002512:	4b7e      	ldr	r3, [pc, #504]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e027      	b.n	8002568 <HAL_RCC_OscConfig+0xe28>
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002520:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002546:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b69      	ldr	r3, [pc, #420]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002570:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fa92 f1a2 	rbit	r1, r2
 8002584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002588:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800258c:	6011      	str	r1, [r2, #0]
  return result;
 800258e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002592:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f002 021f 	and.w	r2, r2, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d087      	beq.n	80024c4 <HAL_RCC_OscConfig+0xd84>
 80025b4:	e0ca      	b.n	800274c <HAL_RCC_OscConfig+0x100c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fb78 	bl	8000cf0 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fb73 	bl	8000cf0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e099      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002622:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b3f      	cmp	r3, #63	@ 0x3f
 8002652:	d802      	bhi.n	800265a <HAL_RCC_OscConfig+0xf1a>
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e027      	b.n	80026aa <HAL_RCC_OscConfig+0xf6a>
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002662:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_OscConfig+0xfcc>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026b6:	6011      	str	r1, [r2, #0]
 80026b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026bc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fa92 f1a2 	rbit	r1, r2
 80026c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026ce:	6011      	str	r1, [r2, #0]
  return result;
 80026d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d187      	bne.n	8002606 <HAL_RCC_OscConfig+0xec6>
 80026f6:	e029      	b.n	800274c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d103      	bne.n	8002710 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e020      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
 800270c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_RCC_OscConfig+0x1018>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002718:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800271c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	429a      	cmp	r2, r3
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002730:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002734:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b09e      	sub	sp, #120	@ 0x78
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e154      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b89      	ldr	r3, [pc, #548]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d910      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b86      	ldr	r3, [pc, #536]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4984      	ldr	r1, [pc, #528]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b82      	ldr	r3, [pc, #520]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e13c      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b7b      	ldr	r3, [pc, #492]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4978      	ldr	r1, [pc, #480]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80cd 	beq.w	800296a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d137      	bne.n	8002848 <HAL_RCC_ClockConfig+0xec>
 80027d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80027f0:	d802      	bhi.n	80027f8 <HAL_RCC_ClockConfig+0x9c>
 80027f2:	4b6b      	ldr	r3, [pc, #428]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_ClockConfig+0xbc>
 80027f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	667b      	str	r3, [r7, #100]	@ 0x64
 8002806:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280a:	663b      	str	r3, [r7, #96]	@ 0x60
 800280c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002814:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800281c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800281e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002826:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d171      	bne.n	8002928 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0ea      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d137      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x164>
 8002850:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002854:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800285e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b3f      	cmp	r3, #63	@ 0x3f
 8002868:	d802      	bhi.n	8002870 <HAL_RCC_ClockConfig+0x114>
 800286a:	4b4d      	ldr	r3, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	e00f      	b.n	8002890 <HAL_RCC_ClockConfig+0x134>
 8002870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002874:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	647b      	str	r3, [r7, #68]	@ 0x44
 800287e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002882:	643b      	str	r3, [r7, #64]	@ 0x40
 8002884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800288c:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002894:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002898:	fa92 f2a2 	rbit	r2, r2
 800289c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800289e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f002 021f 	and.w	r2, r2, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d135      	bne.n	8002928 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0ae      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
 80028c0:	2302      	movs	r3, #2
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028d6:	d802      	bhi.n	80028de <HAL_RCC_ClockConfig+0x182>
 80028d8:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e00d      	b.n	80028fa <HAL_RCC_ClockConfig+0x19e>
 80028de:	2302      	movs	r3, #2
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	2302      	movs	r3, #2
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	2202      	movs	r2, #2
 80028fc:	61ba      	str	r2, [r7, #24]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	fa92 f2a2 	rbit	r2, r2
 8002904:	617a      	str	r2, [r7, #20]
  return result;
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	fab2 f282 	clz	r2, r2
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f002 021f 	and.w	r2, r2, #31
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e07a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002928:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	491a      	ldr	r1, [pc, #104]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800293a:	f7fe f9d9 	bl	8000cf0 <HAL_GetTick>
 800293e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002940:	e00a      	b.n	8002958 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002942:	f7fe f9d5 	bl	8000cf0 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e062      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 020c 	and.w	r2, r3, #12
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	429a      	cmp	r2, r3
 8002968:	d1eb      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d215      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0207 	bic.w	r2, r3, #7
 8002980:	4906      	ldr	r1, [pc, #24]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <HAL_RCC_ClockConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d006      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <HAL_RCC_ClockConfig+0x2c2>
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000
 80029a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_ClockConfig+0x2cc>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	491a      	ldr	r1, [pc, #104]	@ (8002a28 <HAL_RCC_ClockConfig+0x2cc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ce:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_RCC_ClockConfig+0x2cc>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4912      	ldr	r1, [pc, #72]	@ (8002a28 <HAL_RCC_ClockConfig+0x2cc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029e2:	f000 f845 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80029e6:	4601      	mov	r1, r0
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <HAL_RCC_ClockConfig+0x2cc>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f0:	22f0      	movs	r2, #240	@ 0xf0
 80029f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	fa92 f2a2 	rbit	r2, r2
 80029fa:	60fa      	str	r2, [r7, #12]
  return result;
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	fab2 f282 	clz	r2, r2
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	40d3      	lsrs	r3, r2
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x2d0>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0e:	4a08      	ldr	r2, [pc, #32]	@ (8002a30 <HAL_RCC_ClockConfig+0x2d4>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_RCC_ClockConfig+0x2d8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f852 	bl	8000ac0 <HAL_InitTick>
  
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3778      	adds	r7, #120	@ 0x78
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08007f30 	.word	0x08007f30
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000004 	.word	0x20000004

08002a38 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002a42:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	603b      	str	r3, [r7, #0]
  return result;
 8002a4c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2301      	movs	r3, #1
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8002a9e:	e026      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	e026      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002acc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	e002      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af0:	613b      	str	r3, [r7, #16]
      break;
 8002af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af4:	693b      	ldr	r3, [r7, #16]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	007a1200 	.word	0x007a1200
 8002b0c:	08007f48 	.word	0x08007f48
 8002b10:	08007f58 	.word	0x08007f58
 8002b14:	003d0900 	.word	0x003d0900

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b36:	f7ff ffef 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	fa92 f2a2 	rbit	r2, r2
 8002b50:	603a      	str	r2, [r7, #0]
  return result;
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	40d3      	lsrs	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08007f40 	.word	0x08007f40

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b7a:	f7ff ffcd 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa92 f2a2 	rbit	r2, r2
 8002b94:	603a      	str	r2, [r7, #0]
  return result;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	fab2 f282 	clz	r2, r2
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	40d3      	lsrs	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08007f40 	.word	0x08007f40

08002bb8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <HAL_RCC_GetClockConfig+0x60>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0207 	and.w	r2, r3, #7
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	601a      	str	r2, [r3, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c28:	2b80      	cmp	r3, #128	@ 0x80
 8002c2a:	d104      	bne.n	8002c36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c2c:	f000 f80a 	bl	8002c44 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c32:	2280      	movs	r2, #128	@ 0x80
 8002c34:	701a      	strb	r2, [r3, #0]
  }
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	4002100a 	.word	0x4002100a

08002c44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b092      	sub	sp, #72	@ 0x48
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80d2 	beq.w	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c84:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4a49      	ldr	r2, [pc, #292]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	61d3      	str	r3, [r2, #28]
 8002c90:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b44      	ldr	r3, [pc, #272]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a40      	ldr	r2, [pc, #256]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe f819 	bl	8000cf0 <HAL_GetTick>
 8002cbe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe f815 	bl	8000cf0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	@ 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e167      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b37      	ldr	r3, [pc, #220]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce0:	4b33      	ldr	r3, [pc, #204]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8082 	beq.w	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d07a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d00:	4b2b      	ldr	r3, [pc, #172]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2300      	movs	r3, #0
 8002d50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d049      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fd ffc5 	bl	8000cf0 <HAL_GetTick>
 8002d66:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd ffc1 	bl	8000cf0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e111      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d80:	2302      	movs	r3, #2
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	61fb      	str	r3, [r7, #28]
  return result;
 8002d98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002daa:	4b01      	ldr	r3, [pc, #4]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	e00d      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	10908100 	.word	0x10908100
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	4b78      	ldr	r3, [pc, #480]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	2202      	movs	r2, #2
 8002dce:	613a      	str	r2, [r7, #16]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	fa92 f2a2 	rbit	r2, r2
 8002dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f002 021f 	and.w	r2, r2, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0b9      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002df6:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	496a      	ldr	r1, [pc, #424]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b66      	ldr	r3, [pc, #408]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a65      	ldr	r2, [pc, #404]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e28:	4b60      	ldr	r3, [pc, #384]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	495d      	ldr	r1, [pc, #372]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e46:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4956      	ldr	r1, [pc, #344]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e64:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	494e      	ldr	r1, [pc, #312]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e82:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f023 0210 	bic.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4947      	ldr	r1, [pc, #284]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ea0:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	493f      	ldr	r1, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f023 0220 	bic.w	r2, r3, #32
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4938      	ldr	r1, [pc, #224]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002edc:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	4930      	ldr	r1, [pc, #192]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002efa:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	4929      	ldr	r1, [pc, #164]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	4921      	ldr	r1, [pc, #132]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	491a      	ldr	r1, [pc, #104]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f54:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	4912      	ldr	r1, [pc, #72]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	490b      	ldr	r1, [pc, #44]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3748      	adds	r7, #72	@ 0x48
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e09d      	b.n	80030fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd2:	d009      	beq.n	8002fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
 8002fda:	e005      	b.n	8002fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fc8c 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800301e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003028:	d902      	bls.n	8003030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e002      	b.n	8003036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800303e:	d007      	beq.n	8003050 <HAL_SPI_Init+0xa0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003048:	d002      	beq.n	8003050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	ea42 0103 	orr.w	r1, r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	f003 0204 	and.w	r2, r3, #4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030cc:	ea42 0103 	orr.w	r1, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e049      	b.n	80031ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f841 	bl	80031b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 f9d3 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d001      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e04a      	b.n	8003276 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <HAL_TIM_Base_Start_IT+0xbc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x6c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d013      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x6c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <HAL_TIM_Base_Start_IT+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x6c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <HAL_TIM_Base_Start_IT+0xc4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x6c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <HAL_TIM_Base_Start_IT+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x6c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_Base_Start_IT+0xcc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d115      	bne.n	8003260 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_TIM_Base_Start_IT+0xd0>)
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d015      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0xaa>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d011      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	e008      	b.n	8003272 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e000      	b.n	8003274 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40013400 	.word	0x40013400
 8003294:	40014000 	.word	0x40014000
 8003298:	00010007 	.word	0x00010007

0800329c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8e4 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8d6 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8e7 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0204 	mvn.w	r2, #4
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8be 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8b0 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f8c1 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0208 	mvn.w	r2, #8
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f898 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f88a 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f89b 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0210 	mvn.w	r2, #16
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2208      	movs	r2, #8
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f872 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f864 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f875 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd f9d6 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f908 	bl	800363c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f900 	bl	8003650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f834 	bl	80034dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0220 	mvn.w	r2, #32
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8c8 	bl	8003628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a42      	ldr	r2, [pc, #264]	@ (800360c <TIM_Base_SetConfig+0x11c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00f      	beq.n	8003528 <TIM_Base_SetConfig+0x38>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3f      	ldr	r2, [pc, #252]	@ (8003610 <TIM_Base_SetConfig+0x120>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x38>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3e      	ldr	r2, [pc, #248]	@ (8003614 <TIM_Base_SetConfig+0x124>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x38>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3d      	ldr	r2, [pc, #244]	@ (8003618 <TIM_Base_SetConfig+0x128>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a33      	ldr	r2, [pc, #204]	@ (800360c <TIM_Base_SetConfig+0x11c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01b      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003548:	d017      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a30      	ldr	r2, [pc, #192]	@ (8003610 <TIM_Base_SetConfig+0x120>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2f      	ldr	r2, [pc, #188]	@ (8003614 <TIM_Base_SetConfig+0x124>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2e      	ldr	r2, [pc, #184]	@ (8003618 <TIM_Base_SetConfig+0x128>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <TIM_Base_SetConfig+0x12c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <TIM_Base_SetConfig+0x130>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <TIM_Base_SetConfig+0x134>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a16      	ldr	r2, [pc, #88]	@ (800360c <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00f      	beq.n	80035d8 <TIM_Base_SetConfig+0xe8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <TIM_Base_SetConfig+0x128>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0xe8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a16      	ldr	r2, [pc, #88]	@ (800361c <TIM_Base_SetConfig+0x12c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0xe8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a15      	ldr	r2, [pc, #84]	@ (8003620 <TIM_Base_SetConfig+0x130>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0xe8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <TIM_Base_SetConfig+0x134>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
  }
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e040      	b.n	80036f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd f98c 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	@ 0x24
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fd02 	bl	80040b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fb2b 	bl	8003d0c <UART_SetConfig>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e01b      	b.n	80036f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fd81 	bl	80041f8 <UART_CheckIdleState>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b0ba      	sub	sp, #232	@ 0xe8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800372a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800372e:	4013      	ands	r3, r2
 8003730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d115      	bne.n	8003768 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 82ab 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
      }
      return;
 8003766:	e2a5      	b.n	8003cb4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8117 	beq.w	80039a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800377e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003782:	4b85      	ldr	r3, [pc, #532]	@ (8003998 <HAL_UART_IRQHandler+0x298>)
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 810a 	beq.w	80039a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d011      	beq.n	80037bc <HAL_UART_IRQHandler+0xbc>
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d011      	beq.n	80037ec <HAL_UART_IRQHandler+0xec>
 80037c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2202      	movs	r2, #2
 80037da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d011      	beq.n	800381c <HAL_UART_IRQHandler+0x11c>
 80037f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2204      	movs	r2, #4
 800380a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003812:	f043 0202 	orr.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003838:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2208      	movs	r2, #8
 8003846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800384e:	f043 0208 	orr.w	r2, r3, #8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_UART_IRQHandler+0x18a>
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8211 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d04f      	beq.n	8003982 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fd9d 	bl	8004422 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d141      	bne.n	800397a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800390c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003922:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800392e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800393a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1d9      	bne.n	80038f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394e:	4a13      	ldr	r2, [pc, #76]	@ (800399c <HAL_UART_IRQHandler+0x29c>)
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd faf6 	bl	8000f48 <HAL_DMA_Abort_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800396c:	4610      	mov	r0, r2
 800396e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	e00f      	b.n	8003992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9b4 	bl	8003ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	e00b      	b.n	8003992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9b0 	bl	8003ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	e007      	b.n	8003992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9ac 	bl	8003ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003990:	e192      	b.n	8003cb8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003992:	bf00      	nop
    return;
 8003994:	e190      	b.n	8003cb8 <HAL_UART_IRQHandler+0x5b8>
 8003996:	bf00      	nop
 8003998:	04000120 	.word	0x04000120
 800399c:	080044eb 	.word	0x080044eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 814b 	bne.w	8003c40 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8144 	beq.w	8003c40 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 813d 	beq.w	8003c40 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2210      	movs	r2, #16
 80039cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	f040 80b5 	bne.w	8003b48 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8164 	beq.w	8003cbc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f080 815c 	bcs.w	8003cbc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	f000 8086 	beq.w	8003b26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a48:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1da      	bne.n	8003a1a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a88:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e1      	bne.n	8003a64 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ac4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e3      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b0a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e4      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd f9d3 	bl	8000ecc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8d7 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b46:	e0b9      	b.n	8003cbc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80ab 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b98:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e4      	bne.n	8003b74 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bce:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e3      	bne.n	8003baa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0310 	bic.w	r3, r3, #16
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e4      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f85b 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c3e:	e03f      	b.n	8003cc0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <HAL_UART_IRQHandler+0x56a>
 8003c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fc81 	bl	800456a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c68:	e02d      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01c      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
    }
    return;
 8003c92:	e017      	b.n	8003cc4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fc32 	bl	8004516 <UART_EndTransmit_IT>
    return;
 8003cb2:	e008      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cb4:	bf00      	nop
 8003cb6:	e006      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003cb8:	bf00      	nop
 8003cba:	e004      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003cc4:	bf00      	nop
  }

}
 8003cc6:	37e8      	adds	r7, #232	@ 0xe8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003d3a:	f023 030c 	bic.w	r3, r3, #12
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4aa7      	ldr	r2, [pc, #668]	@ (8004024 <UART_SetConfig+0x318>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d120      	bne.n	8003dce <UART_SetConfig+0xc2>
 8003d8c:	4ba6      	ldr	r3, [pc, #664]	@ (8004028 <UART_SetConfig+0x31c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0xbc>
 8003d98:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <UART_SetConfig+0x94>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dbd 	.word	0x08003dbd
 8003da8:	08003dc3 	.word	0x08003dc3
 8003dac:	08003db7 	.word	0x08003db7
 8003db0:	2301      	movs	r3, #1
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e0b5      	b.n	8003f22 <UART_SetConfig+0x216>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e0b2      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e0af      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e0ac      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e0a9      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a96      	ldr	r2, [pc, #600]	@ (800402c <UART_SetConfig+0x320>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d124      	bne.n	8003e22 <UART_SetConfig+0x116>
 8003dd8:	4b93      	ldr	r3, [pc, #588]	@ (8004028 <UART_SetConfig+0x31c>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0xfe>
 8003de6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dea:	d817      	bhi.n	8003e1c <UART_SetConfig+0x110>
 8003dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003df0:	d011      	beq.n	8003e16 <UART_SetConfig+0x10a>
 8003df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003df6:	d811      	bhi.n	8003e1c <UART_SetConfig+0x110>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0xf8>
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x104>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x110>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e08b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e088      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e085      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e082      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e07f      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a82      	ldr	r2, [pc, #520]	@ (8004030 <UART_SetConfig+0x324>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d124      	bne.n	8003e76 <UART_SetConfig+0x16a>
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004028 <UART_SetConfig+0x31c>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x152>
 8003e3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e3e:	d817      	bhi.n	8003e70 <UART_SetConfig+0x164>
 8003e40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e44:	d011      	beq.n	8003e6a <UART_SetConfig+0x15e>
 8003e46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e4a:	d811      	bhi.n	8003e70 <UART_SetConfig+0x164>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <UART_SetConfig+0x14c>
 8003e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x158>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x164>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e061      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e05e      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e05b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e058      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e055      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004034 <UART_SetConfig+0x328>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d124      	bne.n	8003eca <UART_SetConfig+0x1be>
 8003e80:	4b69      	ldr	r3, [pc, #420]	@ (8004028 <UART_SetConfig+0x31c>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x1a6>
 8003e8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e92:	d817      	bhi.n	8003ec4 <UART_SetConfig+0x1b8>
 8003e94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e98:	d011      	beq.n	8003ebe <UART_SetConfig+0x1b2>
 8003e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e9e:	d811      	bhi.n	8003ec4 <UART_SetConfig+0x1b8>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <UART_SetConfig+0x1a0>
 8003ea4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ea8:	d006      	beq.n	8003eb8 <UART_SetConfig+0x1ac>
 8003eaa:	e00b      	b.n	8003ec4 <UART_SetConfig+0x1b8>
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e037      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e034      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e031      	b.n	8003f22 <UART_SetConfig+0x216>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e02e      	b.n	8003f22 <UART_SetConfig+0x216>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e02b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5a      	ldr	r2, [pc, #360]	@ (8004038 <UART_SetConfig+0x32c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d124      	bne.n	8003f1e <UART_SetConfig+0x212>
 8003ed4:	4b54      	ldr	r3, [pc, #336]	@ (8004028 <UART_SetConfig+0x31c>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003edc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ee0:	d011      	beq.n	8003f06 <UART_SetConfig+0x1fa>
 8003ee2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ee6:	d817      	bhi.n	8003f18 <UART_SetConfig+0x20c>
 8003ee8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eec:	d011      	beq.n	8003f12 <UART_SetConfig+0x206>
 8003eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ef2:	d811      	bhi.n	8003f18 <UART_SetConfig+0x20c>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <UART_SetConfig+0x1f4>
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003efc:	d006      	beq.n	8003f0c <UART_SetConfig+0x200>
 8003efe:	e00b      	b.n	8003f18 <UART_SetConfig+0x20c>
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f06:	2302      	movs	r3, #2
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e00a      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e007      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f12:	2308      	movs	r3, #8
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e004      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e001      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f1e:	2310      	movs	r3, #16
 8003f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2a:	d15b      	bne.n	8003fe4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d827      	bhi.n	8003f82 <UART_SetConfig+0x276>
 8003f32:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <UART_SetConfig+0x22c>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe fde8 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fe06 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003f68:	61b8      	str	r0, [r7, #24]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b33      	ldr	r3, [pc, #204]	@ (800403c <UART_SetConfig+0x330>)
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fd7d 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8003f76:	61b8      	str	r0, [r7, #24]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
        break;
 8003f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8082 	beq.w	8004098 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	005a      	lsls	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	441a      	add	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d916      	bls.n	8003fde <UART_SetConfig+0x2d2>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb6:	d212      	bcs.n	8003fde <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f023 030f 	bic.w	r3, r3, #15
 8003fc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	89fa      	ldrh	r2, [r7, #14]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e05c      	b.n	8004098 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77bb      	strb	r3, [r7, #30]
 8003fe2:	e059      	b.n	8004098 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d835      	bhi.n	8004056 <UART_SetConfig+0x34a>
 8003fea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <UART_SetConfig+0x2e4>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004057 	.word	0x08004057
 8004000:	08004047 	.word	0x08004047
 8004004:	08004057 	.word	0x08004057
 8004008:	08004057 	.word	0x08004057
 800400c:	08004057 	.word	0x08004057
 8004010:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fd8c 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8004018:	61b8      	str	r0, [r7, #24]
        break;
 800401a:	e021      	b.n	8004060 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fdaa 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e01d      	b.n	8004060 <UART_SetConfig+0x354>
 8004024:	40013800 	.word	0x40013800
 8004028:	40021000 	.word	0x40021000
 800402c:	40004400 	.word	0x40004400
 8004030:	40004800 	.word	0x40004800
 8004034:	40004c00 	.word	0x40004c00
 8004038:	40005000 	.word	0x40005000
 800403c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <UART_SetConfig+0x3a4>)
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e00c      	b.n	8004060 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe fd13 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 800404a:	61b8      	str	r0, [r7, #24]
        break;
 800404c:	e008      	b.n	8004060 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004052:	61bb      	str	r3, [r7, #24]
        break;
 8004054:	e004      	b.n	8004060 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	77bb      	strb	r3, [r7, #30]
        break;
 800405e:	bf00      	nop
    }

    if (pclk != 0U)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	085a      	lsrs	r2, r3, #1
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d909      	bls.n	8004094 <UART_SetConfig+0x388>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d205      	bcs.n	8004094 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e001      	b.n	8004098 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b2:	d10a      	bne.n	80041ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b098      	sub	sp, #96	@ 0x60
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004208:	f7fc fd72 	bl	8000cf0 <HAL_GetTick>
 800420c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d12e      	bne.n	800427a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004224:	2200      	movs	r2, #0
 8004226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f88c 	bl	8004348 <UART_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d021      	beq.n	800427a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424a:	653b      	str	r3, [r7, #80]	@ 0x50
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800425a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e062      	b.n	8004340 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d149      	bne.n	800431c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f856 	bl	8004348 <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d03c      	beq.n	800431c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	623b      	str	r3, [r7, #32]
   return(result);
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	61fa      	str	r2, [r7, #28]
 80042f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	69b9      	ldr	r1, [r7, #24]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	617b      	str	r3, [r7, #20]
   return(result);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e011      	b.n	8004340 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3758      	adds	r7, #88	@ 0x58
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004358:	e04f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d04b      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fc fcc5 	bl	8000cf0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <UART_WaitOnFlagUntilTimeout+0x30>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e04e      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d037      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b80      	cmp	r3, #128	@ 0x80
 800438e:	d034      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d031      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d110      	bne.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2208      	movs	r2, #8
 80043aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f838 	bl	8004422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2208      	movs	r2, #8
 80043b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e029      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d4:	d111      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f81e 	bl	8004422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e00f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d0a0      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004422:	b480      	push	{r7}
 8004424:	b095      	sub	sp, #84	@ 0x54
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800443e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004448:	643b      	str	r3, [r7, #64]	@ 0x40
 800444a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800444e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e6      	bne.n	800442a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	61fb      	str	r3, [r7, #28]
   return(result);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004494:	2b01      	cmp	r3, #1
 8004496:	d118      	bne.n	80044ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6979      	ldr	r1, [r7, #20]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044de:	bf00      	nop
 80044e0:	3754      	adds	r7, #84	@ 0x54
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fbe9 	bl	8003ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	60bb      	str	r3, [r7, #8]
   return(result);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6979      	ldr	r1, [r7, #20]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	613b      	str	r3, [r7, #16]
   return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fbb5 	bl	8003ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004586:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800458a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	b29b      	uxth	r3, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	4013      	ands	r3, r2
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f6:	f3ef 8305 	mrs	r3, IPSR
 80045fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80045fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	607b      	str	r3, [r7, #4]
  return(result);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <osKernelInitialize+0x32>
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <osKernelInitialize+0x64>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d109      	bne.n	800462a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004616:	f3ef 8311 	mrs	r3, BASEPRI
 800461a:	603b      	str	r3, [r7, #0]
  return(result);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004622:	f06f 0305 	mvn.w	r3, #5
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e00c      	b.n	8004644 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <osKernelInitialize+0x64>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004632:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <osKernelInitialize+0x64>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e002      	b.n	8004644 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004644:	68fb      	ldr	r3, [r7, #12]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000548 	.word	0x20000548

08004658 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	60bb      	str	r3, [r7, #8]
  return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466a:	f3ef 8310 	mrs	r3, PRIMASK
 800466e:	607b      	str	r3, [r7, #4]
  return(result);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <osKernelStart+0x32>
 8004676:	4b11      	ldr	r3, [pc, #68]	@ (80046bc <osKernelStart+0x64>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d109      	bne.n	8004692 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800467e:	f3ef 8311 	mrs	r3, BASEPRI
 8004682:	603b      	str	r3, [r7, #0]
  return(result);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <osKernelStart+0x3a>
    stat = osErrorISR;
 800468a:	f06f 0305 	mvn.w	r3, #5
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e00e      	b.n	80046b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <osKernelStart+0x64>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800469a:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <osKernelStart+0x64>)
 800469c:	2202      	movs	r2, #2
 800469e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80046a0:	f001 fd3e 	bl	8006120 <vTaskStartScheduler>
      stat = osOK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046b0:	68fb      	ldr	r3, [r7, #12]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000548 	.word	0x20000548

080046c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b092      	sub	sp, #72	@ 0x48
 80046c4:	af04      	add	r7, sp, #16
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d0:	f3ef 8305 	mrs	r3, IPSR
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 8094 	bne.w	8004806 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	623b      	str	r3, [r7, #32]
  return(result);
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 808d 	bne.w	8004806 <osThreadNew+0x146>
 80046ec:	4b48      	ldr	r3, [pc, #288]	@ (8004810 <osThreadNew+0x150>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d106      	bne.n	8004702 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046f4:	f3ef 8311 	mrs	r3, BASEPRI
 80046f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 8082 	bne.w	8004806 <osThreadNew+0x146>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d07e      	beq.n	8004806 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800470c:	2318      	movs	r3, #24
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004710:	2300      	movs	r3, #0
 8004712:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004714:	f107 031b 	add.w	r3, r7, #27
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d045      	beq.n	80047b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <osThreadNew+0x74>
        name = attr->name;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <osThreadNew+0x9a>
 8004748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474a:	2b38      	cmp	r3, #56	@ 0x38
 800474c:	d805      	bhi.n	800475a <osThreadNew+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <osThreadNew+0x9e>
        return (NULL);
 800475a:	2300      	movs	r3, #0
 800475c:	e054      	b.n	8004808 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <osThreadNew+0xd4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2ba7      	cmp	r3, #167	@ 0xa7
 800477c:	d90a      	bls.n	8004794 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <osThreadNew+0xd4>
        mem = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004792:	e010      	b.n	80047b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10c      	bne.n	80047b6 <osThreadNew+0xf6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <osThreadNew+0xf6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <osThreadNew+0xf6>
          mem = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b0:	e001      	b.n	80047b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d110      	bne.n	80047de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c4:	9202      	str	r2, [sp, #8]
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f001 faba 	bl	8005d4c <xTaskCreateStatic>
 80047d8:	4603      	mov	r3, r0
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e013      	b.n	8004806 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f001 fb07 	bl	8005e0a <xTaskCreate>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <osThreadNew+0x146>
          hTask = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004806:	697b      	ldr	r3, [r7, #20]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3738      	adds	r7, #56	@ 0x38
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000548 	.word	0x20000548

08004814 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481c:	f3ef 8305 	mrs	r3, IPSR
 8004820:	613b      	str	r3, [r7, #16]
  return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	60fb      	str	r3, [r7, #12]
  return(result);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <osDelay+0x34>
 8004834:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <osDelay+0x58>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d109      	bne.n	8004850 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483c:	f3ef 8311 	mrs	r3, BASEPRI
 8004840:	60bb      	str	r3, [r7, #8]
  return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <osDelay+0x3c>
    stat = osErrorISR;
 8004848:	f06f 0305 	mvn.w	r3, #5
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e007      	b.n	8004860 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <osDelay+0x4c>
      vTaskDelay(ticks);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 fc2a 	bl	80060b4 <vTaskDelay>
    }
  }

  return (stat);
 8004860:	697b      	ldr	r3, [r7, #20]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000548 	.word	0x20000548

08004870 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004880:	f3ef 8305 	mrs	r3, IPSR
 8004884:	61bb      	str	r3, [r7, #24]
  return(result);
 8004886:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8086 	bne.w	800499a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488e:	f3ef 8310 	mrs	r3, PRIMASK
 8004892:	617b      	str	r3, [r7, #20]
  return(result);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d17f      	bne.n	800499a <osSemaphoreNew+0x12a>
 800489a:	4b42      	ldr	r3, [pc, #264]	@ (80049a4 <osSemaphoreNew+0x134>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d105      	bne.n	80048ae <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048a2:	f3ef 8311 	mrs	r3, BASEPRI
 80048a6:	613b      	str	r3, [r7, #16]
  return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d175      	bne.n	800499a <osSemaphoreNew+0x12a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d072      	beq.n	800499a <osSemaphoreNew+0x12a>
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d86e      	bhi.n	800499a <osSemaphoreNew+0x12a>
    mem = -1;
 80048bc:	f04f 33ff 	mov.w	r3, #4294967295
 80048c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <osSemaphoreNew+0x6e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80048d6:	d902      	bls.n	80048de <osSemaphoreNew+0x6e>
        mem = 1;
 80048d8:	2301      	movs	r3, #1
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	e00c      	b.n	80048f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <osSemaphoreNew+0x88>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <osSemaphoreNew+0x88>
          mem = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	e001      	b.n	80048f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d04c      	beq.n	800499a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d128      	bne.n	8004958 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10a      	bne.n	8004922 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2203      	movs	r2, #3
 8004912:	9200      	str	r2, [sp, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	2100      	movs	r1, #0
 8004918:	2001      	movs	r0, #1
 800491a:	f000 fa55 	bl	8004dc8 <xQueueGenericCreateStatic>
 800491e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004920:	e005      	b.n	800492e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004922:	2203      	movs	r2, #3
 8004924:	2100      	movs	r1, #0
 8004926:	2001      	movs	r0, #1
 8004928:	f000 faca 	bl	8004ec0 <xQueueGenericCreate>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d022      	beq.n	800497a <osSemaphoreNew+0x10a>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01f      	beq.n	800497a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800493a:	2300      	movs	r3, #0
 800493c:	2200      	movs	r2, #0
 800493e:	2100      	movs	r1, #0
 8004940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004942:	f000 fb8d 	bl	8005060 <xQueueGenericSend>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d016      	beq.n	800497a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800494c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800494e:	f001 f829 	bl	80059a4 <vQueueDelete>
            hSemaphore = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
 8004956:	e010      	b.n	800497a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d108      	bne.n	8004970 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	461a      	mov	r2, r3
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fb0c 	bl	8004f84 <xQueueCreateCountingSemaphoreStatic>
 800496c:	6278      	str	r0, [r7, #36]	@ 0x24
 800496e:	e004      	b.n	800497a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fb3f 	bl	8004ff6 <xQueueCreateCountingSemaphore>
 8004978:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e001      	b.n	8004992 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004996:	f001 f951 	bl	8005c3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	@ 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000548 	.word	0x20000548

080049a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80049c0:	f06f 0303 	mvn.w	r3, #3
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e04b      	b.n	8004a60 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c8:	f3ef 8305 	mrs	r3, IPSR
 80049cc:	617b      	str	r3, [r7, #20]
  return(result);
 80049ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10f      	bne.n	80049f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d4:	f3ef 8310 	mrs	r3, PRIMASK
 80049d8:	613b      	str	r3, [r7, #16]
  return(result);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <osSemaphoreAcquire+0x4c>
 80049e0:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <osSemaphoreAcquire+0xc4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d128      	bne.n	8004a3a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d022      	beq.n	8004a3a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80049fa:	f06f 0303 	mvn.w	r3, #3
 80049fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004a00:	e02d      	b.n	8004a5e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	69b8      	ldr	r0, [r7, #24]
 8004a10:	f000 ff46 	bl	80058a0 <xQueueReceiveFromISR>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d003      	beq.n	8004a22 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004a1a:	f06f 0302 	mvn.w	r3, #2
 8004a1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004a20:	e01d      	b.n	8004a5e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <osSemaphoreAcquire+0xb6>
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <osSemaphoreAcquire+0xc8>)
 8004a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004a38:	e011      	b.n	8004a5e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	69b8      	ldr	r0, [r7, #24]
 8004a3e:	f000 fe1f 	bl	8005680 <xQueueSemaphoreTake>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d00b      	beq.n	8004a60 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004a4e:	f06f 0301 	mvn.w	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e004      	b.n	8004a60 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004a56:	f06f 0302 	mvn.w	r3, #2
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e000      	b.n	8004a60 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004a5e:	bf00      	nop
      }
    }
  }

  return (stat);
 8004a60:	69fb      	ldr	r3, [r7, #28]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000548 	.word	0x20000548
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004a8a:	f06f 0303 	mvn.w	r3, #3
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e03e      	b.n	8004b10 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a92:	f3ef 8305 	mrs	r3, IPSR
 8004a96:	617b      	str	r3, [r7, #20]
  return(result);
 8004a98:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	613b      	str	r3, [r7, #16]
  return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <osSemaphoreRelease+0x4a>
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8004b1c <osSemaphoreRelease+0xa8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d120      	bne.n	8004af4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01a      	beq.n	8004af4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	69b8      	ldr	r0, [r7, #24]
 8004aca:	f000 fc66 	bl	800539a <xQueueGiveFromISR>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d003      	beq.n	8004adc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004ad4:	f06f 0302 	mvn.w	r3, #2
 8004ad8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ada:	e018      	b.n	8004b0e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <osSemaphoreRelease+0x9a>
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <osSemaphoreRelease+0xac>)
 8004ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004af2:	e00c      	b.n	8004b0e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f000 fab0 	bl	8005060 <xQueueGenericSend>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d004      	beq.n	8004b10 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004b06:	f06f 0302 	mvn.w	r3, #2
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	e000      	b.n	8004b10 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b0e:	bf00      	nop
    }
  }

  return (stat);
 8004b10:	69fb      	ldr	r3, [r7, #28]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000548 	.word	0x20000548
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a07      	ldr	r2, [pc, #28]	@ (8004b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a06      	ldr	r2, [pc, #24]	@ (8004b54 <vApplicationGetIdleTaskMemory+0x30>)
 8004b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2280      	movs	r2, #128	@ 0x80
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	2000054c 	.word	0x2000054c
 8004b54:	200005f4 	.word	0x200005f4

08004b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a07      	ldr	r2, [pc, #28]	@ (8004b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a06      	ldr	r2, [pc, #24]	@ (8004b88 <vApplicationGetTimerTaskMemory+0x30>)
 8004b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	200007f4 	.word	0x200007f4
 8004b88:	2000089c 	.word	0x2000089c

08004b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f103 0208 	add.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f103 0208 	add.w	r2, r3, #8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d103      	bne.n	8004c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e00c      	b.n	8004c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3308      	adds	r3, #8
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e002      	b.n	8004c5c <vListInsert+0x2e>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d2f6      	bcs.n	8004c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6852      	ldr	r2, [r2, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d103      	bne.n	8004cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d20:	f002 fcaa 	bl	8007678 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	441a      	add	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	3b01      	subs	r3, #1
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	441a      	add	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	@ 0xff
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	22ff      	movs	r2, #255	@ 0xff
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d114      	bne.n	8004da0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01a      	beq.n	8004db4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 fc70 	bl	8006668 <xTaskRemoveFromEventList>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d012      	beq.n	8004db4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <xQueueGenericReset+0xd0>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	e009      	b.n	8004db4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3310      	adds	r3, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fef1 	bl	8004b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3324      	adds	r3, #36	@ 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff feec 	bl	8004b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004db4:	f002 fc92 	bl	80076dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004db8:	2301      	movs	r3, #1
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08e      	sub	sp, #56	@ 0x38
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <xQueueGenericCreateStatic+0x56>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <xQueueGenericCreateStatic+0x5a>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericCreateStatic+0x5c>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <xQueueGenericCreateStatic+0x84>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <xQueueGenericCreateStatic+0x88>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <xQueueGenericCreateStatic+0x8a>
 8004e50:	2300      	movs	r3, #0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	61fb      	str	r3, [r7, #28]
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	e7fd      	b.n	8004e6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e6e:	2350      	movs	r3, #80	@ 0x50
 8004e70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b50      	cmp	r3, #80	@ 0x50
 8004e76:	d00b      	beq.n	8004e90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	61bb      	str	r3, [r7, #24]
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f844 	bl	8004f3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3730      	adds	r7, #48	@ 0x30
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	@ 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	613b      	str	r3, [r7, #16]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e004      	b.n	8004f02 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3350      	adds	r3, #80	@ 0x50
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 fcd8 	bl	80078bc <pvPortMalloc>
 8004f0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3350      	adds	r3, #80	@ 0x50
 8004f18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f22:	79fa      	ldrb	r2, [r7, #7]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f805 	bl	8004f3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f34:	69bb      	ldr	r3, [r7, #24]
	}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e002      	b.n	8004f60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	69b8      	ldr	r0, [r7, #24]
 8004f70:	f7ff fec0 	bl	8004cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	@ 0x28
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	61bb      	str	r3, [r7, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d90b      	bls.n	8004fce <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	617b      	str	r3, [r7, #20]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fce:	2302      	movs	r3, #2
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fef5 	bl	8004dc8 <xQueueGenericCreateStatic>
 8004fde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fec:	69fb      	ldr	r3, [r7, #28]
	}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	613b      	str	r3, [r7, #16]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d90b      	bls.n	800503e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800503e:	2202      	movs	r2, #2
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ff3c 	bl	8004ec0 <xQueueGenericCreate>
 8005048:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005056:	697b      	ldr	r3, [r7, #20]
	}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	@ 0x38
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506e:	2300      	movs	r3, #0
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xQueueGenericSend+0x34>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueGenericSend+0x42>
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueGenericSend+0x46>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueGenericSend+0x48>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xQueueGenericSend+0x64>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSend+0x72>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <xQueueGenericSend+0x76>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGenericSend+0x78>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <xQueueGenericSend+0x94>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f4:	f001 fc84 	bl	8006a00 <xTaskGetSchedulerState>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <xQueueGenericSend+0xa4>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <xQueueGenericSend+0xa8>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <xQueueGenericSend+0xaa>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <xQueueGenericSend+0xc6>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61fb      	str	r3, [r7, #28]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005126:	f002 faa7 	bl	8007678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <xQueueGenericSend+0xdc>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d129      	bne.n	8005190 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005142:	f000 fc6b 	bl	8005a1c <prvCopyDataToQueue>
 8005146:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	3324      	adds	r3, #36	@ 0x24
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fa87 	bl	8006668 <xTaskRemoveFromEventList>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <xQueueGenericSend+0x200>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	e00a      	b.n	8005188 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005178:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <xQueueGenericSend+0x200>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005188:	f002 faa8 	bl	80076dc <vPortExitCritical>
				return pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	e063      	b.n	8005258 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005196:	f002 faa1 	bl	80076dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800519a:	2300      	movs	r3, #0
 800519c:	e05c      	b.n	8005258 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fac1 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051b2:	f002 fa93 	bl	80076dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b6:	f001 f823 	bl	8006200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ba:	f002 fa5d 	bl	8007678 <vPortEnterCritical>
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051c4:	b25b      	sxtb	r3, r3
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d103      	bne.n	80051d4 <xQueueGenericSend+0x174>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d103      	bne.n	80051ea <xQueueGenericSend+0x18a>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ea:	f002 fa77 	bl	80076dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ee:	1d3a      	adds	r2, r7, #4
 80051f0:	f107 0314 	add.w	r3, r7, #20
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fab0 	bl	800675c <xTaskCheckForTimeOut>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d124      	bne.n	800524c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005202:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005204:	f000 fd02 	bl	8005c0c <prvIsQueueFull>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d018      	beq.n	8005240 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	3310      	adds	r3, #16
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f9d4 	bl	80065c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800521c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800521e:	f000 fc8d 	bl	8005b3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005222:	f000 fffb 	bl	800621c <xTaskResumeAll>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	f47f af7c 	bne.w	8005126 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <xQueueGenericSend+0x200>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	e772      	b.n	8005126 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005242:	f000 fc7b 	bl	8005b3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005246:	f000 ffe9 	bl	800621c <xTaskResumeAll>
 800524a:	e76c      	b.n	8005126 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800524c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800524e:	f000 fc75 	bl	8005b3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005252:	f000 ffe3 	bl	800621c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005256:	2300      	movs	r3, #0
		}
	}
}
 8005258:	4618      	mov	r0, r3
 800525a:	3738      	adds	r7, #56	@ 0x38
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	@ 0x38
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <xQueueGenericSendFromISR+0x3e>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <xQueueGenericSendFromISR+0x42>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <xQueueGenericSendFromISR+0x44>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	623b      	str	r3, [r7, #32]
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d103      	bne.n	80052d2 <xQueueGenericSendFromISR+0x6e>
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <xQueueGenericSendFromISR+0x72>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueGenericSendFromISR+0x74>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f4:	f002 faa0 	bl	8007838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052f8:	f3ef 8211 	mrs	r2, BASEPRI
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61ba      	str	r2, [r7, #24]
 800530e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005310:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <xQueueGenericSendFromISR+0xc2>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d12c      	bne.n	8005380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800532c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005336:	f000 fb71 	bl	8005a1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800533a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d112      	bne.n	800536a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d016      	beq.n	800537a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	3324      	adds	r3, #36	@ 0x24
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f989 	bl	8006668 <xTaskRemoveFromEventList>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e007      	b.n	800537a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800536a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800536e:	3301      	adds	r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	b25a      	sxtb	r2, r3
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800537a:	2301      	movs	r3, #1
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800537e:	e001      	b.n	8005384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005380:	2300      	movs	r3, #0
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800538e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005392:	4618      	mov	r0, r3
 8005394:	3738      	adds	r7, #56	@ 0x38
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b08e      	sub	sp, #56	@ 0x38
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	623b      	str	r3, [r7, #32]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	61fb      	str	r3, [r7, #28]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueGiveFromISR+0x5c>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueGiveFromISR+0x60>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueGiveFromISR+0x62>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61bb      	str	r3, [r7, #24]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005418:	f002 fa0e 	bl	8007838 <vPortValidateInterruptPriority>
	__asm volatile
 800541c:	f3ef 8211 	mrs	r2, BASEPRI
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	617a      	str	r2, [r7, #20]
 8005432:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005434:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005444:	429a      	cmp	r2, r3
 8005446:	d22b      	bcs.n	80054a0 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800545a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d112      	bne.n	800548a <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	d016      	beq.n	800549a <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	3324      	adds	r3, #36	@ 0x24
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f8f9 	bl	8006668 <xTaskRemoveFromEventList>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e007      	b.n	800549a <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800548a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800548e:	3301      	adds	r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	b25a      	sxtb	r2, r3
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800549a:	2301      	movs	r3, #1
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
 800549e:	e001      	b.n	80054a4 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3738      	adds	r7, #56	@ 0x38
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	@ 0x30
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <xQueueReceive+0x32>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	623b      	str	r3, [r7, #32]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <xQueueReceive+0x40>
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <xQueueReceive+0x44>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <xQueueReceive+0x46>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xQueueReceive+0x62>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61fb      	str	r3, [r7, #28]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800551e:	f001 fa6f 	bl	8006a00 <xTaskGetSchedulerState>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <xQueueReceive+0x72>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <xQueueReceive+0x76>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <xQueueReceive+0x78>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <xQueueReceive+0x94>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	61bb      	str	r3, [r7, #24]
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005550:	f002 f892 	bl	8007678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01f      	beq.n	80055a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005564:	f000 fac4 	bl	8005af0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	3310      	adds	r3, #16
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f873 	bl	8006668 <xTaskRemoveFromEventList>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005588:	4b3c      	ldr	r3, [pc, #240]	@ (800567c <xQueueReceive+0x1c0>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005598:	f002 f8a0 	bl	80076dc <vPortExitCritical>
				return pdPASS;
 800559c:	2301      	movs	r3, #1
 800559e:	e069      	b.n	8005674 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055a6:	f002 f899 	bl	80076dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e062      	b.n	8005674 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f8b9 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055be:	2301      	movs	r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055c2:	f002 f88b 	bl	80076dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055c6:	f000 fe1b 	bl	8006200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ca:	f002 f855 	bl	8007678 <vPortEnterCritical>
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d103      	bne.n	80055e4 <xQueueReceive+0x128>
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ea:	b25b      	sxtb	r3, r3
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d103      	bne.n	80055fa <xQueueReceive+0x13e>
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055fa:	f002 f86f 	bl	80076dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055fe:	1d3a      	adds	r2, r7, #4
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f8a8 	bl	800675c <xTaskCheckForTimeOut>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d123      	bne.n	800565a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005614:	f000 fae4 	bl	8005be0 <prvIsQueueEmpty>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d017      	beq.n	800564e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	3324      	adds	r3, #36	@ 0x24
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f000 ffcc 	bl	80065c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800562c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800562e:	f000 fa85 	bl	8005b3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005632:	f000 fdf3 	bl	800621c <xTaskResumeAll>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d189      	bne.n	8005550 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <xQueueReceive+0x1c0>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	e780      	b.n	8005550 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800564e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005650:	f000 fa74 	bl	8005b3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005654:	f000 fde2 	bl	800621c <xTaskResumeAll>
 8005658:	e77a      	b.n	8005550 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800565a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565c:	f000 fa6e 	bl	8005b3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005660:	f000 fddc 	bl	800621c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005666:	f000 fabb 	bl	8005be0 <prvIsQueueEmpty>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	f43f af6f 	beq.w	8005550 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005672:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	@ 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	@ 0x38
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	623b      	str	r3, [r7, #32]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d4:	f001 f994 	bl	8006a00 <xTaskGetSchedulerState>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <xQueueSemaphoreTake+0x64>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <xQueueSemaphoreTake+0x68>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <xQueueSemaphoreTake+0x6a>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	61bb      	str	r3, [r7, #24]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005706:	f001 ffb7 	bl	8007678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d024      	beq.n	8005760 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d104      	bne.n	8005730 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005726:	f001 faef 	bl	8006d08 <pvTaskIncrementMutexHeldCount>
 800572a:	4602      	mov	r2, r0
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00f      	beq.n	8005758 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	3310      	adds	r3, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f000 ff93 	bl	8006668 <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005748:	4b54      	ldr	r3, [pc, #336]	@ (800589c <xQueueSemaphoreTake+0x21c>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005758:	f001 ffc0 	bl	80076dc <vPortExitCritical>
				return pdPASS;
 800575c:	2301      	movs	r3, #1
 800575e:	e098      	b.n	8005892 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d112      	bne.n	800578c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	617b      	str	r3, [r7, #20]
}
 800577e:	bf00      	nop
 8005780:	bf00      	nop
 8005782:	e7fd      	b.n	8005780 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005784:	f001 ffaa 	bl	80076dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005788:	2300      	movs	r3, #0
 800578a:	e082      	b.n	8005892 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005792:	f107 030c 	add.w	r3, r7, #12
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ffca 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a0:	f001 ff9c 	bl	80076dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a4:	f000 fd2c 	bl	8006200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a8:	f001 ff66 	bl	8007678 <vPortEnterCritical>
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d103      	bne.n	80057c2 <xQueueSemaphoreTake+0x142>
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d103      	bne.n	80057d8 <xQueueSemaphoreTake+0x158>
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057d8:	f001 ff80 	bl	80076dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057dc:	463a      	mov	r2, r7
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 ffb9 	bl	800675c <xTaskCheckForTimeOut>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d132      	bne.n	8005856 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057f2:	f000 f9f5 	bl	8005be0 <prvIsQueueEmpty>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d026      	beq.n	800584a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005804:	f001 ff38 	bl	8007678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4618      	mov	r0, r3
 800580e:	f001 f915 	bl	8006a3c <xTaskPriorityInherit>
 8005812:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005814:	f001 ff62 	bl	80076dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	3324      	adds	r3, #36	@ 0x24
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fecf 	bl	80065c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005826:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005828:	f000 f988 	bl	8005b3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800582c:	f000 fcf6 	bl	800621c <xTaskResumeAll>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af67 	bne.w	8005706 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <xQueueSemaphoreTake+0x21c>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e75d      	b.n	8005706 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800584a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800584c:	f000 f976 	bl	8005b3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005850:	f000 fce4 	bl	800621c <xTaskResumeAll>
 8005854:	e757      	b.n	8005706 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005858:	f000 f970 	bl	8005b3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585c:	f000 fcde 	bl	800621c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005862:	f000 f9bd 	bl	8005be0 <prvIsQueueEmpty>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f43f af4c 	beq.w	8005706 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005874:	f001 ff00 	bl	8007678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800587a:	f000 f8b7 	bl	80059ec <prvGetDisinheritPriorityAfterTimeout>
 800587e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005886:	4618      	mov	r0, r3
 8005888:	f001 f9b6 	bl	8006bf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800588c:	f001 ff26 	bl	80076dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005892:	4618      	mov	r0, r3
 8005894:	3738      	adds	r7, #56	@ 0x38
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	@ 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	623b      	str	r3, [r7, #32]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <xQueueReceiveFromISR+0x3c>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <xQueueReceiveFromISR+0x40>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <xQueueReceiveFromISR+0x42>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61fb      	str	r3, [r7, #28]
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058fe:	f001 ff9b 	bl	8007838 <vPortValidateInterruptPriority>
	__asm volatile
 8005902:	f3ef 8211 	mrs	r2, BASEPRI
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	61ba      	str	r2, [r7, #24]
 8005918:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800591a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02f      	beq.n	800598a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005938:	f000 f8da 	bl	8005af0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005944:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d112      	bne.n	8005974 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	3310      	adds	r3, #16
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fe84 	bl	8006668 <xTaskRemoveFromEventList>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00e      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e007      	b.n	8005984 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005978:	3301      	adds	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	b25a      	sxtb	r2, r3
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005984:	2301      	movs	r3, #1
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
 8005988:	e001      	b.n	800598e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f383 8811 	msr	BASEPRI, r3
}
 8005998:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800599c:	4618      	mov	r0, r3
 800599e:	3738      	adds	r7, #56	@ 0x38
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <vQueueDelete+0x2a>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f95e 	bl	8005c90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f002 f834 	bl	8007a4c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d006      	beq.n	8005a0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e001      	b.n	8005a0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d14d      	bne.n	8005ade <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 f866 	bl	8006b18 <xTaskPriorityDisinherit>
 8005a4c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	e043      	b.n	8005ade <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d119      	bne.n	8005a90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6898      	ldr	r0, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	461a      	mov	r2, r3
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	f002 f994 	bl	8007d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d32b      	bcc.n	8005ade <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	e026      	b.n	8005ade <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68d8      	ldr	r0, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	f002 f97a 	bl	8007d94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	441a      	add	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d207      	bcs.n	8005acc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	425b      	negs	r3, r3
 8005ac6:	441a      	add	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d105      	bne.n	8005ade <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ae6:	697b      	ldr	r3, [r7, #20]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	441a      	add	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d303      	bcc.n	8005b24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68d9      	ldr	r1, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f002 f930 	bl	8007d94 <memcpy>
	}
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b44:	f001 fd98 	bl	8007678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b50:	e011      	b.n	8005b76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d012      	beq.n	8005b80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3324      	adds	r3, #36	@ 0x24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fd82 	bl	8006668 <xTaskRemoveFromEventList>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b6a:	f000 fe5b 	bl	8006824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dce9      	bgt.n	8005b52 <prvUnlockQueue+0x16>
 8005b7e:	e000      	b.n	8005b82 <prvUnlockQueue+0x46>
					break;
 8005b80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	22ff      	movs	r2, #255	@ 0xff
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b8a:	f001 fda7 	bl	80076dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b8e:	f001 fd73 	bl	8007678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b9a:	e011      	b.n	8005bc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3310      	adds	r3, #16
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fd5d 	bl	8006668 <xTaskRemoveFromEventList>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bb4:	f000 fe36 	bl	8006824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dce9      	bgt.n	8005b9c <prvUnlockQueue+0x60>
 8005bc8:	e000      	b.n	8005bcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	22ff      	movs	r2, #255	@ 0xff
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bd4:	f001 fd82 	bl	80076dc <vPortExitCritical>
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005be8:	f001 fd46 	bl	8007678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e001      	b.n	8005bfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bfe:	f001 fd6d 	bl	80076dc <vPortExitCritical>

	return xReturn;
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c14:	f001 fd30 	bl	8007678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d102      	bne.n	8005c2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e001      	b.n	8005c2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c2e:	f001 fd55 	bl	80076dc <vPortExitCritical>

	return xReturn;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e014      	b.n	8005c76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c8c <vQueueAddToRegistry+0x50>)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c58:	490c      	ldr	r1, [pc, #48]	@ (8005c8c <vQueueAddToRegistry+0x50>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c62:	4a0a      	ldr	r2, [pc, #40]	@ (8005c8c <vQueueAddToRegistry+0x50>)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c6e:	e006      	b.n	8005c7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b07      	cmp	r3, #7
 8005c7a:	d9e7      	bls.n	8005c4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000c9c 	.word	0x20000c9c

08005c90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e016      	b.n	8005ccc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c9e:	4a10      	ldr	r2, [pc, #64]	@ (8005ce0 <vQueueUnregisterQueue+0x50>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d10b      	bne.n	8005cc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce0 <vQueueUnregisterQueue+0x50>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005cb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <vQueueUnregisterQueue+0x50>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]
				break;
 8005cc4:	e006      	b.n	8005cd4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b07      	cmp	r3, #7
 8005cd0:	d9e5      	bls.n	8005c9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000c9c 	.word	0x20000c9c

08005ce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cf4:	f001 fcc0 	bl	8007678 <vPortEnterCritical>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d103      	bne.n	8005d0e <vQueueWaitForMessageRestricted+0x2a>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <vQueueWaitForMessageRestricted+0x40>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d24:	f001 fcda 	bl	80076dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3324      	adds	r3, #36	@ 0x24
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fc69 	bl	8006610 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7ff fefc 	bl	8005b3c <prvUnlockQueue>
	}
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	@ 0x38
 8005d50:	af04      	add	r7, sp, #16
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61fb      	str	r3, [r7, #28]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d96:	23a8      	movs	r3, #168	@ 0xa8
 8005d98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005d9e:	d00b      	beq.n	8005db8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61bb      	str	r3, [r7, #24]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01e      	beq.n	8005dfc <xTaskCreateStatic+0xb0>
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01b      	beq.n	8005dfc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	9302      	str	r3, [sp, #8]
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f850 	bl	8005e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005df6:	f000 f8ed 	bl	8005fd4 <prvAddNewTaskToReadyList>
 8005dfa:	e001      	b.n	8005e00 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e00:	697b      	ldr	r3, [r7, #20]
	}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3728      	adds	r7, #40	@ 0x28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b08c      	sub	sp, #48	@ 0x30
 8005e0e:	af04      	add	r7, sp, #16
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fd4c 	bl	80078bc <pvPortMalloc>
 8005e24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e2c:	20a8      	movs	r0, #168	@ 0xa8
 8005e2e:	f001 fd45 	bl	80078bc <pvPortMalloc>
 8005e32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e40:	e005      	b.n	8005e4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f001 fe02 	bl	8007a4c <vPortFree>
 8005e48:	e001      	b.n	8005e4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f80e 	bl	8005e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e78:	69f8      	ldr	r0, [r7, #28]
 8005e7a:	f000 f8ab 	bl	8005fd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e002      	b.n	8005e8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295
 8005e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	461a      	mov	r2, r3
 8005eac:	21a5      	movs	r1, #165	@ 0xa5
 8005eae:	f001 fee5 	bl	8007c7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f023 0307 	bic.w	r3, r3, #7
 8005eca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	617b      	str	r3, [r7, #20]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	e012      	b.n	8005f1a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	7819      	ldrb	r1, [r3, #0]
 8005efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	3334      	adds	r3, #52	@ 0x34
 8005f04:	460a      	mov	r2, r1
 8005f06:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	3301      	adds	r3, #1
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d9e9      	bls.n	8005ef4 <prvInitialiseNewTask+0x60>
 8005f20:	e000      	b.n	8005f24 <prvInitialiseNewTask+0x90>
		{
			break;
 8005f22:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	2b37      	cmp	r3, #55	@ 0x37
 8005f30:	d901      	bls.n	8005f36 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f32:	2337      	movs	r3, #55	@ 0x37
 8005f34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f40:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	2200      	movs	r2, #0
 8005f46:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fe3d 	bl	8004bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	3318      	adds	r3, #24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fe38 	bl	8004bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	3354      	adds	r3, #84	@ 0x54
 8005f86:	224c      	movs	r2, #76	@ 0x4c
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fe76 	bl	8007c7c <memset>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	4a0d      	ldr	r2, [pc, #52]	@ (8005fc8 <prvInitialiseNewTask+0x134>)
 8005f94:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	4a0c      	ldr	r2, [pc, #48]	@ (8005fcc <prvInitialiseNewTask+0x138>)
 8005f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd0 <prvInitialiseNewTask+0x13c>)
 8005fa0:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	69b8      	ldr	r0, [r7, #24]
 8005fa8:	f001 fa36 	bl	8007418 <pxPortInitialiseStack>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fbe:	bf00      	nop
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20002328 	.word	0x20002328
 8005fcc:	20002390 	.word	0x20002390
 8005fd0:	200023f8 	.word	0x200023f8

08005fd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fdc:	f001 fb4c 	bl	8007678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8006098 <prvAddNewTaskToReadyList+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8006098 <prvAddNewTaskToReadyList+0xc4>)
 8005fe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fea:	4b2c      	ldr	r3, [pc, #176]	@ (800609c <prvAddNewTaskToReadyList+0xc8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800609c <prvAddNewTaskToReadyList+0xc8>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ff8:	4b27      	ldr	r3, [pc, #156]	@ (8006098 <prvAddNewTaskToReadyList+0xc4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d110      	bne.n	8006022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006000:	f000 fc34 	bl	800686c <prvInitialiseTaskLists>
 8006004:	e00d      	b.n	8006022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006006:	4b26      	ldr	r3, [pc, #152]	@ (80060a0 <prvAddNewTaskToReadyList+0xcc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <prvAddNewTaskToReadyList+0xc8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	429a      	cmp	r2, r3
 800601a:	d802      	bhi.n	8006022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800601c:	4a1f      	ldr	r2, [pc, #124]	@ (800609c <prvAddNewTaskToReadyList+0xc8>)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006022:	4b20      	ldr	r3, [pc, #128]	@ (80060a4 <prvAddNewTaskToReadyList+0xd0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	4a1e      	ldr	r2, [pc, #120]	@ (80060a4 <prvAddNewTaskToReadyList+0xd0>)
 800602a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800602c:	4b1d      	ldr	r3, [pc, #116]	@ (80060a4 <prvAddNewTaskToReadyList+0xd0>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006038:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <prvAddNewTaskToReadyList+0xd4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d903      	bls.n	8006048 <prvAddNewTaskToReadyList+0x74>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <prvAddNewTaskToReadyList+0xd4>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a15      	ldr	r2, [pc, #84]	@ (80060ac <prvAddNewTaskToReadyList+0xd8>)
 8006056:	441a      	add	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe fdc1 	bl	8004be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006064:	f001 fb3a 	bl	80076dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006068:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <prvAddNewTaskToReadyList+0xcc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006070:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <prvAddNewTaskToReadyList+0xc8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	429a      	cmp	r2, r3
 800607c:	d207      	bcs.n	800608e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800607e:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <prvAddNewTaskToReadyList+0xdc>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200011b0 	.word	0x200011b0
 800609c:	20000cdc 	.word	0x20000cdc
 80060a0:	200011bc 	.word	0x200011bc
 80060a4:	200011cc 	.word	0x200011cc
 80060a8:	200011b8 	.word	0x200011b8
 80060ac:	20000ce0 	.word	0x20000ce0
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060c6:	4b14      	ldr	r3, [pc, #80]	@ (8006118 <vTaskDelay+0x64>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <vTaskDelay+0x32>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60bb      	str	r3, [r7, #8]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060e6:	f000 f88b 	bl	8006200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fe1f 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f2:	f000 f893 	bl	800621c <xTaskResumeAll>
 80060f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d107      	bne.n	800610e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <vTaskDelay+0x68>)
 8006100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200011d8 	.word	0x200011d8
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800612e:	463a      	mov	r2, r7
 8006130:	1d39      	adds	r1, r7, #4
 8006132:	f107 0308 	add.w	r3, r7, #8
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fcf4 	bl	8004b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	9202      	str	r2, [sp, #8]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	2300      	movs	r3, #0
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	460a      	mov	r2, r1
 800614e:	4924      	ldr	r1, [pc, #144]	@ (80061e0 <vTaskStartScheduler+0xc0>)
 8006150:	4824      	ldr	r0, [pc, #144]	@ (80061e4 <vTaskStartScheduler+0xc4>)
 8006152:	f7ff fdfb 	bl	8005d4c <xTaskCreateStatic>
 8006156:	4603      	mov	r3, r0
 8006158:	4a23      	ldr	r2, [pc, #140]	@ (80061e8 <vTaskStartScheduler+0xc8>)
 800615a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800615c:	4b22      	ldr	r3, [pc, #136]	@ (80061e8 <vTaskStartScheduler+0xc8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e001      	b.n	800616e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d102      	bne.n	800617a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006174:	f000 fe30 	bl	8006dd8 <xTimerCreateTimerTask>
 8006178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d11b      	bne.n	80061b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006194:	4b15      	ldr	r3, [pc, #84]	@ (80061ec <vTaskStartScheduler+0xcc>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3354      	adds	r3, #84	@ 0x54
 800619a:	4a15      	ldr	r2, [pc, #84]	@ (80061f0 <vTaskStartScheduler+0xd0>)
 800619c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800619e:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <vTaskStartScheduler+0xd4>)
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061a6:	4b14      	ldr	r3, [pc, #80]	@ (80061f8 <vTaskStartScheduler+0xd8>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061ac:	4b13      	ldr	r3, [pc, #76]	@ (80061fc <vTaskStartScheduler+0xdc>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061b2:	f001 f9bd 	bl	8007530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061b6:	e00f      	b.n	80061d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d10b      	bne.n	80061d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <vTaskStartScheduler+0xb4>
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08007e9c 	.word	0x08007e9c
 80061e4:	0800683d 	.word	0x0800683d
 80061e8:	200011d4 	.word	0x200011d4
 80061ec:	20000cdc 	.word	0x20000cdc
 80061f0:	20000010 	.word	0x20000010
 80061f4:	200011d0 	.word	0x200011d0
 80061f8:	200011bc 	.word	0x200011bc
 80061fc:	200011b4 	.word	0x200011b4

08006200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006204:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <vTaskSuspendAll+0x18>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	4a03      	ldr	r2, [pc, #12]	@ (8006218 <vTaskSuspendAll+0x18>)
 800620c:	6013      	str	r3, [r2, #0]
}
 800620e:	bf00      	nop
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	200011d8 	.word	0x200011d8

0800621c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800622a:	4b42      	ldr	r3, [pc, #264]	@ (8006334 <xTaskResumeAll+0x118>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <xTaskResumeAll+0x2e>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	603b      	str	r3, [r7, #0]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800624a:	f001 fa15 	bl	8007678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800624e:	4b39      	ldr	r3, [pc, #228]	@ (8006334 <xTaskResumeAll+0x118>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3b01      	subs	r3, #1
 8006254:	4a37      	ldr	r2, [pc, #220]	@ (8006334 <xTaskResumeAll+0x118>)
 8006256:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006258:	4b36      	ldr	r3, [pc, #216]	@ (8006334 <xTaskResumeAll+0x118>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d162      	bne.n	8006326 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006260:	4b35      	ldr	r3, [pc, #212]	@ (8006338 <xTaskResumeAll+0x11c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d05e      	beq.n	8006326 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006268:	e02f      	b.n	80062ca <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800626a:	4b34      	ldr	r3, [pc, #208]	@ (800633c <xTaskResumeAll+0x120>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3318      	adds	r3, #24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fd12 	bl	8004ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fd0d 	bl	8004ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628a:	4b2d      	ldr	r3, [pc, #180]	@ (8006340 <xTaskResumeAll+0x124>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d903      	bls.n	800629a <xTaskResumeAll+0x7e>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	4a2a      	ldr	r2, [pc, #168]	@ (8006340 <xTaskResumeAll+0x124>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a27      	ldr	r2, [pc, #156]	@ (8006344 <xTaskResumeAll+0x128>)
 80062a8:	441a      	add	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fe fc98 	bl	8004be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ba:	4b23      	ldr	r3, [pc, #140]	@ (8006348 <xTaskResumeAll+0x12c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d302      	bcc.n	80062ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062c4:	4b21      	ldr	r3, [pc, #132]	@ (800634c <xTaskResumeAll+0x130>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ca:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <xTaskResumeAll+0x120>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1cb      	bne.n	800626a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062d8:	f000 fb6c 	bl	80069b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006350 <xTaskResumeAll+0x134>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062e8:	f000 f846 	bl	8006378 <xTaskIncrementTick>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80062f2:	4b16      	ldr	r3, [pc, #88]	@ (800634c <xTaskResumeAll+0x130>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f1      	bne.n	80062e8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006304:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <xTaskResumeAll+0x134>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800630a:	4b10      	ldr	r3, [pc, #64]	@ (800634c <xTaskResumeAll+0x130>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006316:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <xTaskResumeAll+0x138>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006326:	f001 f9d9 	bl	80076dc <vPortExitCritical>

	return xAlreadyYielded;
 800632a:	68bb      	ldr	r3, [r7, #8]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200011d8 	.word	0x200011d8
 8006338:	200011b0 	.word	0x200011b0
 800633c:	20001170 	.word	0x20001170
 8006340:	200011b8 	.word	0x200011b8
 8006344:	20000ce0 	.word	0x20000ce0
 8006348:	20000cdc 	.word	0x20000cdc
 800634c:	200011c4 	.word	0x200011c4
 8006350:	200011c0 	.word	0x200011c0
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800635e:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <xTaskGetTickCount+0x1c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006364:	687b      	ldr	r3, [r7, #4]
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	200011b4 	.word	0x200011b4

08006378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006382:	4b52      	ldr	r3, [pc, #328]	@ (80064cc <xTaskIncrementTick+0x154>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 808f 	bne.w	80064aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800638c:	4b50      	ldr	r3, [pc, #320]	@ (80064d0 <xTaskIncrementTick+0x158>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006394:	4a4e      	ldr	r2, [pc, #312]	@ (80064d0 <xTaskIncrementTick+0x158>)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d121      	bne.n	80063e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063a0:	4b4c      	ldr	r3, [pc, #304]	@ (80064d4 <xTaskIncrementTick+0x15c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	603b      	str	r3, [r7, #0]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <xTaskIncrementTick+0x46>
 80063c2:	4b44      	ldr	r3, [pc, #272]	@ (80064d4 <xTaskIncrementTick+0x15c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	4b43      	ldr	r3, [pc, #268]	@ (80064d8 <xTaskIncrementTick+0x160>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a41      	ldr	r2, [pc, #260]	@ (80064d4 <xTaskIncrementTick+0x15c>)
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	4a41      	ldr	r2, [pc, #260]	@ (80064d8 <xTaskIncrementTick+0x160>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b41      	ldr	r3, [pc, #260]	@ (80064dc <xTaskIncrementTick+0x164>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a3f      	ldr	r2, [pc, #252]	@ (80064dc <xTaskIncrementTick+0x164>)
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	f000 fae8 	bl	80069b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063e4:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <xTaskIncrementTick+0x168>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d34e      	bcc.n	800648c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ee:	4b39      	ldr	r3, [pc, #228]	@ (80064d4 <xTaskIncrementTick+0x15c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <xTaskIncrementTick+0x84>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <xTaskIncrementTick+0x86>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <xTaskIncrementTick+0x168>)
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	601a      	str	r2, [r3, #0]
					break;
 800640a:	e03f      	b.n	800648c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800640c:	4b31      	ldr	r3, [pc, #196]	@ (80064d4 <xTaskIncrementTick+0x15c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d203      	bcs.n	800642c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006424:	4a2e      	ldr	r2, [pc, #184]	@ (80064e0 <xTaskIncrementTick+0x168>)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6013      	str	r3, [r2, #0]
						break;
 800642a:	e02f      	b.n	800648c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3304      	adds	r3, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fc35 	bl	8004ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3318      	adds	r3, #24
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fc2c 	bl	8004ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <xTaskIncrementTick+0x16c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <xTaskIncrementTick+0xe4>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <xTaskIncrementTick+0x16c>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a1f      	ldr	r2, [pc, #124]	@ (80064e8 <xTaskIncrementTick+0x170>)
 800646a:	441a      	add	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7fe fbb7 	bl	8004be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ec <xTaskIncrementTick+0x174>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	429a      	cmp	r2, r3
 8006484:	d3b3      	bcc.n	80063ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648a:	e7b0      	b.n	80063ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b17      	ldr	r3, [pc, #92]	@ (80064ec <xTaskIncrementTick+0x174>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006492:	4915      	ldr	r1, [pc, #84]	@ (80064e8 <xTaskIncrementTick+0x170>)
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d907      	bls.n	80064b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e004      	b.n	80064b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064aa:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <xTaskIncrementTick+0x178>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <xTaskIncrementTick+0x178>)
 80064b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <xTaskIncrementTick+0x17c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064c0:	697b      	ldr	r3, [r7, #20]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200011d8 	.word	0x200011d8
 80064d0:	200011b4 	.word	0x200011b4
 80064d4:	20001168 	.word	0x20001168
 80064d8:	2000116c 	.word	0x2000116c
 80064dc:	200011c8 	.word	0x200011c8
 80064e0:	200011d0 	.word	0x200011d0
 80064e4:	200011b8 	.word	0x200011b8
 80064e8:	20000ce0 	.word	0x20000ce0
 80064ec:	20000cdc 	.word	0x20000cdc
 80064f0:	200011c0 	.word	0x200011c0
 80064f4:	200011c4 	.word	0x200011c4

080064f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064fe:	4b2b      	ldr	r3, [pc, #172]	@ (80065ac <vTaskSwitchContext+0xb4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006506:	4b2a      	ldr	r3, [pc, #168]	@ (80065b0 <vTaskSwitchContext+0xb8>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800650c:	e047      	b.n	800659e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800650e:	4b28      	ldr	r3, [pc, #160]	@ (80065b0 <vTaskSwitchContext+0xb8>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006514:	4b27      	ldr	r3, [pc, #156]	@ (80065b4 <vTaskSwitchContext+0xbc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e011      	b.n	8006540 <vTaskSwitchContext+0x48>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <vTaskSwitchContext+0x42>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	607b      	str	r3, [r7, #4]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <vTaskSwitchContext+0x3e>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b01      	subs	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	491d      	ldr	r1, [pc, #116]	@ (80065b8 <vTaskSwitchContext+0xc0>)
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0e3      	beq.n	800651c <vTaskSwitchContext+0x24>
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <vTaskSwitchContext+0xc0>)
 8006560:	4413      	add	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	3308      	adds	r3, #8
 8006576:	429a      	cmp	r2, r3
 8006578:	d104      	bne.n	8006584 <vTaskSwitchContext+0x8c>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4a0c      	ldr	r2, [pc, #48]	@ (80065bc <vTaskSwitchContext+0xc4>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <vTaskSwitchContext+0xbc>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <vTaskSwitchContext+0xc4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3354      	adds	r3, #84	@ 0x54
 800659a:	4a09      	ldr	r2, [pc, #36]	@ (80065c0 <vTaskSwitchContext+0xc8>)
 800659c:	6013      	str	r3, [r2, #0]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	200011d8 	.word	0x200011d8
 80065b0:	200011c4 	.word	0x200011c4
 80065b4:	200011b8 	.word	0x200011b8
 80065b8:	20000ce0 	.word	0x20000ce0
 80065bc:	20000cdc 	.word	0x20000cdc
 80065c0:	20000010 	.word	0x20000010

080065c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	60fb      	str	r3, [r7, #12]
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <vTaskPlaceOnEventList+0x48>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3318      	adds	r3, #24
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7fe fb1a 	bl	8004c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065fa:	2101      	movs	r1, #1
 80065fc:	6838      	ldr	r0, [r7, #0]
 80065fe:	f000 fb97 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000cdc 	.word	0x20000cdc

08006610 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	617b      	str	r3, [r7, #20]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800663a:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <vTaskPlaceOnEventListRestricted+0x54>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3318      	adds	r3, #24
 8006640:	4619      	mov	r1, r3
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7fe facf 	bl	8004be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800664e:	f04f 33ff 	mov.w	r3, #4294967295
 8006652:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	68b8      	ldr	r0, [r7, #8]
 8006658:	f000 fb6a 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
	}
 800665c:	bf00      	nop
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000cdc 	.word	0x20000cdc

08006668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3318      	adds	r3, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fb00 	bl	8004ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <xTaskRemoveFromEventList+0xb0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11d      	bne.n	80066e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe faf7 	bl	8004ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b6:	4b19      	ldr	r3, [pc, #100]	@ (800671c <xTaskRemoveFromEventList+0xb4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d903      	bls.n	80066c6 <xTaskRemoveFromEventList+0x5e>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a16      	ldr	r2, [pc, #88]	@ (800671c <xTaskRemoveFromEventList+0xb4>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a13      	ldr	r2, [pc, #76]	@ (8006720 <xTaskRemoveFromEventList+0xb8>)
 80066d4:	441a      	add	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f7fe fa82 	bl	8004be6 <vListInsertEnd>
 80066e2:	e005      	b.n	80066f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3318      	adds	r3, #24
 80066e8:	4619      	mov	r1, r3
 80066ea:	480e      	ldr	r0, [pc, #56]	@ (8006724 <xTaskRemoveFromEventList+0xbc>)
 80066ec:	f7fe fa7b 	bl	8004be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <xTaskRemoveFromEventList+0xc0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d905      	bls.n	800670a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <xTaskRemoveFromEventList+0xc4>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e001      	b.n	800670e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800670e:	697b      	ldr	r3, [r7, #20]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	200011d8 	.word	0x200011d8
 800671c:	200011b8 	.word	0x200011b8
 8006720:	20000ce0 	.word	0x20000ce0
 8006724:	20001170 	.word	0x20001170
 8006728:	20000cdc 	.word	0x20000cdc
 800672c:	200011c4 	.word	0x200011c4

08006730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <vTaskInternalSetTimeOutState+0x24>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <vTaskInternalSetTimeOutState+0x28>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	605a      	str	r2, [r3, #4]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	200011c8 	.word	0x200011c8
 8006758:	200011b4 	.word	0x200011b4

0800675c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	e7fd      	b.n	8006780 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	60fb      	str	r3, [r7, #12]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80067a2:	f000 ff69 	bl	8007678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067a6:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <xTaskCheckForTimeOut+0xc0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d102      	bne.n	80067c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e023      	b.n	800680e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b15      	ldr	r3, [pc, #84]	@ (8006820 <xTaskCheckForTimeOut+0xc4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d007      	beq.n	80067e2 <xTaskCheckForTimeOut+0x86>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	e015      	b.n	800680e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d20b      	bcs.n	8006804 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff99 	bl	8006730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	e004      	b.n	800680e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800680e:	f000 ff65 	bl	80076dc <vPortExitCritical>

	return xReturn;
 8006812:	69fb      	ldr	r3, [r7, #28]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200011b4 	.word	0x200011b4
 8006820:	200011c8 	.word	0x200011c8

08006824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006828:	4b03      	ldr	r3, [pc, #12]	@ (8006838 <vTaskMissedYield+0x14>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	200011c4 	.word	0x200011c4

0800683c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006844:	f000 f852 	bl	80068ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006848:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <prvIdleTask+0x28>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d9f9      	bls.n	8006844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <prvIdleTask+0x2c>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006860:	e7f0      	b.n	8006844 <prvIdleTask+0x8>
 8006862:	bf00      	nop
 8006864:	20000ce0 	.word	0x20000ce0
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	e00c      	b.n	8006892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4a12      	ldr	r2, [pc, #72]	@ (80068cc <prvInitialiseTaskLists+0x60>)
 8006884:	4413      	add	r3, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe f980 	bl	8004b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b37      	cmp	r3, #55	@ 0x37
 8006896:	d9ef      	bls.n	8006878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006898:	480d      	ldr	r0, [pc, #52]	@ (80068d0 <prvInitialiseTaskLists+0x64>)
 800689a:	f7fe f977 	bl	8004b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800689e:	480d      	ldr	r0, [pc, #52]	@ (80068d4 <prvInitialiseTaskLists+0x68>)
 80068a0:	f7fe f974 	bl	8004b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a4:	480c      	ldr	r0, [pc, #48]	@ (80068d8 <prvInitialiseTaskLists+0x6c>)
 80068a6:	f7fe f971 	bl	8004b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068aa:	480c      	ldr	r0, [pc, #48]	@ (80068dc <prvInitialiseTaskLists+0x70>)
 80068ac:	f7fe f96e 	bl	8004b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068b0:	480b      	ldr	r0, [pc, #44]	@ (80068e0 <prvInitialiseTaskLists+0x74>)
 80068b2:	f7fe f96b 	bl	8004b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <prvInitialiseTaskLists+0x78>)
 80068b8:	4a05      	ldr	r2, [pc, #20]	@ (80068d0 <prvInitialiseTaskLists+0x64>)
 80068ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <prvInitialiseTaskLists+0x7c>)
 80068be:	4a05      	ldr	r2, [pc, #20]	@ (80068d4 <prvInitialiseTaskLists+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000ce0 	.word	0x20000ce0
 80068d0:	20001140 	.word	0x20001140
 80068d4:	20001154 	.word	0x20001154
 80068d8:	20001170 	.word	0x20001170
 80068dc:	20001184 	.word	0x20001184
 80068e0:	2000119c 	.word	0x2000119c
 80068e4:	20001168 	.word	0x20001168
 80068e8:	2000116c 	.word	0x2000116c

080068ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f2:	e019      	b.n	8006928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f4:	f000 fec0 	bl	8007678 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068f8:	4b10      	ldr	r3, [pc, #64]	@ (800693c <prvCheckTasksWaitingTermination+0x50>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe f9cb 	bl	8004ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <prvCheckTasksWaitingTermination+0x54>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	4a0b      	ldr	r2, [pc, #44]	@ (8006940 <prvCheckTasksWaitingTermination+0x54>)
 8006912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006914:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <prvCheckTasksWaitingTermination+0x58>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3b01      	subs	r3, #1
 800691a:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <prvCheckTasksWaitingTermination+0x58>)
 800691c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800691e:	f000 fedd 	bl	80076dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f810 	bl	8006948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006928:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <prvCheckTasksWaitingTermination+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e1      	bne.n	80068f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20001184 	.word	0x20001184
 8006940:	200011b0 	.word	0x200011b0
 8006944:	20001198 	.word	0x20001198

08006948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3354      	adds	r3, #84	@ 0x54
 8006954:	4618      	mov	r0, r3
 8006956:	f001 f999 	bl	8007c8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006960:	2b00      	cmp	r3, #0
 8006962:	d108      	bne.n	8006976 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f86f 	bl	8007a4c <vPortFree>
				vPortFree( pxTCB );
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f86c 	bl	8007a4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006974:	e019      	b.n	80069aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800697c:	2b01      	cmp	r3, #1
 800697e:	d103      	bne.n	8006988 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f863 	bl	8007a4c <vPortFree>
	}
 8006986:	e010      	b.n	80069aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800698e:	2b02      	cmp	r3, #2
 8006990:	d00b      	beq.n	80069aa <prvDeleteTCB+0x62>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <prvDeleteTCB+0x5e>
	}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b0f      	ldr	r3, [pc, #60]	@ (80069f8 <prvResetNextTaskUnblockTime+0x44>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <prvResetNextTaskUnblockTime+0x14>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <prvResetNextTaskUnblockTime+0x16>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069ce:	4b0b      	ldr	r3, [pc, #44]	@ (80069fc <prvResetNextTaskUnblockTime+0x48>)
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069d6:	e008      	b.n	80069ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <prvResetNextTaskUnblockTime+0x44>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4a05      	ldr	r2, [pc, #20]	@ (80069fc <prvResetNextTaskUnblockTime+0x48>)
 80069e8:	6013      	str	r3, [r2, #0]
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	20001168 	.word	0x20001168
 80069fc:	200011d0 	.word	0x200011d0

08006a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <xTaskGetSchedulerState+0x34>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e008      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <xTaskGetSchedulerState+0x38>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	e001      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a26:	687b      	ldr	r3, [r7, #4]
	}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200011bc 	.word	0x200011bc
 8006a38:	200011d8 	.word	0x200011d8

08006a3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d056      	beq.n	8006b00 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a56:	4b2d      	ldr	r3, [pc, #180]	@ (8006b0c <xTaskPriorityInherit+0xd0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d246      	bcs.n	8006aee <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db06      	blt.n	8006a76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	4b28      	ldr	r3, [pc, #160]	@ (8006b0c <xTaskPriorityInherit+0xd0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6959      	ldr	r1, [r3, #20]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a22      	ldr	r2, [pc, #136]	@ (8006b10 <xTaskPriorityInherit+0xd4>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	d101      	bne.n	8006a92 <xTaskPriorityInherit+0x56>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <xTaskPriorityInherit+0x58>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d022      	beq.n	8006ade <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe f8ff 	bl	8004ca0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b0c <xTaskPriorityInherit+0xd0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab0:	4b18      	ldr	r3, [pc, #96]	@ (8006b14 <xTaskPriorityInherit+0xd8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <xTaskPriorityInherit+0x84>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	4a15      	ldr	r2, [pc, #84]	@ (8006b14 <xTaskPriorityInherit+0xd8>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a10      	ldr	r2, [pc, #64]	@ (8006b10 <xTaskPriorityInherit+0xd4>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe f885 	bl	8004be6 <vListInsertEnd>
 8006adc:	e004      	b.n	8006ae8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <xTaskPriorityInherit+0xd0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e008      	b.n	8006b00 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006af2:	4b06      	ldr	r3, [pc, #24]	@ (8006b0c <xTaskPriorityInherit+0xd0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d201      	bcs.n	8006b00 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b00:	68fb      	ldr	r3, [r7, #12]
	}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000cdc 	.word	0x20000cdc
 8006b10:	20000ce0 	.word	0x20000ce0
 8006b14:	200011b8 	.word	0x200011b8

08006b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d058      	beq.n	8006be0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bec <xTaskPriorityDisinherit+0xd4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d00b      	beq.n	8006b50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	60fb      	str	r3, [r7, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60bb      	str	r3, [r7, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d02c      	beq.n	8006be0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d128      	bne.n	8006be0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe f884 	bl	8004ca0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <xTaskPriorityDisinherit+0xd8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <xTaskPriorityDisinherit+0xa8>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf0 <xTaskPriorityDisinherit+0xd8>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a09      	ldr	r2, [pc, #36]	@ (8006bf4 <xTaskPriorityDisinherit+0xdc>)
 8006bce:	441a      	add	r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fe f805 	bl	8004be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be0:	697b      	ldr	r3, [r7, #20]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000cdc 	.word	0x20000cdc
 8006bf0:	200011b8 	.word	0x200011b8
 8006bf4:	20000ce0 	.word	0x20000ce0

08006bf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c06:	2301      	movs	r3, #1
 8006c08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d071      	beq.n	8006cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60fb      	str	r3, [r7, #12]
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	e7fd      	b.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d902      	bls.n	8006c40 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e002      	b.n	8006c46 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d051      	beq.n	8006cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d14c      	bne.n	8006cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c5a:	4b28      	ldr	r3, [pc, #160]	@ (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d10b      	bne.n	8006c7c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	60bb      	str	r3, [r7, #8]
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	db04      	blt.n	8006c9a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	6959      	ldr	r1, [r3, #20]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4a15      	ldr	r2, [pc, #84]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006caa:	4413      	add	r3, r2
 8006cac:	4299      	cmp	r1, r3
 8006cae:	d101      	bne.n	8006cb4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01c      	beq.n	8006cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fd ffee 	bl	8004ca0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d903      	bls.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006d04 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4a06      	ldr	r2, [pc, #24]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006ce6:	441a      	add	r2, r3
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7fd ff79 	bl	8004be6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cf4:	bf00      	nop
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000cdc 	.word	0x20000cdc
 8006d00:	20000ce0 	.word	0x20000ce0
 8006d04:	200011b8 	.word	0x200011b8

08006d08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006d1e:	4b03      	ldr	r3, [pc, #12]	@ (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d20:	681b      	ldr	r3, [r3, #0]
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20000cdc 	.word	0x20000cdc

08006d30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d3a:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d40:	4b20      	ldr	r3, [pc, #128]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd ffaa 	bl	8004ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d10a      	bne.n	8006d6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4819      	ldr	r0, [pc, #100]	@ (8006dc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d64:	f7fd ff3f 	bl	8004be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d68:	e026      	b.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d72:	4b14      	ldr	r3, [pc, #80]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d209      	bcs.n	8006d96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d82:	4b12      	ldr	r3, [pc, #72]	@ (8006dcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fd ff4d 	bl	8004c2e <vListInsert>
}
 8006d94:	e010      	b.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d96:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fd ff43 	bl	8004c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006da8:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d202      	bcs.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006db2:	4a08      	ldr	r2, [pc, #32]	@ (8006dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6013      	str	r3, [r2, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200011b4 	.word	0x200011b4
 8006dc4:	20000cdc 	.word	0x20000cdc
 8006dc8:	2000119c 	.word	0x2000119c
 8006dcc:	2000116c 	.word	0x2000116c
 8006dd0:	20001168 	.word	0x20001168
 8006dd4:	200011d0 	.word	0x200011d0

08006dd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	@ 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006de2:	f000 fad9 	bl	8007398 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006de6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e5c <xTimerCreateTimerTask+0x84>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d021      	beq.n	8006e32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006df6:	1d3a      	adds	r2, r7, #4
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd fea9 	bl	8004b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	2302      	movs	r3, #2
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	460a      	mov	r2, r1
 8006e18:	4911      	ldr	r1, [pc, #68]	@ (8006e60 <xTimerCreateTimerTask+0x88>)
 8006e1a:	4812      	ldr	r0, [pc, #72]	@ (8006e64 <xTimerCreateTimerTask+0x8c>)
 8006e1c:	f7fe ff96 	bl	8005d4c <xTaskCreateStatic>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4a11      	ldr	r2, [pc, #68]	@ (8006e68 <xTimerCreateTimerTask+0x90>)
 8006e24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e26:	4b10      	ldr	r3, [pc, #64]	@ (8006e68 <xTimerCreateTimerTask+0x90>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000120c 	.word	0x2000120c
 8006e60:	08007ea4 	.word	0x08007ea4
 8006e64:	08006f8d 	.word	0x08006f8d
 8006e68:	20001210 	.word	0x20001210

08006e6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <xTimerGenericCommand+0x30>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	623b      	str	r3, [r7, #32]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e9c:	4b19      	ldr	r3, [pc, #100]	@ (8006f04 <xTimerGenericCommand+0x98>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02a      	beq.n	8006efa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	dc18      	bgt.n	8006ee8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006eb6:	f7ff fda3 	bl	8006a00 <xTaskGetSchedulerState>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d109      	bne.n	8006ed4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ec0:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <xTimerGenericCommand+0x98>)
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	f107 0110 	add.w	r1, r7, #16
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ecc:	f7fe f8c8 	bl	8005060 <xQueueGenericSend>
 8006ed0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ed2:	e012      	b.n	8006efa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <xTimerGenericCommand+0x98>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	f107 0110 	add.w	r1, r7, #16
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f7fe f8be 	bl	8005060 <xQueueGenericSend>
 8006ee4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ee6:	e008      	b.n	8006efa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <xTimerGenericCommand+0x98>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	f107 0110 	add.w	r1, r7, #16
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	f7fe f9b6 	bl	8005264 <xQueueGenericSendFromISR>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3728      	adds	r7, #40	@ 0x28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000120c 	.word	0x2000120c

08006f08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <prvProcessExpiredTimer+0x80>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd febd 	bl	8004ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d123      	bne.n	8006f76 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	18d1      	adds	r1, r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	f000 f8cc 	bl	80070d8 <prvInsertTimerInActiveList>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f46:	2300      	movs	r3, #0
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6978      	ldr	r0, [r7, #20]
 8006f52:	f7ff ff8b 	bl	8006e6c <xTimerGenericCommand>
 8006f56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	6978      	ldr	r0, [r7, #20]
 8006f7c:	4798      	blx	r3
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20001204 	.word	0x20001204

08006f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f94:	f107 0308 	add.w	r3, r7, #8
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 f859 	bl	8007050 <prvGetNextExpireTime>
 8006f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f805 	bl	8006fb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006faa:	f000 f8d7 	bl	800715c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fae:	bf00      	nop
 8006fb0:	e7f0      	b.n	8006f94 <prvTimerTask+0x8>
	...

08006fb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fbe:	f7ff f91f 	bl	8006200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f866 	bl	8007098 <prvSampleTimeNow>
 8006fcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d130      	bne.n	8007036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <prvProcessTimerOrBlockTask+0x3c>
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d806      	bhi.n	8006ff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fe2:	f7ff f91b 	bl	800621c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ff8d 	bl	8006f08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fee:	e024      	b.n	800703a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ff6:	4b13      	ldr	r3, [pc, #76]	@ (8007044 <prvProcessTimerOrBlockTask+0x90>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007008:	4b0f      	ldr	r3, [pc, #60]	@ (8007048 <prvProcessTimerOrBlockTask+0x94>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	f7fe fe65 	bl	8005ce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800701a:	f7ff f8ff 	bl	800621c <xTaskResumeAll>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007024:	4b09      	ldr	r3, [pc, #36]	@ (800704c <prvProcessTimerOrBlockTask+0x98>)
 8007026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	f3bf 8f6f 	isb	sy
}
 8007034:	e001      	b.n	800703a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007036:	f7ff f8f1 	bl	800621c <xTaskResumeAll>
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20001208 	.word	0x20001208
 8007048:	2000120c 	.word	0x2000120c
 800704c:	e000ed04 	.word	0xe000ed04

08007050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007058:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <prvGetNextExpireTime+0x44>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007076:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <prvGetNextExpireTime+0x44>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e001      	b.n	8007086 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20001204 	.word	0x20001204

08007098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070a0:	f7ff f95a 	bl	8006358 <xTaskGetTickCount>
 80070a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070a6:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <prvSampleTimeNow+0x3c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d205      	bcs.n	80070bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070b0:	f000 f910 	bl	80072d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e002      	b.n	80070c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070c2:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <prvSampleTimeNow+0x3c>)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070c8:	68fb      	ldr	r3, [r7, #12]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20001214 	.word	0x20001214

080070d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d812      	bhi.n	8007124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e01b      	b.n	800714a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007112:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <prvInsertTimerInActiveList+0x7c>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3304      	adds	r3, #4
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7fd fd86 	bl	8004c2e <vListInsert>
 8007122:	e012      	b.n	800714a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d206      	bcs.n	800713a <prvInsertTimerInActiveList+0x62>
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e007      	b.n	800714a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800713a:	4b07      	ldr	r3, [pc, #28]	@ (8007158 <prvInsertTimerInActiveList+0x80>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fd fd72 	bl	8004c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800714a:	697b      	ldr	r3, [r7, #20]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20001208 	.word	0x20001208
 8007158:	20001204 	.word	0x20001204

0800715c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08e      	sub	sp, #56	@ 0x38
 8007160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007162:	e0a5      	b.n	80072b0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da19      	bge.n	800719e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	3304      	adds	r3, #4
 800716e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61fb      	str	r3, [r7, #28]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800718e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007194:	6850      	ldr	r0, [r2, #4]
 8007196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007198:	6892      	ldr	r2, [r2, #8]
 800719a:	4611      	mov	r1, r2
 800719c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f2c0 8085 	blt.w	80072b0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fd fd72 	bl	8004ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071bc:	463b      	mov	r3, r7
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff6a 	bl	8007098 <prvSampleTimeNow>
 80071c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d86c      	bhi.n	80072a6 <prvProcessReceivedCommands+0x14a>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <prvProcessReceivedCommands+0x78>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	080071fd 	.word	0x080071fd
 80071e0:	080072a7 	.word	0x080072a7
 80071e4:	0800725b 	.word	0x0800725b
 80071e8:	08007295 	.word	0x08007295
 80071ec:	080071fd 	.word	0x080071fd
 80071f0:	080071fd 	.word	0x080071fd
 80071f4:	080072a7 	.word	0x080072a7
 80071f8:	0800725b 	.word	0x0800725b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	18d1      	adds	r1, r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800720a:	f7ff ff65 	bl	80070d8 <prvInsertTimerInActiveList>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d04a      	beq.n	80072aa <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800721a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d142      	bne.n	80072aa <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	441a      	add	r2, r3
 800722c:	2300      	movs	r3, #0
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	2100      	movs	r1, #0
 8007234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007236:	f7ff fe19 	bl	8006e6c <xTimerGenericCommand>
 800723a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d133      	bne.n	80072aa <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	61bb      	str	r3, [r7, #24]
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	e7fd      	b.n	8007256 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	617b      	str	r3, [r7, #20]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	18d1      	adds	r1, r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800728c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800728e:	f7ff ff23 	bl	80070d8 <prvInsertTimerInActiveList>
					break;
 8007292:	e00d      	b.n	80072b0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d107      	bne.n	80072ae <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800729e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a0:	f000 fbd4 	bl	8007a4c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072a4:	e003      	b.n	80072ae <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80072a6:	bf00      	nop
 80072a8:	e002      	b.n	80072b0 <prvProcessReceivedCommands+0x154>
					break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <prvProcessReceivedCommands+0x154>
					break;
 80072ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <prvProcessReceivedCommands+0x174>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	1d39      	adds	r1, r7, #4
 80072b6:	2200      	movs	r2, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe f8ff 	bl	80054bc <xQueueReceive>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f af4f 	bne.w	8007164 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	3730      	adds	r7, #48	@ 0x30
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	2000120c 	.word	0x2000120c

080072d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072da:	e046      	b.n	800736a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fd fcd3 	bl	8004ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d12f      	bne.n	800736a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90e      	bls.n	800733a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007328:	4b19      	ldr	r3, [pc, #100]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3304      	adds	r3, #4
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7fd fc7b 	bl	8004c2e <vListInsert>
 8007338:	e017      	b.n	800736a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	2100      	movs	r1, #0
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fd91 	bl	8006e6c <xTimerGenericCommand>
 800734a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <prvSwitchTimerLists+0x96>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	603b      	str	r3, [r7, #0]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800736a:	4b09      	ldr	r3, [pc, #36]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1b3      	bne.n	80072dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800737a:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <prvSwitchTimerLists+0xc0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a04      	ldr	r2, [pc, #16]	@ (8007390 <prvSwitchTimerLists+0xbc>)
 8007380:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007382:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <prvSwitchTimerLists+0xc0>)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6013      	str	r3, [r2, #0]
}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20001204 	.word	0x20001204
 8007394:	20001208 	.word	0x20001208

08007398 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800739e:	f000 f96b 	bl	8007678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073a2:	4b15      	ldr	r3, [pc, #84]	@ (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d120      	bne.n	80073ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073aa:	4814      	ldr	r0, [pc, #80]	@ (80073fc <prvCheckForValidListAndQueue+0x64>)
 80073ac:	f7fd fbee 	bl	8004b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073b0:	4813      	ldr	r0, [pc, #76]	@ (8007400 <prvCheckForValidListAndQueue+0x68>)
 80073b2:	f7fd fbeb 	bl	8004b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <prvCheckForValidListAndQueue+0x6c>)
 80073b8:	4a10      	ldr	r2, [pc, #64]	@ (80073fc <prvCheckForValidListAndQueue+0x64>)
 80073ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073bc:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <prvCheckForValidListAndQueue+0x70>)
 80073be:	4a10      	ldr	r2, [pc, #64]	@ (8007400 <prvCheckForValidListAndQueue+0x68>)
 80073c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4b11      	ldr	r3, [pc, #68]	@ (800740c <prvCheckForValidListAndQueue+0x74>)
 80073c8:	4a11      	ldr	r2, [pc, #68]	@ (8007410 <prvCheckForValidListAndQueue+0x78>)
 80073ca:	2110      	movs	r1, #16
 80073cc:	200a      	movs	r0, #10
 80073ce:	f7fd fcfb 	bl	8004dc8 <xQueueGenericCreateStatic>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073d8:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	490b      	ldr	r1, [pc, #44]	@ (8007414 <prvCheckForValidListAndQueue+0x7c>)
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fc28 	bl	8005c3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ec:	f000 f976 	bl	80076dc <vPortExitCritical>
}
 80073f0:	bf00      	nop
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2000120c 	.word	0x2000120c
 80073fc:	200011dc 	.word	0x200011dc
 8007400:	200011f0 	.word	0x200011f0
 8007404:	20001204 	.word	0x20001204
 8007408:	20001208 	.word	0x20001208
 800740c:	200012b8 	.word	0x200012b8
 8007410:	20001218 	.word	0x20001218
 8007414:	08007eac 	.word	0x08007eac

08007418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b04      	subs	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0201 	bic.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007448:	4a0c      	ldr	r2, [pc, #48]	@ (800747c <pxPortInitialiseStack+0x64>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b14      	subs	r3, #20
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b04      	subs	r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f06f 0202 	mvn.w	r2, #2
 8007466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3b20      	subs	r3, #32
 800746c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	08007481 	.word	0x08007481

08007480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800748a:	4b13      	ldr	r3, [pc, #76]	@ (80074d8 <prvTaskExitError+0x58>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d00b      	beq.n	80074ac <prvTaskExitError+0x2c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	60fb      	str	r3, [r7, #12]
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <prvTaskExitError+0x28>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60bb      	str	r3, [r7, #8]
}
 80074be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074c0:	bf00      	nop
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0fc      	beq.n	80074c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	2000000c 	.word	0x2000000c
 80074dc:	00000000 	.word	0x00000000

080074e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <pxCurrentTCBConst2>)
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	f380 8809 	msr	PSP, r0
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8811 	msr	BASEPRI, r0
 80074fa:	4770      	bx	lr
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst2>:
 8007500:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007508:	4808      	ldr	r0, [pc, #32]	@ (800752c <prvPortStartFirstTask+0x24>)
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f380 8808 	msr	MSP, r0
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8814 	msr	CONTROL, r0
 800751a:	b662      	cpsie	i
 800751c:	b661      	cpsie	f
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	df00      	svc	0
 8007528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800752a:	bf00      	nop
 800752c:	e000ed08 	.word	0xe000ed08

08007530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007536:	4b47      	ldr	r3, [pc, #284]	@ (8007654 <xPortStartScheduler+0x124>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a47      	ldr	r2, [pc, #284]	@ (8007658 <xPortStartScheduler+0x128>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10b      	bne.n	8007558 <xPortStartScheduler+0x28>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	60fb      	str	r3, [r7, #12]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007558:	4b3e      	ldr	r3, [pc, #248]	@ (8007654 <xPortStartScheduler+0x124>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a3f      	ldr	r2, [pc, #252]	@ (800765c <xPortStartScheduler+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d10b      	bne.n	800757a <xPortStartScheduler+0x4a>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	613b      	str	r3, [r7, #16]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <xPortStartScheduler+0x130>)
 800757c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	22ff      	movs	r2, #255	@ 0xff
 800758a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800759c:	b2da      	uxtb	r2, r3
 800759e:	4b31      	ldr	r3, [pc, #196]	@ (8007664 <xPortStartScheduler+0x134>)
 80075a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075a2:	4b31      	ldr	r3, [pc, #196]	@ (8007668 <xPortStartScheduler+0x138>)
 80075a4:	2207      	movs	r2, #7
 80075a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075a8:	e009      	b.n	80075be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80075aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007668 <xPortStartScheduler+0x138>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007668 <xPortStartScheduler+0x138>)
 80075b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c6:	2b80      	cmp	r3, #128	@ 0x80
 80075c8:	d0ef      	beq.n	80075aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075ca:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <xPortStartScheduler+0x138>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1c3 0307 	rsb	r3, r3, #7
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d00b      	beq.n	80075ee <xPortStartScheduler+0xbe>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60bb      	str	r3, [r7, #8]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007668 <xPortStartScheduler+0x138>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007668 <xPortStartScheduler+0x138>)
 80075f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <xPortStartScheduler+0x138>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007600:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <xPortStartScheduler+0x138>)
 8007602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800760c:	4b17      	ldr	r3, [pc, #92]	@ (800766c <xPortStartScheduler+0x13c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a16      	ldr	r2, [pc, #88]	@ (800766c <xPortStartScheduler+0x13c>)
 8007612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007618:	4b14      	ldr	r3, [pc, #80]	@ (800766c <xPortStartScheduler+0x13c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a13      	ldr	r2, [pc, #76]	@ (800766c <xPortStartScheduler+0x13c>)
 800761e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007624:	f000 f8da 	bl	80077dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007628:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <xPortStartScheduler+0x140>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800762e:	f000 f8f9 	bl	8007824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <xPortStartScheduler+0x144>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a0f      	ldr	r2, [pc, #60]	@ (8007674 <xPortStartScheduler+0x144>)
 8007638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800763c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800763e:	f7ff ff63 	bl	8007508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007642:	f7fe ff59 	bl	80064f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007646:	f7ff ff1b 	bl	8007480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	e000ed00 	.word	0xe000ed00
 8007658:	410fc271 	.word	0x410fc271
 800765c:	410fc270 	.word	0x410fc270
 8007660:	e000e400 	.word	0xe000e400
 8007664:	20001308 	.word	0x20001308
 8007668:	2000130c 	.word	0x2000130c
 800766c:	e000ed20 	.word	0xe000ed20
 8007670:	2000000c 	.word	0x2000000c
 8007674:	e000ef34 	.word	0xe000ef34

08007678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007692:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <vPortEnterCritical+0x5c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	4a0e      	ldr	r2, [pc, #56]	@ (80076d4 <vPortEnterCritical+0x5c>)
 800769a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800769c:	4b0d      	ldr	r3, [pc, #52]	@ (80076d4 <vPortEnterCritical+0x5c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d110      	bne.n	80076c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076a4:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <vPortEnterCritical+0x60>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	603b      	str	r3, [r7, #0]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <vPortEnterCritical+0x4a>
	}
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	2000000c 	.word	0x2000000c
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076e2:	4b12      	ldr	r3, [pc, #72]	@ (800772c <vPortExitCritical+0x50>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <vPortExitCritical+0x26>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	607b      	str	r3, [r7, #4]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <vPortExitCritical+0x50>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3b01      	subs	r3, #1
 8007708:	4a08      	ldr	r2, [pc, #32]	@ (800772c <vPortExitCritical+0x50>)
 800770a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800770c:	4b07      	ldr	r3, [pc, #28]	@ (800772c <vPortExitCritical+0x50>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <vPortExitCritical+0x44>
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	2000000c 	.word	0x2000000c

08007730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007730:	f3ef 8009 	mrs	r0, PSP
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	4b15      	ldr	r3, [pc, #84]	@ (8007790 <pxCurrentTCBConst>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	f01e 0f10 	tst.w	lr, #16
 8007740:	bf08      	it	eq
 8007742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	6010      	str	r0, [r2, #0]
 800774c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007754:	f380 8811 	msr	BASEPRI, r0
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f7fe feca 	bl	80064f8 <vTaskSwitchContext>
 8007764:	f04f 0000 	mov.w	r0, #0
 8007768:	f380 8811 	msr	BASEPRI, r0
 800776c:	bc09      	pop	{r0, r3}
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	6808      	ldr	r0, [r1, #0]
 8007772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007776:	f01e 0f10 	tst.w	lr, #16
 800777a:	bf08      	it	eq
 800777c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007780:	f380 8809 	msr	PSP, r0
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst>:
 8007790:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	607b      	str	r3, [r7, #4]
}
 80077b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077b2:	f7fe fde1 	bl	8006378 <xTaskIncrementTick>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <SysTick_Handler+0x40>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f383 8811 	msr	BASEPRI, r3
}
 80077ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <vPortSetupTimerInterrupt+0x34>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <vPortSetupTimerInterrupt+0x38>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <vPortSetupTimerInterrupt+0x3c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a0a      	ldr	r2, [pc, #40]	@ (800781c <vPortSetupTimerInterrupt+0x40>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	4a09      	ldr	r2, [pc, #36]	@ (8007820 <vPortSetupTimerInterrupt+0x44>)
 80077fa:	3b01      	subs	r3, #1
 80077fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077fe:	4b04      	ldr	r3, [pc, #16]	@ (8007810 <vPortSetupTimerInterrupt+0x34>)
 8007800:	2207      	movs	r2, #7
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	e000e010 	.word	0xe000e010
 8007814:	e000e018 	.word	0xe000e018
 8007818:	20000000 	.word	0x20000000
 800781c:	10624dd3 	.word	0x10624dd3
 8007820:	e000e014 	.word	0xe000e014

08007824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007834 <vPortEnableVFP+0x10>
 8007828:	6801      	ldr	r1, [r0, #0]
 800782a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800782e:	6001      	str	r1, [r0, #0]
 8007830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007832:	bf00      	nop
 8007834:	e000ed88 	.word	0xe000ed88

08007838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800783e:	f3ef 8305 	mrs	r3, IPSR
 8007842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b0f      	cmp	r3, #15
 8007848:	d915      	bls.n	8007876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800784a:	4a18      	ldr	r2, [pc, #96]	@ (80078ac <vPortValidateInterruptPriority+0x74>)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007854:	4b16      	ldr	r3, [pc, #88]	@ (80078b0 <vPortValidateInterruptPriority+0x78>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	7afa      	ldrb	r2, [r7, #11]
 800785a:	429a      	cmp	r2, r3
 800785c:	d20b      	bcs.n	8007876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	607b      	str	r3, [r7, #4]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007876:	4b0f      	ldr	r3, [pc, #60]	@ (80078b4 <vPortValidateInterruptPriority+0x7c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800787e:	4b0e      	ldr	r3, [pc, #56]	@ (80078b8 <vPortValidateInterruptPriority+0x80>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d90b      	bls.n	800789e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	603b      	str	r3, [r7, #0]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <vPortValidateInterruptPriority+0x62>
	}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	e000e3f0 	.word	0xe000e3f0
 80078b0:	20001308 	.word	0x20001308
 80078b4:	e000ed0c 	.word	0xe000ed0c
 80078b8:	2000130c 	.word	0x2000130c

080078bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	@ 0x28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078c8:	f7fe fc9a 	bl	8006200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007a38 <pvPortMalloc+0x17c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d4:	f000 f916 	bl	8007b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078d8:	4b58      	ldr	r3, [pc, #352]	@ (8007a3c <pvPortMalloc+0x180>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 8090 	bne.w	8007a06 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01e      	beq.n	800792a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078ec:	2208      	movs	r2, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d015      	beq.n	800792a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	3308      	adds	r3, #8
 8007906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <pvPortMalloc+0x6e>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	617b      	str	r3, [r7, #20]
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d06a      	beq.n	8007a06 <pvPortMalloc+0x14a>
 8007930:	4b43      	ldr	r3, [pc, #268]	@ (8007a40 <pvPortMalloc+0x184>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d865      	bhi.n	8007a06 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800793a:	4b42      	ldr	r3, [pc, #264]	@ (8007a44 <pvPortMalloc+0x188>)
 800793c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800793e:	4b41      	ldr	r3, [pc, #260]	@ (8007a44 <pvPortMalloc+0x188>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007944:	e004      	b.n	8007950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <pvPortMalloc+0xa6>
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f1      	bne.n	8007946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007962:	4b35      	ldr	r3, [pc, #212]	@ (8007a38 <pvPortMalloc+0x17c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	d04c      	beq.n	8007a06 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2208      	movs	r2, #8
 8007972:	4413      	add	r3, r2
 8007974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	2308      	movs	r3, #8
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	429a      	cmp	r2, r3
 800798c:	d920      	bls.n	80079d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800798e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <pvPortMalloc+0xfc>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	613b      	str	r3, [r7, #16]
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	e7fd      	b.n	80079b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079ca:	69b8      	ldr	r0, [r7, #24]
 80079cc:	f000 f8fc 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a40 <pvPortMalloc+0x184>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	4a19      	ldr	r2, [pc, #100]	@ (8007a40 <pvPortMalloc+0x184>)
 80079dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079de:	4b18      	ldr	r3, [pc, #96]	@ (8007a40 <pvPortMalloc+0x184>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4b19      	ldr	r3, [pc, #100]	@ (8007a48 <pvPortMalloc+0x18c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d203      	bcs.n	80079f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pvPortMalloc+0x184>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a16      	ldr	r2, [pc, #88]	@ (8007a48 <pvPortMalloc+0x18c>)
 80079f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <pvPortMalloc+0x180>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a06:	f7fe fc09 	bl	800621c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <pvPortMalloc+0x170>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	e7fd      	b.n	8007a28 <pvPortMalloc+0x16c>
	return pvReturn;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	@ 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20002318 	.word	0x20002318
 8007a3c:	20002324 	.word	0x20002324
 8007a40:	2000231c 	.word	0x2000231c
 8007a44:	20002310 	.word	0x20002310
 8007a48:	20002320 	.word	0x20002320

08007a4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d04a      	beq.n	8007af4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a5e:	2308      	movs	r3, #8
 8007a60:	425b      	negs	r3, r3
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	4b22      	ldr	r3, [pc, #136]	@ (8007afc <vPortFree+0xb0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4013      	ands	r3, r2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <vPortFree+0x46>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60fb      	str	r3, [r7, #12]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <vPortFree+0x66>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <vPortFree+0xb0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d019      	beq.n	8007af4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d115      	bne.n	8007af4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <vPortFree+0xb0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad8:	f7fe fb92 	bl	8006200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <vPortFree+0xb4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a06      	ldr	r2, [pc, #24]	@ (8007b00 <vPortFree+0xb4>)
 8007ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f000 f86c 	bl	8007bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007af0:	f7fe fb94 	bl	800621c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007af4:	bf00      	nop
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20002324 	.word	0x20002324
 8007b00:	2000231c 	.word	0x2000231c

08007b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b10:	4b27      	ldr	r3, [pc, #156]	@ (8007bb0 <prvHeapInit+0xac>)
 8007b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb0 <prvHeapInit+0xac>)
 8007b34:	4413      	add	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb4 <prvHeapInit+0xb0>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <prvHeapInit+0xb0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b50:	2208      	movs	r2, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b66:	4b14      	ldr	r3, [pc, #80]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b6e:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	@ (8007bbc <prvHeapInit+0xb8>)
 8007b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a09      	ldr	r2, [pc, #36]	@ (8007bc0 <prvHeapInit+0xbc>)
 8007b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b9c:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <prvHeapInit+0xc0>)
 8007b9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20001310 	.word	0x20001310
 8007bb4:	20002310 	.word	0x20002310
 8007bb8:	20002318 	.word	0x20002318
 8007bbc:	20002320 	.word	0x20002320
 8007bc0:	2000231c 	.word	0x2000231c
 8007bc4:	20002324 	.word	0x20002324

08007bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd0:	4b28      	ldr	r3, [pc, #160]	@ (8007c74 <prvInsertBlockIntoFreeList+0xac>)
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e002      	b.n	8007bdc <prvInsertBlockIntoFreeList+0x14>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d8f7      	bhi.n	8007bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d108      	bne.n	8007c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d118      	bne.n	8007c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b15      	ldr	r3, [pc, #84]	@ (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d00d      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e008      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c46:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d002      	beq.n	8007c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20002310 	.word	0x20002310
 8007c78:	20002318 	.word	0x20002318

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <_reclaim_reent>:
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d44 <_reclaim_reent+0xb8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4283      	cmp	r3, r0
 8007c92:	b570      	push	{r4, r5, r6, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	d053      	beq.n	8007d40 <_reclaim_reent+0xb4>
 8007c98:	69c3      	ldr	r3, [r0, #28]
 8007c9a:	b31b      	cbz	r3, 8007ce4 <_reclaim_reent+0x58>
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	b163      	cbz	r3, 8007cba <_reclaim_reent+0x2e>
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	69e3      	ldr	r3, [r4, #28]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	5959      	ldr	r1, [r3, r5]
 8007ca8:	b9b1      	cbnz	r1, 8007cd8 <_reclaim_reent+0x4c>
 8007caa:	3504      	adds	r5, #4
 8007cac:	2d80      	cmp	r5, #128	@ 0x80
 8007cae:	d1f8      	bne.n	8007ca2 <_reclaim_reent+0x16>
 8007cb0:	69e3      	ldr	r3, [r4, #28]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	f000 f87b 	bl	8007db0 <_free_r>
 8007cba:	69e3      	ldr	r3, [r4, #28]
 8007cbc:	6819      	ldr	r1, [r3, #0]
 8007cbe:	b111      	cbz	r1, 8007cc6 <_reclaim_reent+0x3a>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 f875 	bl	8007db0 <_free_r>
 8007cc6:	69e3      	ldr	r3, [r4, #28]
 8007cc8:	689d      	ldr	r5, [r3, #8]
 8007cca:	b15d      	cbz	r5, 8007ce4 <_reclaim_reent+0x58>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	682d      	ldr	r5, [r5, #0]
 8007cd2:	f000 f86d 	bl	8007db0 <_free_r>
 8007cd6:	e7f8      	b.n	8007cca <_reclaim_reent+0x3e>
 8007cd8:	680e      	ldr	r6, [r1, #0]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f868 	bl	8007db0 <_free_r>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	e7e1      	b.n	8007ca8 <_reclaim_reent+0x1c>
 8007ce4:	6961      	ldr	r1, [r4, #20]
 8007ce6:	b111      	cbz	r1, 8007cee <_reclaim_reent+0x62>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 f861 	bl	8007db0 <_free_r>
 8007cee:	69e1      	ldr	r1, [r4, #28]
 8007cf0:	b111      	cbz	r1, 8007cf8 <_reclaim_reent+0x6c>
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 f85c 	bl	8007db0 <_free_r>
 8007cf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007cfa:	b111      	cbz	r1, 8007d02 <_reclaim_reent+0x76>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 f857 	bl	8007db0 <_free_r>
 8007d02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d04:	b111      	cbz	r1, 8007d0c <_reclaim_reent+0x80>
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 f852 	bl	8007db0 <_free_r>
 8007d0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007d0e:	b111      	cbz	r1, 8007d16 <_reclaim_reent+0x8a>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f84d 	bl	8007db0 <_free_r>
 8007d16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d18:	b111      	cbz	r1, 8007d20 <_reclaim_reent+0x94>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f848 	bl	8007db0 <_free_r>
 8007d20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d22:	b111      	cbz	r1, 8007d2a <_reclaim_reent+0x9e>
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 f843 	bl	8007db0 <_free_r>
 8007d2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d2c:	b111      	cbz	r1, 8007d34 <_reclaim_reent+0xa8>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f83e 	bl	8007db0 <_free_r>
 8007d34:	6a23      	ldr	r3, [r4, #32]
 8007d36:	b11b      	cbz	r3, 8007d40 <_reclaim_reent+0xb4>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d3e:	4718      	bx	r3
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	bf00      	nop
 8007d44:	20000010 	.word	0x20000010

08007d48 <__libc_init_array>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d80 <__libc_init_array+0x38>)
 8007d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d84 <__libc_init_array+0x3c>)
 8007d4e:	1b64      	subs	r4, r4, r5
 8007d50:	10a4      	asrs	r4, r4, #2
 8007d52:	2600      	movs	r6, #0
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	d109      	bne.n	8007d6c <__libc_init_array+0x24>
 8007d58:	4d0b      	ldr	r5, [pc, #44]	@ (8007d88 <__libc_init_array+0x40>)
 8007d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d8c <__libc_init_array+0x44>)
 8007d5c:	f000 f87e 	bl	8007e5c <_init>
 8007d60:	1b64      	subs	r4, r4, r5
 8007d62:	10a4      	asrs	r4, r4, #2
 8007d64:	2600      	movs	r6, #0
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	d105      	bne.n	8007d76 <__libc_init_array+0x2e>
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d70:	4798      	blx	r3
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7ee      	b.n	8007d54 <__libc_init_array+0xc>
 8007d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7a:	4798      	blx	r3
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7f2      	b.n	8007d66 <__libc_init_array+0x1e>
 8007d80:	08007f68 	.word	0x08007f68
 8007d84:	08007f68 	.word	0x08007f68
 8007d88:	08007f68 	.word	0x08007f68
 8007d8c:	08007f6c 	.word	0x08007f6c

08007d90 <__retarget_lock_acquire_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <__retarget_lock_release_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <memcpy>:
 8007d94:	440a      	add	r2, r1
 8007d96:	4291      	cmp	r1, r2
 8007d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d9c:	d100      	bne.n	8007da0 <memcpy+0xc>
 8007d9e:	4770      	bx	lr
 8007da0:	b510      	push	{r4, lr}
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007daa:	4291      	cmp	r1, r2
 8007dac:	d1f9      	bne.n	8007da2 <memcpy+0xe>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <_free_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4605      	mov	r5, r0
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d041      	beq.n	8007e3c <_free_r+0x8c>
 8007db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dbc:	1f0c      	subs	r4, r1, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bfb8      	it	lt
 8007dc2:	18e4      	addlt	r4, r4, r3
 8007dc4:	f000 f83e 	bl	8007e44 <__malloc_lock>
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <_free_r+0x90>)
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	b933      	cbnz	r3, 8007ddc <_free_r+0x2c>
 8007dce:	6063      	str	r3, [r4, #4]
 8007dd0:	6014      	str	r4, [r2, #0]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd8:	f000 b83a 	b.w	8007e50 <__malloc_unlock>
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d908      	bls.n	8007df2 <_free_r+0x42>
 8007de0:	6820      	ldr	r0, [r4, #0]
 8007de2:	1821      	adds	r1, r4, r0
 8007de4:	428b      	cmp	r3, r1
 8007de6:	bf01      	itttt	eq
 8007de8:	6819      	ldreq	r1, [r3, #0]
 8007dea:	685b      	ldreq	r3, [r3, #4]
 8007dec:	1809      	addeq	r1, r1, r0
 8007dee:	6021      	streq	r1, [r4, #0]
 8007df0:	e7ed      	b.n	8007dce <_free_r+0x1e>
 8007df2:	461a      	mov	r2, r3
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	b10b      	cbz	r3, 8007dfc <_free_r+0x4c>
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d9fa      	bls.n	8007df2 <_free_r+0x42>
 8007dfc:	6811      	ldr	r1, [r2, #0]
 8007dfe:	1850      	adds	r0, r2, r1
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d10b      	bne.n	8007e1c <_free_r+0x6c>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	4401      	add	r1, r0
 8007e08:	1850      	adds	r0, r2, r1
 8007e0a:	4283      	cmp	r3, r0
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	d1e0      	bne.n	8007dd2 <_free_r+0x22>
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	6053      	str	r3, [r2, #4]
 8007e16:	4408      	add	r0, r1
 8007e18:	6010      	str	r0, [r2, #0]
 8007e1a:	e7da      	b.n	8007dd2 <_free_r+0x22>
 8007e1c:	d902      	bls.n	8007e24 <_free_r+0x74>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	e7d6      	b.n	8007dd2 <_free_r+0x22>
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	1821      	adds	r1, r4, r0
 8007e28:	428b      	cmp	r3, r1
 8007e2a:	bf04      	itt	eq
 8007e2c:	6819      	ldreq	r1, [r3, #0]
 8007e2e:	685b      	ldreq	r3, [r3, #4]
 8007e30:	6063      	str	r3, [r4, #4]
 8007e32:	bf04      	itt	eq
 8007e34:	1809      	addeq	r1, r1, r0
 8007e36:	6021      	streq	r1, [r4, #0]
 8007e38:	6054      	str	r4, [r2, #4]
 8007e3a:	e7ca      	b.n	8007dd2 <_free_r+0x22>
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
 8007e3e:	bf00      	nop
 8007e40:	20002464 	.word	0x20002464

08007e44 <__malloc_lock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__malloc_lock+0x8>)
 8007e46:	f7ff bfa3 	b.w	8007d90 <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20002460 	.word	0x20002460

08007e50 <__malloc_unlock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	@ (8007e58 <__malloc_unlock+0x8>)
 8007e52:	f7ff bf9e 	b.w	8007d92 <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20002460 	.word	0x20002460

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
